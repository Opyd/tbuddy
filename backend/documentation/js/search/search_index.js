var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.733,1,1.895]],["body/injectables/AccessTokenGuard.html",[0,1.189,1,3.073,2,1.8,3,0.692,4,0.609,5,0.609,6,3.344,7,0.952,8,0.038,9,1.082,10,3.344,11,2.236,12,0.692,13,0.195,14,2.236,15,3.344,16,0.032,17,0.032]],["title/injectables/AccessTokenStrategy.html",[0,0.733,18,1.683]],["body/injectables/AccessTokenStrategy.html",[0,0.948,2,1.272,3,0.489,4,0.431,5,0.431,7,0.936,8,0.039,9,0.765,11,1.58,12,0.489,13,0.138,14,1.58,16,0.026,17,0.026,18,2.177,19,2.029,20,0.617,21,1.949,22,3.256,23,1.779,24,2.363,25,3.447,26,1.429,27,2.87,28,1.949,29,1.753,30,1.336,31,1.949,32,3.256,33,3.955,34,4.211,35,2.87,36,3.256,37,1.414,38,2.363,39,2.363,40,2.363,41,2.029,42,2.796,43,1.58,44,2.363,45,1.753,46,2.029,47,2.87,48,1.779,49,2.363,50,2.363,51,2.363,52,2.363,53,2.87,54,1.414]],["title/modules/AppModule.html",[55,1.506,56,1.895]],["body/modules/AppModule.html",[3,0.545,4,0.48,5,0.48,7,0.979,8,0.039,9,0.853,12,0.545,13,0.154,16,0.028,17,0.028,55,2.098,56,3.509,57,1.577,58,2.098,59,2.635,60,2.635,61,3.006,62,2.69,63,2.64,64,1.984,65,1.984,66,3.201,67,3.01,68,2.635,69,1.762,70,2.635,71,3.201,72,3.201,73,3.201,74,1.577,75,2.263]],["title/controllers/AuthController.html",[76,1.683,77,1.895]],["body/controllers/AuthController.html",[1,1.266,3,0.348,4,0.306,5,0.306,7,0.938,8,0.039,9,0.544,12,0.348,13,0.098,16,0.02,17,0.02,20,0.439,21,1.524,26,1.504,28,2.05,29,1.844,30,1.229,31,2.05,37,2.05,48,1.266,54,1.838,74,1.006,76,1.125,77,1.917,78,1.682,79,1.682,80,2.043,81,2.546,82,2.546,83,2.546,84,2.546,85,2.043,86,3.64,87,2.291,88,2.043,89,2.043,90,1.444,91,3.872,92,3.092,93,1.118,94,3.092,95,2.043,96,2.043,97,2.043,98,2.043,99,1.682,100,2.589,101,3.092,102,2.043,103,1.682,104,1.881,105,3.092,106,2.043,107,1.682,108,1.682,109,2.043,110,1.838,111,1.682,112,1.682,113,1.125,114,1.682,115,1.444,116,2.043,117,1.266,118,2.043,119,2.043,120,1.682,121,2.043,122,2.043,123,2.043,124,2.043,125,1.444,126,2.043,127,2.043,128,2.043,129,2.043,130,2.043,131,2.043,132,2.043,133,1.702,134,1.682,135,2.043,136,1.702,137,2.043,138,2.043]],["title/classes/AuthDto.html",[13,0.147,100,1.683]],["body/classes/AuthDto.html",[3,0.601,4,0.529,5,0.529,7,0.677,8,0.038,12,0.601,13,0.218,16,0.029,17,0.029,20,0.758,26,1.639,30,1.34,45,2.347,87,2.497,100,2.497,139,1.737,140,2.903,141,2.497,142,3.109,143,2.761,144,3.735,145,3.526,146,3.526,147,4.129,148,4.129,149,2.492]],["title/modules/AuthModule.html",[55,1.506,61,1.683]],["body/modules/AuthModule.html",[3,0.468,4,0.412,5,0.412,7,1.048,8,0.039,9,0.731,12,0.468,13,0.132,16,0.025,17,0.025,18,2.871,43,1.511,55,1.889,57,1.353,58,1.889,61,3.154,62,2.569,63,2.377,64,1.702,65,1.702,67,2.711,70,2.26,74,1.889,75,2.711,77,2.74,110,2.569,111,2.26,150,2.26,151,2.745,152,2.26,153,2.871,154,2.745,155,2.745,156,2.745,157,1.941,158,2.745,159,2.745,160,2.745,161,2.745,162,2.745]],["title/injectables/AuthService.html",[0,0.733,110,1.506]],["body/injectables/AuthService.html",[0,0.405,2,0.431,3,0.166,4,0.146,5,0.146,7,0.682,8,0.039,9,0.259,12,0.166,13,0.047,16,0.011,17,0.011,20,0.209,21,0.831,23,1.046,25,2.51,26,1.283,28,1.749,29,1.574,30,1.048,31,1.749,37,1.851,43,0.536,44,1.389,45,2.271,54,1.487,81,2.196,82,1.389,83,1.389,84,1.389,86,0.688,93,1.572,99,1.389,100,1.82,103,1.389,104,1.42,110,0.831,112,0.801,113,0.536,114,0.801,125,2.783,133,2.395,134,3.369,136,2.741,142,1.653,143,1.82,157,0.688,163,0.801,164,4.004,165,1.687,166,1.687,167,0.973,168,1.182,169,3.551,170,0.973,171,1.687,172,1.687,173,0.973,174,1.687,175,1.687,176,4.093,177,2.484,178,3.758,179,1.687,180,0.973,181,2.667,182,2.235,183,2.667,184,1.687,185,0.973,186,1.687,187,3.017,188,1.687,189,3.307,190,0.973,191,1.687,192,0.973,193,1.687,194,2.51,195,1.687,196,0.973,197,1.389,198,1.687,199,2.667,200,1.885,201,1.193,202,1.84,203,0.973,204,0.973,205,1.389,206,1.84,207,2.235,208,2.667,209,1.687,210,3.889,211,0.973,212,0.973,213,3.017,214,1.687,215,0.973,216,0.973,217,0.973,218,0.973,219,0.973,220,0.973,221,1.687,222,1.687,223,0.973,224,0.973,225,0.973,226,2.235,227,3.307,228,0.973,229,1.687,230,1.687,231,1.687,232,0.973,233,0.973,234,0.973,235,0.973,236,1.687,237,1.687,238,0.973,239,1.687,240,1.687,241,1.687,242,0.973,243,1.687,244,0.973,245,1.687,246,1.687,247,0.973,248,1.687,249,0.973,250,0.973,251,0.973,252,0.973,253,1.687,254,1.687,255,1.687,256,0.973,257,0.973,258,1.687]],["title/classes/CreateUserDto.html",[13,0.147,104,1.222]],["body/classes/CreateUserDto.html",[3,0.524,4,0.461,5,0.461,7,0.59,8,0.038,12,0.524,13,0.199,16,0.027,17,0.027,20,0.661,26,1.813,30,1.482,45,2.486,46,3.314,87,2.581,104,1.657,136,2.581,139,1.514,141,2.281,142,2.906,143,2.581,144,2.53,147,4.131,148,3.86,149,2.172,259,4.313,260,2.172,261,3.073,262,3.073,263,3.073,264,3.073,265,3.073,266,3.073,267,4.144]],["title/injectables/RefreshTokenGuard.html",[0,0.733,117,1.895]],["body/injectables/RefreshTokenGuard.html",[0,1.185,2,1.79,3,0.688,4,0.606,5,0.606,7,0.948,8,0.038,9,1.076,10,3.325,11,2.223,12,0.688,13,0.194,14,2.223,15,3.325,16,0.032,17,0.032,117,3.062,200,2.854,268,3.325]],["title/injectables/RefreshTokenStrategy.html",[0,0.733,153,1.683]],["body/injectables/RefreshTokenStrategy.html",[0,0.92,2,1.217,3,0.468,4,0.412,5,0.412,7,0.967,8,0.039,9,0.731,11,1.511,12,0.468,13,0.132,14,1.511,16,0.025,17,0.025,20,0.59,21,1.889,22,3.157,23,1.702,24,2.26,25,3.382,26,1.386,28,1.889,29,1.7,30,1.132,31,1.889,32,3.157,36,3.939,37,1.353,38,3.157,39,2.26,40,3.157,41,1.941,42,2.711,43,1.511,48,1.702,49,2.26,50,2.26,51,2.26,52,2.26,54,1.353,86,3.382,91,2.26,115,1.941,133,1.511,136,2.111,153,2.111,200,1.941,269,2.26,270,2.745,271,3.835,272,2.745,273,2.745,274,2.745,275,1.941,276,2.745,277,2.745]],["title/classes/UpdateUserDto.html",[13,0.147,278,1.683]],["body/classes/UpdateUserDto.html",[3,0.684,4,0.602,5,0.602,7,0.945,8,0.038,12,0.684,13,0.193,14,2.21,16,0.032,17,0.032,104,1.605,113,2.21,139,1.978,260,2.838,278,2.709,279,3.305,280,4.015,281,3.305,282,3.305,283,2.838,284,4.015]],["title/classes/User.html",[13,0.147,93,1.105]],["body/classes/User.html",[3,0.749,4,0.66,5,0.66,8,0.036,12,0.749,13,0.211,16,0.034,17,0.034,93,1.879,139,2.166,285,3.619]],["title/classes/User-1.html",[13,0.124,93,0.93,286,2.574]],["body/classes/User-1.html",[3,0.371,4,0.327,5,0.327,7,0.623,8,0.039,12,0.661,13,0.105,16,0.021,17,0.021,20,0.468,26,1.741,30,1.514,45,2.429,46,2.74,69,1.199,87,2.652,93,1.401,133,1.199,136,2.134,139,1.073,141,1.786,142,2.403,143,2.134,202,2.671,275,3.916,287,1.199,288,3.877,289,3.877,290,1.793,291,5.241,292,2.177,293,4.296,294,4.296,295,2.177,296,2.177,297,2.177,298,3.192,299,2.177,300,2.177,301,2.671,302,2.177,303,1.539,304,1.539,305,3.244,306,2.671,307,1.793,308,1.793,309,1.793,310,1.793,311,1.35,312,1.793,313,1.793,314,1.793,315,2.177,316,4.296,317,2.177,318,2.177,319,2.177,320,2.177,321,1.35,322,1.793]],["title/controllers/UsersController.html",[76,1.683,323,1.895]],["body/controllers/UsersController.html",[3,0.366,4,0.323,5,0.323,7,0.82,8,0.039,9,0.573,12,0.366,13,0.103,16,0.021,17,0.021,20,0.463,21,1.583,26,1.652,28,2.104,29,1.892,30,1.261,31,2.104,37,2.252,45,2.315,48,1.333,54,2.252,74,1.059,76,1.184,79,1.77,87,2.516,104,1.917,107,3.168,108,2.646,113,1.769,120,1.77,125,1.52,168,1.705,201,2.272,278,2.812,283,2.272,323,1.992,324,1.77,325,2.15,326,3.515,327,2.646,328,2.646,329,1.77,330,2.15,331,2.15,332,1.77,333,3.214,334,2.15,335,3.947,336,1.77,337,3.214,338,2.15,339,1.77,340,3.214,341,2.15,342,2.15,343,2.15,344,1.77,345,1.77,346,1.77,347,2.15,348,2.15,349,2.15,350,2.15,351,2.15,352,2.15,353,2.15,354,2.15,355,2.15,356,2.15]],["title/modules/UsersModule.html",[55,1.506,62,1.506]],["body/modules/UsersModule.html",[3,0.515,4,0.453,5,0.453,7,1,8,0.039,9,0.805,12,0.515,13,0.145,16,0.026,17,0.026,29,1.338,55,2.018,57,1.488,58,2.018,62,2.706,63,2.539,64,1.872,65,1.872,67,2.135,68,2.486,69,1.662,74,2.018,75,2.895,93,1.091,168,2.58,301,2.486,321,2.539,323,2.88,344,2.486,357,2.486,358,2.486,359,2.486,360,3.02,361,4.095,362,3.02,363,2.486,364,3.02,365,3.02]],["title/injectables/UsersService.html",[0,0.733,168,1.355]],["body/injectables/UsersService.html",[0,0.68,2,0.808,3,0.311,4,0.274,5,0.274,7,0.863,8,0.039,9,0.486,12,0.311,13,0.088,16,0.018,17,0.018,20,0.392,21,1.396,23,1.13,26,1.695,28,2.215,29,1.992,30,1.327,31,2.215,37,2.215,45,2.334,54,2.215,69,1.004,93,0.659,104,1.698,113,1.56,133,1.004,143,1.56,164,4.599,168,1.256,177,2.333,194,2.003,201,2.457,206,1.501,210,1.501,275,1.289,278,2.67,283,2.003,303,1.289,304,1.289,326,3.227,327,2.333,328,2.333,329,2.333,332,2.333,335,3.227,336,2.333,339,1.501,345,1.501,346,1.501,363,1.501,366,1.501,367,2.834,368,1.823,369,3.92,370,1.823,371,2.834,372,1.823,373,1.823,374,4.85,375,2.834,376,1.823,377,1.823,378,1.823,379,1.823,380,1.823,381,1.823,382,1.823,383,1.823,384,1.823,385,1.823,386,1.823,387,1.823,388,2.834,389,1.823,390,1.823,391,1.823]],["title/coverage.html",[392,2.919]],["body/coverage.html",[0,1.257,1,1.729,5,0.418,6,2.296,8,0.038,13,0.243,16,0.025,17,0.025,18,1.536,19,1.972,30,0.824,76,2.135,77,1.729,78,2.296,93,1.401,100,1.536,104,1.115,110,1.374,117,1.729,140,2.296,153,1.536,163,2.296,168,1.236,194,1.972,197,2.296,259,2.296,260,2.741,268,2.296,269,2.296,278,1.536,279,2.296,285,2.296,287,2.135,321,1.729,323,1.729,324,2.296,366,2.296,392,1.972,393,2.789,394,2.789,395,2.789,396,5.826,397,3.878,398,2.789,399,2.789,400,4.458,401,5.241,402,2.296,403,2.296,404,2.789,405,2.789,406,2.789,407,2.789,408,2.789,409,2.789]],["title/dependencies.html",[58,1.806,410,2.119]],["body/dependencies.html",[8,0.039,9,0.898,11,1.856,13,0.212,16,0.028,17,0.028,41,3.115,42,2.383,43,1.856,58,1.661,69,1.856,115,2.383,149,2.383,157,2.383,205,2.776,281,2.776,282,2.776,303,2.383,411,5.402,412,3.372,413,3.372,414,3.372,415,3.372,416,3.372,417,3.372,418,3.372,419,3.372,420,3.372,421,3.372,422,3.372,423,3.372,424,3.372,425,3.372,426,3.372,427,3.372,428,3.372,429,3.372]],["title/miscellaneous/enumerations.html",[430,1.029,431,3.017]],["body/miscellaneous/enumerations.html",[8,0.033,16,0.033,17,0.033,20,0.9,287,2.303,298,4.155,306,4.155,307,3.445,308,3.445,309,3.445,310,3.445,311,2.594,312,3.445,313,3.445,314,3.445,430,1.673,431,3.445,432,3.568]],["title/miscellaneous/functions.html",[430,1.029,433,3.017]],["body/miscellaneous/functions.html",[8,0.034,16,0.034,17,0.034,20,0.958,402,3.666,403,4.581,430,1.78,433,3.666,434,4.452]],["title/index.html",[20,0.554,435,2.574,436,2.574]],["body/index.html",[4,0.434,8,0.038,16,0.026,17,0.026,90,2.046,311,1.794,392,2.046,437,2.894,438,2.894,439,3.978,440,2.894,441,2.894,442,2.894,443,2.894,444,2.894,445,2.894,446,4.545,447,2.894,448,2.894,449,2.894,450,2.894,451,5.43,452,2.894,453,2.894,454,2.894,455,5.301,456,2.894,457,2.894,458,3.978,459,2.894,460,2.894,461,2.894,462,2.894,463,3.978,464,3.978,465,2.894,466,2.894,467,2.894,468,3.978,469,3.978,470,2.894,471,2.894,472,2.894,473,2.894,474,2.894,475,2.894,476,2.894,477,2.894,478,2.894,479,2.894,480,2.894,481,2.894,482,2.894,483,2.894,484,2.894,485,2.383,486,2.894,487,2.894,488,2.894,489,2.894,490,2.894,491,2.894,492,2.383]],["title/modules.html",[57,2.034]],["body/modules.html",[8,0.033,16,0.033,17,0.033,56,2.625,57,2.087,61,2.331,62,2.087,311,3.377,493,5.448,494,5.448,495,5.448]],["title/overview.html",[496,3.399]],["body/overview.html",[2,1.412,8,0.037,16,0.027,17,0.027,18,2.628,56,3.381,57,1.57,58,2.092,59,2.623,60,2.623,61,3.21,62,2.743,63,2.632,64,1.975,65,1.975,74,1.57,110,2.352,139,1.57,150,2.623,152,2.623,153,2.628,168,2.467,357,2.623,358,2.623,359,2.623,496,2.623,497,3.186,498,3.186,499,3.186,500,3.186]],["title/properties.html",[141,2.018,410,2.119]],["body/properties.html",[8,0.038,16,0.033,17,0.033,90,3.088,141,2.405,485,3.596,492,3.596,501,4.368,502,4.368,503,4.368]],["title/miscellaneous/typealiases.html",[430,1.029,504,3.665]],["body/miscellaneous/typealiases.html",[8,0.033,16,0.033,17,0.033,19,3.031,20,0.922,30,1.512,34,4.217,287,2.36,290,3.53,304,3.62,430,1.714,432,3.031,505,4.288,506,4.288]],["title/miscellaneous/variables.html",[430,1.029,507,3.017]],["body/miscellaneous/variables.html",[8,0.036,16,0.033,17,0.033,20,0.94,287,2.405,321,3.21,322,3.596,430,1.747,432,3.088,507,3.596,508,4.368,509,4.368]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":502,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["0.30.1",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":401,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":400,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":404,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":407,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":286,"title":{"classes/User-1.html":{}},"body":{}}],["15min",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["2",{"_index":498,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":497,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":500,"title":{},"body":{"overview.html":{}}}],["6",{"_index":499,"title":{},"body":{"overview.html":{}}}],["6.6.5",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["6/8",{"_index":399,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["7d",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["9.0.0",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["access",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstoken",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":18,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["admin",{"_index":314,"title":{},"body":{"classes/User-1.html":{},"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":505,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":475,"title":{},"body":{"index.html":{}}}],["app",{"_index":453,"title":{},"body":{"index.html":{}}}],["applications",{"_index":445,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":56,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argon",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["argon2.hash(createuserdto.password",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.hash(refreshtoken",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["async",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":77,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":100,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authdto.password",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authguard('jwt",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authmodule",{"_index":61,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":485,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":110,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["avatar",{"_index":319,"title":{},"body":{"classes/User-1.html":{}}}],["await",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":476,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('access",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('user",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('username",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":403,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["bot",{"_index":310,"title":{},"body":{"classes/User-1.html":{},"miscellaneous/enumerations.html":{}}}],["both",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["browse",{"_index":495,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":493,"title":{},"body":{"modules.html":{}}}],["building",{"_index":440,"title":{},"body":{"index.html":{}}}],["checking",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["checks",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":13,"title":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":139,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"overview.html":{}}}],["client",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["cluster_appmodule",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":357,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":358,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":359,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["common/guards/accesstoken.guard",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["common/guards/refreshtoken.guard",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["config",{"_index":32,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["config.get('jwt_access_secret",{"_index":53,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["config.get('jwt_refresh_secret",{"_index":273,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["configmodule",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice",{"_index":25,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["const",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":23,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":381,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(config",{"_index":24,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["constructor(private",{"_index":48,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(usermodel",{"_index":368,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":76,"title":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":347,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["country",{"_index":318,"title":{},"body":{"classes/User-1.html":{}}}],["coverage",{"_index":392,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":283,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":348,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":329,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createduser",{"_index":382,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser.save",{"_index":384,"title":{},"body":{"injectables/UsersService.html":{}}}],["creates",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuserdto",{"_index":104,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.username",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":26,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":343,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id",{"_index":337,"title":{},"body":{"controllers/UsersController.html":{}}}],["denied",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":58,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":288,"title":{},"body":{"classes/User-1.html":{}}}],["development",{"_index":454,"title":{},"body":{"index.html":{}}}],["document",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"classes/User-1.html":{}}}],["documentation",{"_index":393,"title":{},"body":{"coverage.html":{}}}],["dto/auth.dto",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":345,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":346,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":465,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":441,"title":{},"body":{"index.html":{}}}],["email",{"_index":46,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["enum",{"_index":305,"title":{},"body":{"classes/User-1.html":{}}}],["enumerations",{"_index":431,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["exec",{"_index":388,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":361,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateUserDto.html":{}}}],["extracting",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["extractjwt",{"_index":39,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":51,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":326,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyidandupdate(id",{"_index":390,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername",{"_index":367,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername(username",{"_index":375,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":327,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":351,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(id",{"_index":332,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["firstname",{"_index":317,"title":{},"body":{"classes/User-1.html":{}}}],["framework",{"_index":439,"title":{},"body":{"index.html":{}}}],["function",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["functions",{"_index":433,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generates",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["generating",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id",{"_index":333,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('logout",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('refresh",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":435,"title":{"index.html":{}},"body":{}}],["gettokens",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["grow",{"_index":472,"title":{},"body":{"index.html":{}}}],["hash",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedrefreshedtoken",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashing",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["here",{"_index":482,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":489,"title":{},"body":{"index.html":{}}}],["id",{"_index":335,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":394,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["incorrect",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":20,"title":{"index.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":380,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":450,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":452,"title":{},"body":{"index.html":{}}}],["isemail",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty",{"_index":147,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":148,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":144,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{}}}],["join",{"_index":478,"title":{},"body":{"index.html":{}}}],["jungle",{"_index":309,"title":{},"body":{"classes/User-1.html":{},"miscellaneous/enumerations.html":{}}}],["jwt",{"_index":42,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":50,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":34,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["jwtservice",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["kamil",{"_index":486,"title":{},"body":{"index.html":{}}}],["license",{"_index":492,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":469,"title":{},"body":{"index.html":{}}}],["literal",{"_index":290,"title":{},"body":{"classes/User-1.html":{},"miscellaneous/typealiases.html":{}}}],["logout",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@req",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["matches",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["methods",{"_index":21,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mid",{"_index":307,"title":{},"body":{"classes/User-1.html":{},"miscellaneous/enumerations.html":{}}}],["miscellaneous",{"_index":430,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":468,"title":{},"body":{"index.html":{}}}],["mode",{"_index":458,"title":{},"body":{"index.html":{}}}],["model",{"_index":369,"title":{},"body":{"injectables/UsersService.html":{}}}],["module",{"_index":55,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":57,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb://mongoadmin:mongoadmin@localhost:27017/praca",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":303,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":364,"title":{},"body":{"modules/UsersModule.html":{}}}],["mongoosemodule.forroot",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":481,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":487,"title":{},"body":{"index.html":{}}}],["name",{"_index":29,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":446,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":491,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":43,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":281,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"classes/User-1.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newuser",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.username",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["node.js",{"_index":438,"title":{},"body":{"index.html":{}}}],["npm",{"_index":451,"title":{},"body":{"index.html":{}}}],["null",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["object",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["one",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["open",{"_index":470,"title":{},"body":{"index.html":{}}}],["optional",{"_index":31,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["organizer",{"_index":313,"title":{},"body":{"classes/User-1.html":{},"miscellaneous/enumerations.html":{}}}],["out",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":496,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":410,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partialtype",{"_index":280,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":284,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":41,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":38,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":47,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["passreqtocallback",{"_index":274,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["password",{"_index":142,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/User-1.html":{}}}],["passwordmatches",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":342,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id",{"_index":340,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":36,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["player",{"_index":312,"title":{},"body":{"classes/User-1.html":{},"miscellaneous/enumerations.html":{}}}],["playerroles",{"_index":306,"title":{},"body":{"classes/User-1.html":{},"miscellaneous/enumerations.html":{}}}],["please",{"_index":479,"title":{},"body":{"index.html":{}}}],["post",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post('signin",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefferedroles",{"_index":320,"title":{},"body":{"classes/User-1.html":{}}}],["prefix",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":460,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":437,"title":{},"body":{"index.html":{}}}],["project",{"_index":471,"title":{},"body":{"index.html":{}}}],["promise",{"_index":374,"title":{},"body":{"injectables/UsersService.html":{}}}],["promise.all",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["prop",{"_index":291,"title":{},"body":{"classes/User-1.html":{}}}],["prop({required",{"_index":293,"title":{},"body":{"classes/User-1.html":{}}}],["properties",{"_index":141,"title":{"properties.html":{}},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{},"classes/User-1.html":{},"properties.html":{}}}],["providers",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["read",{"_index":480,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refreshtoken",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/User-1.html":{}}}],["refreshtokenguard",{"_index":117,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["refreshtokenmatches",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtokens(@req",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(req",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(userid",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenstrategy",{"_index":153,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["refrestoken",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["remove",{"_index":328,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":355,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(id",{"_index":336,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":449,"title":{},"body":{"index.html":{}}}],["req",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["req.get('authorization').replace('bearer",{"_index":276,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["req.user['refreshtoken",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user['sub",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["required",{"_index":316,"title":{},"body":{"classes/User-1.html":{}}}],["reset",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["results",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":54,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":37,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["return{string",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["rimraf",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":289,"title":{},"body":{"classes/User-1.html":{}}}],["run",{"_index":455,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":442,"title":{},"body":{"index.html":{}}}],["schema",{"_index":301,"title":{},"body":{"classes/User-1.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":302,"title":{},"body":{"classes/User-1.html":{}}}],["schemafactory.createforclass(user",{"_index":322,"title":{},"body":{"classes/User-1.html":{},"miscellaneous/variables.html":{}}}],["schemas/user.schema",{"_index":363,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["secret",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":52,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["server",{"_index":443,"title":{},"body":{"index.html":{}}}],["sets",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["side",{"_index":444,"title":{},"body":{"index.html":{}}}],["sign",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(authdto",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(createuserdto",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":474,"title":{},"body":{"index.html":{}}}],["src/.../accesstoken.strategy.ts",{"_index":506,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":434,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.schema.ts",{"_index":432,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:14",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:19",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:35",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:101",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:137",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:51",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:77",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:87",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":140,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:10",{"_index":145,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dto/auth.dto.ts:6",{"_index":146,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts",{"_index":19,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:12",{"_index":27,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:20",{"_index":35,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts",{"_index":269,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:11",{"_index":270,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:20",{"_index":272,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/common/guards/accesstoken.guard.ts",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/common/guards/refreshtoken.guard.ts",{"_index":268,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":402,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/create",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":279,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":285,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/schemas/user.schema.ts",{"_index":287,"title":{},"body":{"classes/User-1.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/schemas/user.schema.ts:23",{"_index":300,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/schemas/user.schema.ts:26",{"_index":295,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/schemas/user.schema.ts:29",{"_index":296,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/schemas/user.schema.ts:32",{"_index":299,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/schemas/user.schema.ts:35",{"_index":297,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/schemas/user.schema.ts:38",{"_index":292,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/users.controller.ts",{"_index":324,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:19",{"_index":330,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:24",{"_index":331,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:29",{"_index":334,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:34",{"_index":341,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:39",{"_index":338,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":360,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":366,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":372,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:16",{"_index":373,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":377,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:24",{"_index":376,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":379,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":378,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":370,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":456,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":459,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":461,"title":{},"body":{"index.html":{}}}],["started",{"_index":436,"title":{"index.html":{}},"body":{}}],["starter",{"_index":448,"title":{},"body":{"index.html":{}}}],["statements",{"_index":395,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":483,"title":{},"body":{"index.html":{}}}],["strategies/accesstoken.strategy",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/refreshtoken.strategy",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":40,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["string",{"_index":45,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["sub",{"_index":44,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{}}}],["super",{"_index":49,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["support",{"_index":311,"title":{},"body":{"classes/User-1.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{}}}],["svg",{"_index":494,"title":{},"body":{"modules.html":{}}}],["table",{"_index":409,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":464,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":467,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":466,"title":{},"body":{"index.html":{}}}],["tests",{"_index":463,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":473,"title":{},"body":{"index.html":{}}}],["this.authservice.logout(req.user['sub",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens(userid",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(authdto",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(newuser._id",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user._id",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterefreshtoken(newuser._id",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterefreshtoken(user._id",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel",{"_index":389,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel(createuserdto",{"_index":383,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find().exec",{"_index":385,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(id",{"_index":386,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidanddelete(id).exec",{"_index":391,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":387,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.create",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyusername",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyusername(authdto.username",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyusername(userid",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.update(userid",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":349,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":350,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(id",{"_index":352,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":356,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":354,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["timestamps",{"_index":315,"title":{},"body":{"classes/User-1.html":{}}}],["token",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens.refreshtoken",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["top",{"_index":308,"title":{},"body":{"classes/User-1.html":{},"miscellaneous/enumerations.html":{}}}],["touch",{"_index":484,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["trim",{"_index":277,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["true",{"_index":275,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":490,"title":{},"body":{"index.html":{}}}],["type",{"_index":30,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":504,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":282,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":447,"title":{},"body":{"index.html":{}}}],["unique",{"_index":294,"title":{},"body":{"classes/User-1.html":{}}}],["unit",{"_index":462,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":503,"title":{},"body":{"properties.html":{}}}],["update",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":353,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":339,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updaterefreshtoken",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterefreshtoken(userid",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["updates",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto",{"_index":278,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updating",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["used",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["useguards",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(accesstokenguard",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(accesstokenguard)@get('logout",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshtokenguard",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshtokenguard)@get('refresh",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":93,"title":{"classes/User.html":{},"classes/User-1.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/User.html":{},"classes/User-1.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:14",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:15",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:6",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.name",{"_index":365,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.refreshtoken",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdocument",{"_index":304,"title":{},"body":{"classes/User-1.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["userexists",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["usermodel",{"_index":371,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":143,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{}}}],["userroles",{"_index":298,"title":{},"body":{"classes/User-1.html":{},"miscellaneous/enumerations.html":{}}}],["users",{"_index":325,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":362,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":344,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/create",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/users.module",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["userschema",{"_index":321,"title":{},"body":{"classes/User-1.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":323,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersmodule",{"_index":62,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":168,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":22,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["validate(payload",{"_index":33,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validate(req",{"_index":271,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validator",{"_index":149,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":507,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":501,"title":{},"body":{"properties.html":{}}}],["void",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["watch",{"_index":457,"title":{},"body":{"index.html":{}}}],["website",{"_index":488,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":477,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/accessToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AccessTokenGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/accessToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/accessToken.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/accessToken.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ntype JwtPayload = {\n  sub: string;\n  email: string;\n};\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(private config: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('JWT_ACCESS_SECRET'),\n    });\n  }\n\n  validate(payload: JwtPayload) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(\n      'mongodb://mongoadmin:mongoadmin@localhost:27017/praca',\n    ),\n    UsersModule,\n    AuthModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logout\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                signin\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Extracting user object from request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \nrefreshTokens(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshTokenGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signin\n                        \n                    \n                \n            \n            \n                \nsignin(authDto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Req, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport { AuthDto } from './dto/auth.dto';\nimport { Request } from 'express';\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard';\nimport { RefreshTokenGuard } from '../common/guards/refreshToken.guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('signup')\n  signup(@Body() createUserDto: CreateUserDto) {\n    return this.authService.signUp(createUserDto);\n  }\n\n  @Post('signin')\n  signin(@Body() authDto: AuthDto) {\n    return this.authService.signIn(authDto);\n  }\n\n  /**\n   *\n   * @param req Extracting user object from request\n   */\n  @UseGuards(AccessTokenGuard)\n  @Get('logout')\n  logout(@Req() req: Request) {\n    this.authService.logout(req.user['sub']);\n  }\n\n  @UseGuards(RefreshTokenGuard)\n  @Get('refresh')\n  refreshTokens(@Req() req: Request) {\n    const userId = req.user['sub'];\n    const refreshToken = req.user['refreshToken'];\n    return this.authService.refreshTokens(userId, refreshToken);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class AuthDto {\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RefreshTokenStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AccessTokenStrategy } from './strategies/accessToken.strategy';\nimport { RefreshTokenStrategy } from './strategies/refreshToken.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService, AccessTokenStrategy, RefreshTokenStrategy],\n  imports: [JwtModule.register({}), ConfigModule.forRoot(), UsersModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                updateRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:101\n                \n            \n\n\n            \n                \n                    Generates both tokens for user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        accessToken\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:77\n                \n            \n\n\n            \n                \n                    Logout method\nSets user refreshToken to NULL\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:137\n                \n            \n\n\n            \n                \n                    Updates user's access Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        accessToken\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:51\n                \n            \n\n\n            \n                \n                    Sign in method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        refreshToken\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n                    Creates new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        refreshToken\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:87\n                \n            \n\n\n            \n                \n                    Function used to hash a refresh token and update it in user's document\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport * as argon2 from 'argon2';\nimport { AuthDto } from './dto/auth.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private userService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService,\n  ) {}\n\n  /**\n   * Creates new user\n   * @param createUserDto\n   * @returns {string} refreshToken\n   * @returns {string} accessToken\n   */\n  async signUp(createUserDto: CreateUserDto) {\n    //Checking if user exists\n    const userExists = await this.userService.findByUsername(\n      createUserDto.username,\n    );\n    if (userExists) {\n      throw new BadRequestException('User already exists');\n    }\n\n    //hashing password with argon\n    const hash = await argon2.hash(createUserDto.password);\n    const newUser = await this.userService.create({\n      ...createUserDto,\n      password: hash,\n    });\n\n    //generating tokens for client\n    const tokens = await this.getTokens(newUser._id, newUser.username);\n    await this.updateRefreshToken(newUser._id, tokens.refreshToken);\n    return tokens;\n  }\n\n  /**\n   * Sign in method\n   * @param authDto\n   * @return{string} refreshToken\n   * @return{string} accessToken\n   */\n  async signIn(authDto: AuthDto) {\n    //Checking if user exists\n    const user = await this.userService.findByUsername(authDto.username);\n    if (!user) throw new BadRequestException('User does not exists');\n\n    //Checking if the password matches\n    const passwordMatches = await argon2.verify(\n      user.password,\n      authDto.password,\n    );\n    if (!passwordMatches)\n      throw new BadRequestException('Username or password is incorrect');\n\n    //generating tokens for client\n    const tokens = await this.getTokens(user._id, user.username);\n\n    //updating the user's refresh token\n    await this.updateRefreshToken(user._id, tokens.refreshToken);\n    return tokens;\n  }\n\n  /**\n   * Logout method\n   * Sets user refreshToken to NULL\n   * @param userId\n   */\n  async logout(userId: string) {\n    //Sets refresh token to NULL\n    return this.userService.update(userId, { refreshToken: null });\n  }\n\n  /**\n   * Function used to hash a refresh token and update it in user's document\n   * @param userId\n   * @param refreshToken\n   */\n  async updateRefreshToken(userId: string, refreshToken: string) {\n    const hashedRefreshedToken = await argon2.hash(refreshToken);\n    await this.userService.update(userId, {\n      refreshToken: hashedRefreshedToken,\n    });\n  }\n\n  /**\n   * Generates both tokens for user\n   * @param userId\n   * @param username\n   * @return{string} accessToken\n   * @return{string} refresToken\n   */\n  async getTokens(userId: string, username: string) {\n    const [accessToken, refreshToken] = await Promise.all([\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username,\n        },\n        {\n          secret: this.configService.get('JWT_ACCESS_SECRET'),\n          expiresIn: '15min',\n        },\n      ),\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username,\n        },\n        {\n          secret: this.configService.get('JWT_REFRESH_SECRET'),\n          expiresIn: '7d',\n        },\n      ),\n    ]);\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  /**\n   * Updates user's access Token\n   * @param userId\n   * @param refreshToken\n   * @return{string} accessToken\n   * @return{string} refresToken\n   */\n  async refreshTokens(userId: string, refreshToken: string) {\n    const user = await this.userService.findByUsername(userId);\n    if (!user || !user.refreshToken)\n      throw new BadRequestException('Access Denied');\n\n    //Checks if refreshToken from request matches one from document\n    const refreshTokenMatches = await argon2.verify(\n      user.refreshToken,\n      refreshToken,\n    );\n    if (!refreshTokenMatches) throw new BadRequestException('Access Denied');\n\n    const tokens = await this.getTokens(user._id, user.username);\n    await this.updateRefreshToken(user._id, tokens.refreshToken);\n    return tokens;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/refreshToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshTokenGuard extends AuthGuard('jwt-refresh') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/refreshToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/refreshToken.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/refreshToken.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private config: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('JWT_REFRESH_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  validate(req: Request, payload: any) {\n    const refreshToken = req.get('Authorization').replace('Bearer', '').trim();\n    return { ...payload, refreshToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class User {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User-1.html":{"url":"classes/User-1.html","title":"class - User-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                details\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                role\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type UserDocument = User & Document;\n\nenum PlayerRoles {\n  MID,\n  TOP,\n  JUNGLE,\n  BOT,\n  SUPPORT,\n}\n\nenum UserRoles {\n  PLAYER,\n  ORGANIZER,\n  ADMIN,\n}\n\n@Schema({ timestamps: true })\nexport class User {\n  @Prop({ required: true, unique: true })\n  username: string;\n\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  @Prop({ required: true })\n  password: string;\n\n  @Prop()\n  role: UserRoles;\n\n  @Prop({ required: true })\n  refreshToken: string;\n\n  @Prop()\n  details: {\n    firstname: string;\n    country: string;\n    avatar: string;\n    about: string;\n    prefferedRoles: PlayerRoles[];\n  };\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './schemas/user.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User, UserDocument } from './schemas/user.schema';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel(User.name) private userModel: Model) {}\n  async create(createUserDto: CreateUserDto) {\n    const createdUser = await new this.userModel(createUserDto);\n    return createdUser.save();\n  }\n\n  async findAll(): Promise {\n    return this.userModel.find().exec();\n  }\n\n  async findOne(id: string): Promise {\n    return this.userModel.findById(id);\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.userModel.findOne({ username }).exec();\n  }\n\n  async update(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.userModel\n      .findByIdAndUpdate(id, updateUserDto, { new: true })\n      .exec();\n  }\n\n  async remove(id: string) {\n    return this.userModel.findByIdAndDelete(id).exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/accessToken.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/refreshToken.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/guards/accessToken.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/refreshToken.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            argon2 : ^0.30.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            mongoose : ^6.6.5\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PlayerRoles   (src/.../user.schema.ts)\n                        \n                        \n                            UserRoles   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/schemas/user.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        PlayerRoles\n                    \n                \n                        \n                            \n                                 MID\n                            \n                        \n                        \n                            \n                                 TOP\n                            \n                        \n                        \n                            \n                                 JUNGLE\n                            \n                        \n                        \n                            \n                                 BOT\n                            \n                        \n                        \n                            \n                                 SUPPORT\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserRoles\n                    \n                \n                        \n                            \n                                 PLAYER\n                            \n                        \n                        \n                            \n                                 ORGANIZER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JwtPayload   (src/.../accessToken.strategy.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/strategies/accessToken.strategy.ts\n    \n    \n        \n            \n                \n                    \n                    JwtPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/users/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
