var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.994,1,2.025]],["body/injectables/AccessTokenGuard.html",[0,1.748,1,3.563,2,2.505,3,0.331,4,0.331,5,0.262,6,4.701,7,0.475,8,0.019,9,1.482,10,4.701,11,3.494,12,0.331,13,0.176,14,2.658,15,4.701,16,0.017,17,0.017]],["title/injectables/AccessTokenStrategy.html",[0,0.994,18,2.344]],["body/injectables/AccessTokenStrategy.html",[0,1.535,2,2.028,3,0.268,4,0.268,5,0.212,7,0.485,8,0.02,9,1.2,11,2.829,12,0.268,13,0.143,14,2.152,16,0.015,17,0.015,18,3.62,19,3.389,20,0.419,21,2.451,22,4.87,23,2.152,24,3.806,25,4.578,26,0.958,27,4.439,28,2.451,29,1.879,30,0.733,31,2.319,32,4.337,33,5.68,34,5.852,35,4.439,36,4.87,37,1.916,38,3.806,39,3.806,40,3.806,41,3.389,42,3.938,43,2.622,44,3.806,45,0.958,46,3.078,47,4.439,48,2.622,49,3.806,50,3.806,51,4.439,52,3.806,53,4.439,54,1.916]],["title/modules/AppModule.html",[55,1.501,56,2.55]],["body/modules/AppModule.html",[3,0.255,4,0.255,5,0.202,7,0.515,8,0.02,9,1.142,12,0.255,13,0.136,16,0.014,17,0.014,25,4.241,32,3.225,43,2.495,55,2.246,56,5.099,57,2.179,58,2.374,59,3.621,60,3.621,61,3.795,62,3.795,63,4.391,64,3.554,65,3.25,66,2.495,67,2.327,68,4.223,69,3.899,70,2.929,71,1.471,72,2.929,73,4.223,74,3.225,75,4.716,76,4.223,77,4.223,78,3.225,79,4.223,80,2.179,81,4.223,82,4.223,83,1.93,84,2.692]],["title/controllers/AuthController.html",[85,1.783,86,2.55]],["body/controllers/AuthController.html",[1,1.629,3,0.178,4,0.178,5,0.141,7,0.479,8,0.02,9,0.799,12,0.178,13,0.095,16,0.011,17,0.011,20,0.279,21,1.856,26,0.939,28,2.402,29,1.841,30,0.651,31,2.272,37,2.663,42,3.859,48,1.747,54,2.187,61,2.369,83,1.351,85,2.458,86,2.982,87,2.535,88,2.05,89,2.956,90,1.965,91,2.982,92,4.772,93,3.687,94,3.687,95,3.687,96,2.956,97,3.664,98,1.43,99,2.956,100,2.956,101,3.547,102,2.272,103,4.059,104,4.3,105,4.3,106,2.956,107,2.956,108,2.956,109,2.956,110,4.3,111,3.283,112,3.687,113,4.3,114,3.066,115,2.535,116,4.059,117,4.3,118,2.956,119,4.3,120,4.772,121,2.535,122,3.285,123,4.3,124,2.956,125,4.3,126,2.741,127,1.965,128,1.965,129,3.283,130,2.05,131,2.05,132,2.05,133,3.493,134,2.535,135,2.535,136,1.629,137,2.535,138,1.747,139,2.05,140,2.05,141,2.956,142,2.05,143,1.085,144,2.956,145,2.956,146,1.884,147,2.05,148,3.493,149,2.05,150,2.956,151,2.956,152,2.956,153,2.956,154,2.05,155,2.956,156,2.956,157,2.956,158,2.956,159,2.956,160,2.956,161,1.423,162,1.207,163,2.535,164,2.956,165,2.956]],["title/classes/AuthDto.html",[13,0.118,116,2.344]],["body/classes/AuthDto.html",[3,0.298,4,0.298,5,0.236,7,0.446,8,0.019,12,0.298,13,0.195,16,0.016,17,0.016,20,0.467,26,1.025,30,0.711,45,1.158,98,1.561,116,3.873,143,1.813,162,2.686,166,1.27,167,4.238,168,1.34,169,3.624,170,3.589,171,4.942,172,4.942,173,3.19,174,3.006,175,2.133,176,3.394]],["title/modules/AuthModule.html",[55,1.501,61,2.025]],["body/modules/AuthModule.html",[3,0.26,4,0.26,5,0.206,7,0.525,8,0.02,9,1.165,12,0.26,13,0.138,16,0.014,17,0.014,18,4.416,43,2.547,55,2.276,57,2.224,58,2.406,61,4.062,64,3.574,65,3.293,66,2.547,67,2.375,69,3.553,72,2.99,75,3.697,83,2.547,84,3.553,86,4.284,133,4.093,134,3.697,177,3.697,178,4.311,179,3.697,180,4.416,181,4.311,182,4.311,183,4.311,184,3.292,185,4.311,186,4.311,187,4.311,188,4.311]],["title/injectables/AuthService.html",[0,0.994,133,2.172]],["body/injectables/AuthService.html",[0,0.814,2,0.85,3,0.112,4,0.112,5,0.089,7,0.412,8,0.02,9,0.503,12,0.112,13,0.06,16,0.008,17,0.008,20,0.176,21,1.299,23,1.46,25,3.892,26,0.909,28,2.326,29,1.783,30,0.631,31,2.201,37,2.326,43,1.099,44,2.581,45,1.188,54,2.065,61,1.658,80,3.447,90,0.85,92,3.736,93,2.581,94,2.581,95,2.581,97,1.025,102,2.162,111,3.654,112,3.736,114,3.711,115,2.581,116,3.436,120,5.56,121,2.581,122,2.896,126,1.919,128,2.463,133,1.778,135,1.595,136,1.025,137,1.595,146,1.919,147,2.087,148,3.668,161,2.054,162,2.292,169,2.4,184,1.42,189,1.595,190,3.01,191,3.01,192,1.86,193,1.991,194,5.612,195,1.86,196,1.553,197,3.01,198,2.629,199,3.01,200,3.264,201,1.86,202,3.01,203,3.01,204,5.612,205,2.827,206,3.01,207,1.86,208,4.357,209,3.791,210,2.636,211,3.01,212,1.86,213,2.581,214,3.01,215,4.39,216,1.86,217,3.01,218,1.86,219,2.298,220,3.01,221,1.86,222,2.298,223,4.357,224,3.327,225,1.658,226,1.839,227,1.186,228,1.29,229,2.581,230,1.099,231,1.42,232,2.417,233,3.791,234,2.777,235,3.01,236,3.648,237,1.86,238,1.86,239,2.827,240,2.087,241,1.29,242,1.86,243,1.86,244,1.86,245,1.86,246,1.86,247,1.86,248,1.86,249,1.099,250,3.01,251,3.01,252,1.86,253,1.86,254,1.86,255,1.86,256,1.86,257,3.791,258,3.01,259,1.86,260,1.919,261,3.01,262,3.01,263,1.86,264,1.86,265,1.86,266,1.86,267,3.01,268,1.919,269,3.01,270,1.86,271,3.01,272,3.01,273,3.01,274,1.86,275,3.01,276,1.86,277,3.01,278,3.01,279,1.86,280,3.01,281,1.86,282,1.86,283,1.86,284,1.595,285,3.01,286,3.01,287,3.01,288,1.595,289,1.86,290,3.01]],["title/classes/CreateTeamDto.html",[13,0.118,291,2.172]],["body/classes/CreateTeamDto.html",[3,0.257,4,0.257,5,0.204,7,0.407,8,0.02,12,0.257,13,0.178,16,0.014,17,0.014,20,0.403,26,1.137,29,2.034,30,0.789,45,1.226,98,1.732,143,1.566,166,1.097,168,1.221,173,3.154,174,3.214,175,1.842,176,3.356,291,3.271,292,5.923,293,3.258,294,4.694,295,4.694,296,3.918,297,3.632,298,4.267,299,3.659,300,4.267,301,3.659,302,4.267,303,3.659,304,4.267,305,4.267,306,3.84,307,4.267,308,3.659,309,2.959,310,4.267,311,4.267]],["title/classes/CreateTournamentDto.html",[13,0.118,312,2.172]],["body/classes/CreateTournamentDto.html",[3,0.272,4,0.272,5,0.216,7,0.422,8,0.019,12,0.272,13,0.184,16,0.015,17,0.015,20,0.426,26,1.065,30,0.739,45,1.121,90,2.884,98,1.622,143,1.655,166,1.159,168,1.266,170,3.39,173,3.221,174,2.884,175,1.947,176,3.427,306,3.979,308,3.868,312,3.39,313,5.695,314,3.128,315,4.819,316,4.819,317,4.511,318,2.961,319,4.511,320,5.739,321,5.739,322,4.511,323,4.511,324,4.511,325,3.445,326,4.511,327,4.921,328,4.511,329,4.511]],["title/classes/CreateUserDto.html",[13,0.118,122,1.897]],["body/classes/CreateUserDto.html",[3,0.201,4,0.201,5,0.159,7,0.455,8,0.02,12,0.282,13,0.189,16,0.012,17,0.012,20,0.314,26,1.135,30,0.82,31,1.91,45,1.225,46,3.752,98,1.73,114,2.98,122,2.413,143,1.22,162,2.209,166,0.854,168,1.031,169,2.98,170,1.964,173,2.847,174,3.076,175,1.435,176,3.401,200,3.449,230,3.197,249,3.197,299,2.851,301,2.851,309,4.667,325,4.483,330,5.224,331,2.119,332,4.071,333,3.742,334,3.324,335,3.324,336,3.324,337,3.944,338,3.324,339,3.324,340,3.324,341,3.324,342,3.324,343,3.324,344,4.677,345,3.324,346,3.324,347,3.324,348,3.571,349,3.571,350,4.01,351,2.851,352,3.571,353,2.305,354,2.305,355,4.639,356,2.851,357,3.243,358,2.851,359,2.538,360,2.538,361,2.851,362,2.851,363,1.22,364,2.538,365,2.538,366,1.357]],["title/classes/DetailsDto.html",[13,0.118,337,2.344]],["body/classes/DetailsDto.html",[3,0.211,4,0.211,5,0.167,7,0.463,8,0.02,12,0.293,13,0.193,16,0.013,17,0.013,20,0.33,26,1.1,30,0.81,45,1.221,46,2.427,98,1.676,114,1.928,122,1.806,143,1.284,162,1.429,166,0.9,168,1.069,169,1.928,173,2.911,174,3.115,175,1.511,176,3.45,200,2.231,230,2.864,249,2.068,309,4.727,325,4.584,330,5.106,331,2.231,332,4.163,333,3.09,337,4.019,348,3.702,349,3.702,350,4.157,351,3.001,352,3.702,353,2.427,354,2.427,355,4.769,356,3.001,357,3.857,358,3.001,359,4.247,360,4.247,361,3.001,362,4.157,363,1.779,364,4.247,365,4.247,366,1.98,367,5.148,368,3.5,369,3.5,370,3.5,371,3.5,372,3.5,373,3.5,374,3.5,375,3.5]],["title/classes/HandleInviteDto.html",[13,0.118,376,2.344]],["body/classes/HandleInviteDto.html",[3,0.295,4,0.295,5,0.233,7,0.443,8,0.019,12,0.295,13,0.194,16,0.016,17,0.016,20,0.461,26,1.018,30,0.706,45,1.018,98,1.55,143,1.792,166,1.255,168,1.33,170,2.885,173,3.173,174,2.756,175,2.108,176,3.376,348,4.605,366,2.463,376,3.845,377,5.611,378,4.188,379,6.544,380,4.997,381,4.884,382,4.884,383,4.884]],["title/classes/InviteUserDto.html",[13,0.118,384,2.344]],["body/classes/InviteUserDto.html",[3,0.296,4,0.296,5,0.234,7,0.444,8,0.019,12,0.296,13,0.194,16,0.016,17,0.016,20,0.462,26,1.019,30,0.707,45,1.154,98,1.553,143,1.797,162,2.676,166,1.259,168,1.333,170,3.57,173,3.177,174,2.994,175,2.114,176,3.381,331,3.122,380,5.003,384,3.852,385,5.618,386,4.898,387,4.898]],["title/classes/KickFromTournamentDto.html",[13,0.118,388,2.344]],["body/classes/KickFromTournamentDto.html",[3,0.316,4,0.316,5,0.25,7,0.385,8,0.019,12,0.316,13,0.202,16,0.016,17,0.016,20,0.495,26,0.884,30,0.613,45,1.062,98,1.346,166,1.346,168,1.388,173,3.053,174,2.877,175,2.261,303,4.492,314,3.633,380,5.153,388,4.013,389,5.398,390,5.239]],["title/classes/Match.html",[13,0.118,391,2.025]],["body/classes/Match.html",[3,0.244,4,0.244,5,0.193,7,0.392,8,0.02,12,0.361,13,0.13,16,0.014,17,0.014,20,0.381,26,1.117,30,0.834,45,1.245,71,1.406,98,1.702,161,1.336,166,1.038,168,1.178,226,2.59,366,2.181,391,3.296,392,2.8,393,3.535,394,3.087,395,4.569,396,4.569,397,3.814,398,3.881,399,4.038,400,4.038,401,3.814,402,4.718,403,2.37,404,4.038,405,4.038,406,4.038,407,2.441,408,2.224,409,1.743,410,3.462,411,3.404,412,3.462]],["title/interfaces/MatchInterface.html",[413,1.783,414,2.344]],["body/interfaces/MatchInterface.html",[3,0.304,4,0.304,5,0.241,8,0.019,12,0.304,16,0.016,17,0.016,20,0.475,30,0.808,45,1.27,168,1.355,394,3.563,395,5.273,396,5.273,397,4.402,413,2.44,414,3.916,415,3.208,416,4.315]],["title/classes/MatchResultDto.html",[13,0.118,417,2.344]],["body/classes/MatchResultDto.html",[3,0.269,4,0.269,5,0.213,7,0.419,8,0.02,12,0.269,13,0.183,16,0.015,17,0.015,20,0.421,26,1.116,30,0.774,45,1.179,98,1.7,143,1.637,166,1.147,168,1.257,170,3.71,173,3.315,174,3.023,175,1.926,176,3.527,318,2.94,327,4.887,394,3.24,397,4.002,417,3.633,418,5.861,419,3.826,420,4.002,421,4.354,422,4.462,423,4.462,424,4.462,425,4.462,426,4.462]],["title/injectables/RefreshTokenGuard.html",[0,0.994,140,2.55]],["body/injectables/RefreshTokenGuard.html",[0,1.745,2,2.497,3,0.33,4,0.33,5,0.261,7,0.474,8,0.019,9,1.477,10,4.685,11,3.483,12,0.33,13,0.175,14,2.65,15,4.685,16,0.017,17,0.017,140,4.476,224,4.172,427,4.685]],["title/injectables/RefreshTokenStrategy.html",[0,0.994,180,2.344]],["body/injectables/RefreshTokenStrategy.html",[0,1.509,2,1.975,3,0.261,4,0.261,5,0.207,7,0.497,8,0.02,9,1.168,11,2.755,12,0.261,13,0.139,14,2.096,16,0.014,17,0.014,20,0.408,21,2.41,22,4.788,23,2.096,24,3.706,25,4.533,26,0.942,28,2.41,29,1.847,30,0.654,31,2.28,32,4.264,36,5.605,37,1.866,38,4.788,39,3.706,40,4.788,41,3.301,42,3.872,43,2.554,48,2.554,49,3.706,50,3.706,52,3.706,54,1.866,97,3.601,103,2.755,114,3.076,138,2.554,161,1.43,180,3.559,224,3.301,363,1.586,428,3.706,429,4.323,430,5.584,431,4.323,432,4.323,433,4.323,434,4.323,435,4.323]],["title/guards/RolesGuard.html",[436,2.807,437,2.55]],["body/guards/RolesGuard.html",[0,1.556,3,0.274,4,0.274,5,0.217,7,0.423,8,0.02,9,1.226,12,0.274,13,0.146,16,0.015,17,0.015,20,0.428,21,2.485,23,2.199,26,0.972,28,2.485,29,1.905,30,0.674,31,2.351,37,1.958,48,2.68,54,2.485,97,2.499,102,1.58,161,2.093,363,1.664,366,2.351,437,3.993,438,4.536,439,3.889,440,6.656,441,4.536,442,7.02,443,4.536,444,5.759,445,6.656,446,4.536,447,4.536,448,3.889,449,4.536,450,3.993,451,4.536,452,4.536,453,4.536,454,4.536,455,4.536]],["title/classes/Stage.html",[13,0.118,456,2.172]],["body/classes/Stage.html",[3,0.257,4,0.257,5,0.203,7,0.477,8,0.02,12,0.37,13,0.137,16,0.014,17,0.014,20,0.402,26,1.036,30,0.808,71,1.482,98,1.578,161,1.408,166,1.094,168,1.219,196,2.852,226,2.681,260,3.913,318,2.852,363,2.385,366,2.257,391,3.382,393,3.627,398,3.58,401,2.713,407,2.526,408,2.345,409,1.837,411,3.524,414,2.713,421,4.257,456,3.627,457,2.951,458,3.266,459,4.256,460,2.951,461,4.256,462,4.256,463,4.256,464,3.649,465,3.649,466,3.25,467,2.713,468,3.524,469,3.649]],["title/interfaces/StageInterface.html",[413,1.783,470,2.807]],["body/interfaces/StageInterface.html",[3,0.307,4,0.307,5,0.243,7,0.374,8,0.019,12,0.307,16,0.016,17,0.016,20,0.481,30,0.78,168,1.365,260,4.42,318,3.44,366,2.722,393,4.097,413,2.47,414,4.42,415,3.247,421,4.808,464,4.368,470,4.726,471,4.368]],["title/classes/Team.html",[13,0.118,403,1.281]],["body/classes/Team.html",[3,0.173,4,0.173,5,0.137,7,0.448,8,0.02,12,0.3,13,0.135,16,0.011,17,0.011,20,0.27,26,1.132,29,1.647,30,0.855,45,1.232,71,0.998,98,1.724,102,2.125,129,3.208,161,0.948,162,1.17,166,0.736,168,0.927,196,2.168,210,1.578,226,2.038,231,2.187,294,3.8,295,3.8,296,3.172,297,2.94,306,3.801,363,2.421,398,3.746,401,3.889,402,4.048,403,2.125,407,1.92,408,1.578,409,1.814,458,2.483,460,4.048,472,1.986,473,4.977,474,2.505,475,4.267,476,4.186,477,3.8,478,3.603,479,2.864,480,2.864,481,3.172,482,2.864,483,3.172,484,2.864,485,4.202,486,4.202,487,2.864,488,2.864,489,2.864,490,2.864,491,2.864,492,3.208,493,4.202,494,4.202,495,2.864,496,2.864,497,2.914,498,2.483,499,2.914,500,2.187,501,2.187,502,2.864,503,2.864,504,2.864,505,2.914,506,2.456,507,2.914,508,2.456,509,2.864,510,2.864,511,2.864]],["title/classes/TeamEventsHistory.html",[13,0.118,512,2.807]],["body/classes/TeamEventsHistory.html",[3,0.254,4,0.254,5,0.201,7,0.403,8,0.02,12,0.368,13,0.135,14,2.658,16,0.014,17,0.014,20,0.397,26,1.029,30,0.805,45,0.925,71,1.464,98,1.568,161,1.39,166,1.08,168,1.209,196,2.168,226,2.959,363,2.011,398,3.79,407,2.505,408,2.315,409,2.366,458,2.483,466,3.208,467,2.678,474,2.955,499,2.914,512,4.186,513,4.122,514,2.678,515,3.695,516,3.361,517,4.202,518,4.202,519,3.695,520,3.801,521,4.202,522,3.208,523,4.701,524,4.186,525,4.701,526,4.701,527,3.801,528,3.603]],["title/interfaces/TeamEventsInterface.html",[413,1.783,481,2.344]],["body/interfaces/TeamEventsInterface.html",[3,0.294,4,0.294,5,0.233,7,0.358,8,0.019,12,0.363,16,0.016,17,0.016,20,0.46,30,0.848,45,1.206,168,1.328,394,2.512,403,1.696,413,2.919,415,3.104,420,3.104,474,2.225,481,3.838,483,3.104,498,2.877,515,4.063,516,3.761,519,3.761,529,3.718,530,3.377]],["title/classes/TeamHistory.html",[13,0.118,531,2.807]],["body/classes/TeamHistory.html",[3,0.257,4,0.257,5,0.204,7,0.407,8,0.02,12,0.334,13,0.137,14,2.685,16,0.014,17,0.014,20,0.403,26,1.098,30,0.761,45,1.165,71,1.486,98,1.672,161,1.412,166,1.097,168,1.221,196,3.172,226,2.981,363,2.535,394,3.172,398,3.805,407,2.53,408,2.351,409,2.39,420,3.918,458,3.632,466,3.258,467,2.72,497,2.959,513,4.297,514,2.72,515,3.713,530,4.262,531,4.228,532,4.267,533,4.267,534,4.267,535,4.267,536,3.659]],["title/interfaces/TeamHistoryInterface.html",[413,1.783,483,2.344]],["body/interfaces/TeamHistoryInterface.html",[3,0.288,4,0.288,5,0.228,7,0.351,8,0.019,12,0.359,16,0.015,17,0.015,20,0.45,30,0.816,45,1.249,168,1.311,394,3.497,403,1.662,413,2.883,415,3.041,420,4.321,474,2.18,481,3.041,483,3.789,498,2.819,515,4.049,516,2.628,519,3.275,529,3.643,530,4.7]],["title/controllers/TeamsController.html",[85,1.783,537,2.55]],["body/controllers/TeamsController.html",[1,1.032,3,0.113,4,0.113,5,0.09,7,0.427,8,0.02,9,0.506,12,0.113,13,0.06,16,0.008,17,0.008,20,0.177,21,1.306,23,0.908,26,1.007,28,2.508,29,1.923,30,0.68,31,2.373,37,2.888,45,1.193,54,2.634,58,0.808,80,1.965,83,0.856,85,0.908,88,1.299,90,0.856,91,2.099,97,3.653,98,1.534,102,1.789,103,4.03,126,1.929,127,1.999,128,1.999,130,2.099,131,3.033,132,1.299,136,1.032,138,1.106,139,1.299,142,1.299,143,0.687,146,1.194,148,3.918,149,1.299,154,3.33,161,0.62,162,2.437,193,1.741,196,0.966,198,2.099,205,1.106,210,1.032,213,2.595,225,1.667,227,1.929,228,1.299,232,1.929,234,2.788,236,1.032,239,1.788,241,1.299,268,1.194,288,2.595,291,3.433,297,3.324,366,0.765,384,3.804,403,2.33,537,2.099,538,1.606,539,3.666,540,2.311,541,3.033,542,2.595,543,2.788,544,3.027,545,2.099,546,3.027,547,2.595,548,2.595,549,3.027,550,1.606,551,3.027,552,1.873,553,3.027,554,3.027,555,1.606,556,1.606,557,1.873,558,2.595,559,1.562,560,1.873,561,1.873,562,3.027,563,1.873,564,1.299,565,2.595,566,1.873,567,3.526,568,1.873,569,1.873,570,1.873,571,3.027,572,2.595,573,1.873,574,1.873,575,1.873,576,4.374,577,3.027,578,2.311,579,1.873,580,1.873,581,1.873,582,1.873,583,2.595,584,1.873,585,2.311,586,2.311,587,2.25,588,1.43,589,3.804,590,1.873,591,1.873,592,2.099,593,1.43,594,1.43,595,1.606,596,1.43,597,2.477,598,1.606,599,1.194,600,2.311,601,1.194,602,1.606,603,1.873,604,1.873,605,1.873,606,1.873,607,1.873,608,1.873,609,1.873,610,1.43,611,1.43,612,1.873,613,1.873,614,1.873,615,1.873,616,1.873,617,1.606,618,1.873,619,1.873,620,1.606,621,1.873,622,1.873,623,1.873,624,1.873,625,1.873,626,1.873,627,1.873,628,1.873,629,1.873,630,1.873,631,1.873,632,3.027,633,1.873,634,1.873,635,1.873,636,1.873]],["title/modules/TeamsModule.html",[55,1.501,62,2.025]],["body/modules/TeamsModule.html",[3,0.27,4,0.27,5,0.214,7,0.514,8,0.02,9,1.209,12,0.27,13,0.144,16,0.015,17,0.015,29,1.48,55,2.331,57,2.309,58,2.464,62,3.917,64,2.946,65,3.373,66,2.644,67,2.465,69,2.852,70,3.103,71,1.558,72,3.103,83,2.609,84,3.639,403,1.558,407,2.045,507,3.959,537,4.36,597,3.825,598,3.837,637,3.837,638,3.837,639,3.837,640,4.475,641,4.359,642,3.959,643,4.475,644,3.837,645,3.417,646,4.475]],["title/injectables/TeamsService.html",[0,0.994,597,1.897]],["body/injectables/TeamsService.html",[0,0.78,2,0.807,3,0.106,4,0.106,5,0.084,7,0.418,8,0.02,9,0.477,12,0.106,13,0.057,16,0.007,17,0.007,20,0.167,21,1.245,23,1.399,26,1.011,28,2.527,29,2.024,30,0.716,31,2.39,37,2.527,45,1.192,54,2.527,71,0.615,78,1.348,80,3.491,102,2.039,127,1.318,128,2.888,136,0.972,161,2.091,162,2.04,193,2.128,198,2.536,205,3.115,210,0.972,225,1.589,227,1.125,228,1.224,232,1.839,234,1.839,236,3.642,239,3.25,240,1.224,249,1.704,268,2.692,284,2.473,291,2.751,294,1.348,295,1.348,296,3.506,297,3.115,363,1.342,384,3.361,403,2.357,409,0.762,474,1.671,476,2.202,477,2.202,498,1.043,500,1.348,515,1.589,516,0.972,519,0.972,527,1.224,542,2.473,543,2.692,545,2,547,2.473,548,2.473,550,2.473,564,2,567,1.704,586,2.202,587,2.161,588,2.202,589,3.506,595,1.513,596,1.348,597,1.488,599,1.125,600,2.202,601,1.125,602,1.513,610,1.348,642,1.224,644,1.513,647,1.513,648,2.884,649,2.884,650,2.884,651,1.765,652,3.225,653,1.765,654,2.884,655,1.765,656,2.884,657,1.765,658,1.765,659,1.765,660,2.884,661,1.765,662,2.884,663,1.765,664,2.884,665,2.884,666,1.765,667,2.884,668,1.765,669,2.884,670,1.765,671,1.765,672,2.202,673,1.348,674,1.765,675,1.765,676,1.513,677,1.765,678,1.765,679,4.284,680,3.992,681,1.765,682,2.473,683,4.47,684,2.473,685,3.555,686,1.765,687,4.656,688,1.765,689,2.884,690,1.513,691,2.473,692,1.513,693,3.465,694,1.513,695,1.513,696,3.136,697,3.136,698,1.513,699,1.348,700,1.765,701,1.765,702,1.765,703,1.513,704,1.513,705,1.348,706,1.348,707,2.884,708,1.765,709,2.884,710,2.884,711,2.884,712,2.884,713,1.765,714,2.884,715,2.202,716,1.765,717,1.765]],["title/classes/Tournament.html",[13,0.118,559,1.897]],["body/classes/Tournament.html",[3,0.197,4,0.197,5,0.156,7,0.394,8,0.02,12,0.323,13,0.105,16,0.012,17,0.012,20,0.308,26,1.149,30,0.848,45,1.2,71,1.137,90,2.448,98,1.751,102,1.608,161,1.08,166,0.839,168,1.018,196,3.292,226,2.239,315,4.091,316,4.091,318,2.383,363,2.643,366,2.378,393,3.165,398,3.848,401,2.944,402,3.715,403,1.137,407,2.11,408,1.799,409,1.409,456,3.165,458,3.769,460,3.202,467,3.713,468,2.944,492,3.526,501,2.493,505,4.039,559,2.764,718,2.264,719,3.415,720,4.594,721,4.091,722,4.594,723,4.091,724,3.265,725,3.265,726,3.265,727,3.265,728,3.265,729,3.265,730,3.265,731,3.265,732,3.265,733,3.265,734,2.493,735,3.202,736,2.8]],["title/controllers/TournamentsController.html",[85,1.783,737,2.55]],["body/controllers/TournamentsController.html",[1,0.816,3,0.195,4,0.089,5,0.071,7,0.391,8,0.02,9,0.4,12,0.089,13,0.048,16,0.006,17,0.006,20,0.14,21,1.076,26,0.998,28,2.375,29,1.821,30,0.644,31,2.247,37,2.933,45,1.197,48,0.875,54,2.553,55,1.018,80,3.662,83,0.677,85,0.718,88,1.027,90,2.094,91,1.729,97,3.656,98,1.52,101,2.921,102,1.32,103,4.284,127,1.476,128,1.731,130,1.729,131,2.932,132,1.027,138,0.875,139,1.027,142,1.027,143,0.543,147,1.027,148,3.893,149,1.027,154,3.177,205,3.495,219,1.904,226,1.837,236,2.819,260,1.589,296,1.589,297,2.879,312,3.146,318,0.764,388,3.508,391,1.374,393,1.473,394,1.286,397,1.589,403,1.32,417,3.508,540,1.904,541,2.627,543,2.415,555,1.27,556,1.27,559,3.555,567,3.424,572,2.138,583,2.138,585,1.904,587,1.908,592,1.729,593,1.131,594,1.131,599,0.944,601,0.944,719,2.415,721,3.228,737,1.729,738,1.27,739,4.179,740,2.769,741,2.493,742,2.493,743,3.248,744,3.248,745,2.138,746,3.229,747,2.769,748,2.493,749,2.769,750,2.769,751,1.481,752,5.763,753,3.508,754,1.481,755,1.481,756,2.493,757,2.493,758,1.481,759,2.893,760,2.493,761,1.481,762,2.493,763,1.27,764,2.493,765,1.481,766,1.481,767,2.493,768,1.481,769,2.493,770,1.481,771,2.493,772,1.481,773,2.493,774,1.27,775,2.493,776,1.481,777,3.789,778,2.493,779,2.493,780,1.481,781,1.481,782,1.481,783,2.138,784,1.481,785,1.481,786,1.481,787,2.493,788,1.481,789,1.481,790,1.481,791,1.481,792,1.481,793,2.493,794,2.493,795,1.481,796,1.481,797,1.481,798,2.493,799,2.493,800,2.493,801,2.498,802,1.27,803,2.466,804,1.27,805,1.27,806,1.27,807,1.481,808,1.481,809,1.481,810,1.481,811,1.481,812,4.228,813,1.481,814,1.481,815,1.481,816,1.481,817,1.481,818,1.481,819,1.481,820,1.481,821,2.493,822,1.481,823,1.481,824,1.481,825,1.481,826,1.481,827,1.481,828,1.481,829,1.481,830,1.481,831,1.481,832,1.481,833,1.481,834,1.481,835,1.481]],["title/modules/TournamentsModule.html",[55,1.501,63,2.344]],["body/modules/TournamentsModule.html",[3,0.248,4,0.248,5,0.196,7,0.526,8,0.02,9,1.11,12,0.248,13,0.132,16,0.014,17,0.014,29,1.359,55,2.206,57,2.12,58,2.331,62,3.766,63,4.638,64,3.527,65,3.191,66,2.427,67,2.263,69,3.443,70,2.849,71,1.431,72,2.849,74,3.137,83,2.468,84,3.443,391,2.263,407,1.877,411,2.619,456,2.427,468,2.619,559,2.12,641,4.124,645,3.137,735,3.746,737,4.185,801,4.326,802,3.523,836,3.523,837,3.523,838,3.523,839,4.108,840,4.108,841,4.108,842,3.523,843,4.108,844,4.108,845,4.108]],["title/injectables/TournamentsService.html",[0,0.994,801,2.172]],["body/injectables/TournamentsService.html",[0,0.632,2,0.628,3,0.083,4,0.083,5,0.066,7,0.425,8,0.02,9,0.371,12,0.083,13,0.044,16,0.006,17,0.006,20,0.289,21,1.01,23,1.135,26,0.994,28,2.378,29,1.823,30,0.676,31,2.25,37,2.494,45,1.143,54,1.901,67,0.757,71,0.479,80,3.557,90,1.069,102,1.065,126,0.876,127,1.069,128,2.913,161,2.128,193,1.649,198,2.119,200,0.876,205,3.414,210,1.684,219,1.049,227,1.492,228,0.953,230,0.812,231,1.049,232,1.948,234,2.3,236,3.476,239,3.54,240,2.119,241,0.953,260,2.58,268,0.876,297,1.806,312,2.925,315,1.787,316,1.787,363,0.859,388,2.58,391,0.757,393,1.383,394,1.577,395,2.334,396,2.334,397,2.997,403,1.863,409,0.593,417,2.58,420,2.58,421,2.503,456,1.806,467,1.492,474,0.628,475,1.178,498,0.812,515,2.728,516,1.289,519,0.757,530,1.623,539,1.787,543,2.3,559,3.091,567,1.383,587,0.812,596,1.049,597,2.426,599,0.876,601,0.876,617,1.178,652,2.756,672,2.334,673,1.049,683,1.787,685,2.334,693,2.119,696,1.178,705,1.787,706,3.091,719,3.156,720,1.178,721,2.756,722,1.178,723,1.049,734,1.049,740,2.006,743,2.621,744,2.621,745,2.006,747,2.006,749,2.006,750,2.006,752,4.725,753,2.58,774,2.006,783,1.178,801,1.383,803,2.334,804,1.178,805,1.178,806,1.178,842,1.178,846,1.178,847,2.34,848,2.34,849,2.34,850,2.34,851,1.374,852,1.374,853,2.34,854,1.374,855,4.954,856,1.374,857,2.34,858,1.374,859,1.374,860,2.34,861,1.374,862,2.34,863,1.374,864,1.374,865,1.374,866,1.374,867,2.34,868,1.374,869,1.374,870,1.374,871,1.374,872,1.374,873,1.374,874,1.374,875,2.34,876,1.374,877,1.374,878,1.374,879,1.178,880,2.006,881,1.178,882,1.374,883,2.34,884,1.374,885,1.374,886,1.374,887,1.374,888,1.374,889,1.374,890,1.374,891,1.374,892,1.374,893,1.374,894,1.374,895,1.374,896,1.374,897,1.374,898,1.374,899,1.374,900,1.374,901,1.374,902,2.006,903,1.178,904,2.34,905,1.374,906,1.374,907,3.609,908,2.34,909,1.374,910,1.374,911,1.374,912,1.374,913,1.374,914,2.34,915,1.374,916,1.374,917,1.374,918,1.374,919,1.374,920,1.374,921,1.374,922,1.374,923,1.374,924,1.374,925,1.374,926,2.34,927,2.34,928,3.364,929,1.374,930,1.374,931,1.374,932,1.374,933,1.374,934,1.374,935,1.374,936,2.34,937,2.34,938,1.374,939,2.34,940,2.34,941,1.374,942,1.374,943,4.048,944,3.609,945,1.374,946,1.374,947,1.374,948,3.056,949,1.374,950,1.374,951,2.34,952,2.34,953,1.374,954,1.374,955,1.374,956,2.34,957,1.374,958,1.374,959,1.374,960,1.374,961,1.374,962,1.374,963,2.34,964,1.374,965,1.374,966,1.374,967,1.374,968,1.374,969,1.374,970,1.374,971,1.374,972,1.374,973,1.374,974,1.374,975,1.374,976,1.374,977,1.374,978,1.178,979,1.374,980,1.178,981,1.374,982,1.374,983,1.374,984,1.374,985,1.374]],["title/classes/UpdateTeamDto.html",[13,0.118,589,2.344]],["body/classes/UpdateTeamDto.html",[3,0.329,4,0.329,5,0.26,7,0.473,8,0.019,12,0.329,13,0.175,14,2.641,16,0.017,17,0.017,127,2.489,166,1.4,291,3.218,293,4.158,520,3.776,589,4.106,600,4.158,986,4.67,987,4.158,988,4.158,989,5.446]],["title/classes/UpdateTournamentDto.html",[13,0.118,753,2.344]],["body/classes/UpdateTournamentDto.html",[3,0.33,4,0.33,5,0.261,7,0.474,8,0.019,12,0.33,13,0.175,14,2.65,16,0.017,17,0.017,127,2.497,143,2.005,166,1.404,312,3.228,314,3.789,753,4.114,803,4.172,987,4.172,990,4.685,991,5.464]],["title/classes/UpdateUserDto.html",[13,0.118,992,2.55]],["body/classes/UpdateUserDto.html",[3,0.329,4,0.329,5,0.26,7,0.473,8,0.019,12,0.329,13,0.175,14,2.641,16,0.017,17,0.017,122,2.81,127,2.489,136,3,166,1.4,331,3.471,520,3.776,987,4.158,988,4.158,992,4.467,993,4.67,994,5.446]],["title/classes/User.html",[13,0.118,102,1.281]],["body/classes/User.html",[3,0.184,4,0.184,5,0.146,7,0.415,8,0.02,12,0.341,13,0.141,16,0.011,17,0.011,20,0.288,26,1.148,30,0.835,45,1.195,46,3.576,71,1.062,98,1.749,102,2.085,114,2.841,128,1.393,161,1.009,162,2.106,166,0.784,168,0.97,169,2.841,196,2.913,200,3.288,210,2.422,226,2.132,230,3.047,249,3.047,332,3.576,333,3.599,363,2.578,398,3.871,401,3.288,402,3.576,403,2.172,407,2.009,408,1.68,409,1.898,458,3.336,460,4.15,478,2.614,492,4.311,501,2.328,505,3.576,506,3.77,522,2.328,699,3.938,715,3.938,719,2.803,995,1.943,996,3.049,997,4.397,998,3.049,999,4.324,1000,3.049,1001,3.049,1002,3.049,1003,3.049,1004,3.049,1005,3.049,1006,3.049,1007,3.049,1008,3.049,1009,2.328,1010,3.77,1011,3.77,1012,3.049,1013,2.614]],["title/classes/UserDetails.html",[13,0.118,999,2.55]],["body/classes/UserDetails.html",[3,0.259,4,0.259,5,0.205,8,0.02,12,0.335,13,0.138,16,0.014,17,0.014,20,0.405,23,2.988,26,1.167,30,0.79,45,1.167,166,1.102,168,1.225,357,4.273,359,4.705,360,4.705,363,1.574,364,4.705,365,4.705,366,2.269,522,3.275,999,3.852,1014,5.376,1015,3.275,1016,5.556,1017,5.556,1018,4.289,1019,4.289,1020,4.289,1021,4.289,1022,4.764,1023,4.764,1024,4.764,1025,4.764,1026,4.242,1027,4.289,1028,4.289,1029,4.289,1030,4.289,1031,4.289]],["title/injectables/UserUpdateSelfDto.html",[0,0.994,1032,2.344]],["body/injectables/UserUpdateSelfDto.html",[0,1.576,2,2.113,3,0.279,4,0.279,5,0.221,7,0.492,8,0.02,9,1.25,12,0.279,13,0.205,16,0.015,17,0.015,20,0.437,26,0.984,30,0.785,45,0.984,98,1.498,127,2.113,136,2.548,168,1.286,169,3.517,174,2.664,175,1.996,225,3.517,309,4.427,333,4.069,337,4.273,349,4.451,352,4.451,354,3.207,367,3.965,1032,3.716,1033,5.474,1034,3.965,1035,4.625,1036,4.625,1037,4.625]],["title/controllers/UsersController.html",[85,1.783,1038,2.55]],["body/controllers/UsersController.html",[1,2.718,3,0.119,4,0.119,5,0.094,7,0.435,8,0.02,9,0.534,12,0.119,13,0.063,16,0.008,17,0.008,20,0.466,21,1.364,26,0.968,28,2.477,29,1.899,30,0.672,31,2.343,37,2.804,45,1.081,48,1.167,54,2.619,55,1.29,80,2.715,83,0.903,85,1.915,88,1.37,90,2.404,91,2.191,97,3.724,98,1.475,101,3.354,102,2.355,103,4.234,111,4.819,126,2.014,128,0.903,130,1.37,131,2.738,132,1.37,138,1.167,139,1.37,142,1.37,143,0.725,146,1.259,147,1.37,148,3.838,149,1.37,154,3.421,161,1.045,162,2.343,163,2.709,193,2.254,205,1.867,215,2.709,225,2.175,236,1.741,239,1.167,296,2.014,318,2.328,366,1.612,376,3.868,403,1.924,437,1.37,450,1.37,516,1.741,539,2.412,541,2.191,545,2.191,564,1.37,565,2.709,567,2.915,578,2.412,587,1.167,592,3.128,593,1.509,594,3.015,611,2.412,620,1.694,672,2.412,699,2.412,759,2.412,1032,2.876,1038,2.191,1039,1.694,1040,4.23,1041,3.16,1042,2.709,1043,3.16,1044,3.16,1045,2.709,1046,2.709,1047,3.948,1048,1.976,1049,1.976,1050,1.976,1051,3.16,1052,1.976,1053,1.976,1054,1.976,1055,6.311,1056,1.976,1057,1.976,1058,3.16,1059,1.976,1060,1.976,1061,1.976,1062,1.976,1063,3.16,1064,1.976,1065,1.976,1066,1.976,1067,1.976,1068,3.16,1069,1.976,1070,3.16,1071,3.16,1072,3.16,1073,1.976,1074,4.933,1075,1.976,1076,1.976,1077,3.16,1078,3.16,1079,1.694,1080,1.694,1081,1.694,1082,1.976,1083,1.976,1084,1.694,1085,1.694,1086,1.976,1087,1.976,1088,1.976,1089,1.976,1090,1.976,1091,1.976,1092,1.976,1093,1.976,1094,3.16,1095,1.976,1096,1.976,1097,1.976,1098,1.976,1099,1.976,1100,1.976,1101,1.976,1102,1.976,1103,1.976,1104,1.976,1105,1.976,1106,1.976,1107,1.976,1108,1.976,1109,1.976,1110,1.976,1111,1.976,1112,1.976,1113,1.976]],["title/modules/UsersModule.html",[55,1.501,64,1.897]],["body/modules/UsersModule.html",[3,0.27,4,0.27,5,0.214,7,0.514,8,0.02,9,1.209,12,0.27,13,0.144,16,0.015,17,0.015,29,1.48,55,2.331,57,2.309,58,2.464,62,3.145,64,3.668,65,3.373,66,2.644,67,2.465,69,2.852,70,3.103,71,1.558,74,3.417,83,2.609,84,3.639,102,1.558,193,3.388,353,3.103,407,2.045,641,4.359,642,3.959,645,3.417,1012,3.959,1038,4.36,1079,3.837,1114,3.837,1115,3.837,1116,3.837,1117,4.475,1118,4.475,1119,4.475]],["title/injectables/UsersService.html",[0,0.994,193,1.68]],["body/injectables/UsersService.html",[0,0.638,2,0.634,3,0.084,4,0.084,5,0.066,7,0.395,8,0.02,9,0.375,12,0.084,13,0.045,16,0.006,17,0.006,20,0.418,21,1.019,23,1.144,26,0.957,28,2.387,29,1.83,30,0.678,31,2.258,37,2.668,45,1.12,54,2.387,58,1.019,71,0.483,78,1.06,80,3.549,90,0.634,101,2.595,102,2.386,114,2.243,122,2.438,127,1.079,128,2.787,129,1.802,136,1.3,146,1.504,148,3.604,161,1.646,162,2.632,169,2.243,193,1.079,210,2.44,222,1.802,225,2.74,227,1.504,232,1.504,234,1.504,236,3.255,239,2.938,240,2.135,241,0.962,249,1.394,268,3.012,318,1.589,332,0.962,333,1.504,353,0.962,363,0.866,366,1.808,376,2.595,403,2.179,409,1.329,474,1.079,476,1.802,477,1.06,498,0.82,515,1.696,516,1.696,519,0.764,524,1.06,527,1.637,540,1.802,541,2.519,543,2.316,545,2.519,558,3.115,559,0.716,564,1.637,567,2.406,578,1.06,585,2.774,586,1.06,587,2.146,588,1.06,592,1.637,597,2.285,599,0.885,601,0.885,610,2.351,611,2.351,642,0.962,652,3.607,673,1.06,676,1.19,679,2.024,680,1.19,682,1.19,683,3.96,684,1.19,685,2.351,690,2.024,691,2.024,692,3.797,693,2.519,694,1.19,695,1.19,697,3.115,698,1.19,703,1.19,704,1.19,705,1.802,706,1.06,715,1.802,759,1.802,763,1.19,855,2.64,879,1.19,881,1.19,902,1.19,903,1.19,928,4.588,992,3.596,1009,1.06,1032,3.423,1040,3.115,1042,2.64,1045,2.024,1046,2.024,1080,1.19,1081,1.19,1084,1.19,1085,1.19,1120,1.19,1121,2.36,1122,3.079,1123,3.079,1124,2.36,1125,3.079,1126,1.388,1127,3.633,1128,1.388,1129,3.079,1130,2.36,1131,1.388,1132,6.447,1133,1.388,1134,1.388,1135,2.36,1136,2.36,1137,1.388,1138,1.388,1139,4.072,1140,1.388,1141,2.36,1142,1.388,1143,1.388,1144,2.36,1145,1.388,1146,1.388,1147,1.388,1148,1.388,1149,1.388,1150,2.36,1151,1.388,1152,2.36,1153,1.388,1154,1.388,1155,1.388,1156,2.36,1157,2.36,1158,1.388,1159,1.388,1160,1.388,1161,1.388,1162,4.724,1163,4.072,1164,3.079,1165,1.388,1166,1.388,1167,1.388,1168,1.388,1169,2.36,1170,1.388,1171,1.388,1172,1.388,1173,1.388,1174,1.388,1175,1.388,1176,1.388,1177,1.388,1178,1.388,1179,1.388,1180,1.388,1181,1.388,1182,1.388,1183,1.388,1184,1.388,1185,1.388,1186,1.388,1187,1.388]],["title/coverage.html",[1188,4.3]],["body/coverage.html",[0,1.774,1,1.546,5,0.134,6,2.406,8,0.02,13,0.232,16,0.011,17,0.011,18,1.789,19,2.143,30,0.328,85,2.632,86,1.946,87,2.406,102,0.977,116,1.789,122,1.448,128,1.282,133,1.658,140,1.946,167,2.406,180,1.789,189,2.406,193,1.282,222,2.143,225,1.546,291,1.658,292,2.406,293,3.16,312,1.658,313,2.406,314,3.41,330,3.16,331,3.46,337,1.789,376,1.789,377,2.406,378,2.406,384,1.789,385,2.406,388,1.789,389,2.406,391,1.546,392,2.87,403,0.977,411,1.789,413,2.632,414,1.789,416,2.406,417,1.789,418,2.406,419,2.406,427,2.406,428,2.406,436,2.143,437,1.946,439,2.406,450,1.946,456,1.658,457,2.87,468,1.789,470,2.143,471,2.406,472,2.87,474,1.891,481,1.789,483,1.789,497,1.946,499,1.946,507,1.946,512,2.143,513,3.46,514,3.46,529,3.16,531,2.143,537,1.946,538,2.406,559,1.448,589,1.789,597,1.448,647,2.406,718,2.87,735,1.946,737,1.946,738,2.406,753,1.789,801,1.658,846,2.406,928,5.765,986,2.406,990,2.406,992,1.946,993,2.406,995,2.638,999,1.946,1012,1.946,1014,2.143,1015,2.143,1032,1.789,1033,2.406,1034,2.406,1038,1.946,1039,2.406,1120,2.406,1188,2.406,1189,2.806,1190,2.806,1191,2.806,1192,6.057,1193,2.806,1194,2.806,1195,6.264,1196,2.406,1197,6.429,1198,6.981,1199,2.406,1200,2.406,1201,4.139,1202,5.789,1203,5.428,1204,4.139,1205,2.806,1206,2.806,1207,2.806,1208,2.806,1209,2.806,1210,2.806,1211,2.806,1212,4.139,1213,2.806,1214,2.806,1215,2.806,1216,2.806]],["title/dependencies.html",[58,1.908,1217,2.634]],["body/dependencies.html",[8,0.02,9,1.278,11,3.015,13,0.19,16,0.015,17,0.015,41,4.515,42,3.28,43,2.795,58,2.042,71,1.648,138,2.795,143,1.736,175,2.042,184,3.612,229,4.056,354,3.28,409,2.042,448,4.056,520,3.28,880,4.056,988,3.612,1218,6.956,1219,4.73,1220,4.73,1221,4.73,1222,4.73,1223,4.73,1224,4.73,1225,4.73,1226,4.73,1227,4.73,1228,4.73,1229,4.73,1230,4.73,1231,4.73,1232,4.73,1233,4.73,1234,4.73,1235,4.73,1236,4.73,1237,4.73,1238,4.73,1239,4.73,1240,4.73,1241,4.73]],["title/miscellaneous/enumerations.html",[1242,1.585,1243,3.791]],["body/miscellaneous/enumerations.html",[8,0.02,16,0.015,17,0.015,20,0.444,230,3.481,357,4.086,474,2.692,513,2.998,514,3.756,519,3.246,523,5.052,524,4.499,525,5.052,526,5.052,527,4.086,719,3.756,995,2.998,1010,5.052,1011,5.052,1014,3.591,1015,4.499,1022,5.052,1023,5.052,1024,5.052,1025,5.052,1026,4.499,1242,2.427,1243,4.033,1244,4.033,1245,4.703,1246,3.591,1247,6.426]],["title/miscellaneous/functions.html",[1242,1.585,1248,3.791]],["body/miscellaneous/functions.html",[8,0.017,16,0.017,17,0.017,20,0.545,1199,4.946,1200,6.024,1242,2.976,1248,4.946,1249,5.769]],["title/index.html",[20,0.29,723,2.346,1250,3.072]],["body/index.html",[5,0.231,8,0.019,16,0.016,17,0.016,58,2.083,101,3.077,739,5.134,978,4.139,980,4.139,1251,4.827,1252,5.988,1253,4.827,1254,4.827,1255,4.827,1256,4.827,1257,4.827,1258,4.827,1259,4.827,1260,4.827,1261,5.988,1262,4.572,1263,6.997,1264,6.51,1265,4.827,1266,4.827,1267,4.827,1268,4.827,1269,4.827,1270,4.827,1271,4.827,1272,4.827,1273,5.988,1274,4.827,1275,4.827,1276,4.827,1277,4.827,1278,4.827,1279,6.806,1280,4.827,1281,4.827,1282,4.827,1283,4.827,1284,5.988,1285,4.827,1286,4.827,1287,4.827]],["title/modules.html",[57,2.587]],["body/modules.html",[8,0.017,16,0.017,17,0.017,56,3.764,57,2.801,61,2.99,62,2.99,63,3.46,64,2.801,1026,5.52,1288,7.23,1289,7.23,1290,7.23]],["title/overview.html",[1291,4.3]],["body/overview.html",[2,1.877,8,0.019,16,0.014,17,0.014,18,3.847,56,5.007,57,2.12,58,2.331,59,3.523,60,3.523,61,4.008,62,3.839,63,4.602,64,3.648,65,3.191,66,2.427,67,2.263,83,1.877,133,3.566,166,1.056,177,3.523,179,3.523,180,3.847,193,3.185,306,3.746,415,2.619,436,3.137,597,3.596,637,3.523,638,3.523,639,3.523,693,2.849,801,4.117,836,3.523,837,3.523,838,3.523,1114,3.523,1115,3.523,1116,3.523,1291,3.523,1292,4.108,1293,4.108,1294,4.108]],["title/properties.html",[168,0.975,1217,2.634]],["body/properties.html",[8,0.019,16,0.017,17,0.017,90,2.609,168,1.259,1295,5.709,1296,5.709,1297,5.709,1298,5.709,1299,5.709]],["title/miscellaneous/typealiases.html",[1242,1.585,1300,4.421]],["body/miscellaneous/typealiases.html",[8,0.017,16,0.017,17,0.017,19,4.091,20,0.506,30,0.747,34,5.47,392,3.715,410,5.47,457,3.715,465,5.47,472,3.715,500,4.871,718,3.715,734,4.871,995,3.415,1009,4.871,1242,2.764,1246,4.091,1301,5.358,1302,5.358,1303,4.594,1304,4.594,1305,4.594,1306,4.594,1307,5.358]],["title/miscellaneous/variables.html",[1242,1.585,1262,3.376]],["body/miscellaneous/variables.html",[8,0.019,16,0.015,17,0.015,20,0.439,45,0.785,392,3.225,411,3.729,412,3.988,450,4.657,457,3.225,468,3.729,469,3.988,472,3.225,474,2.673,497,4.057,499,4.057,505,5.03,507,4.057,508,3.988,513,3.729,514,4.281,528,3.988,536,3.988,718,3.225,735,4.057,736,3.988,995,2.964,1012,4.057,1013,3.988,1196,3.988,1242,2.399,1244,5.016,1246,3.551,1247,6.219,1262,3.551,1303,3.988,1304,3.988,1305,3.988,1306,3.988,1308,4.651,1309,4.651]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":928,"title":{},"body":{"injectables/TournamentsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1296,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1236,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1228,"title":{},"body":{"dependencies.html":{}}}],["0.30.1",{"_index":1226,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":919,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["0.5.1",{"_index":1227,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1232,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1198,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1208,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1204,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1206,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1210,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1207,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1195,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1202,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1203,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1201,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1212,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1211,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":693,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1.6.5",{"_index":1241,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":888,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["100",{"_index":1192,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":1205,"title":{},"body":{"coverage.html":{}}}],["13/13",{"_index":1214,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":1209,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":320,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["1].finished",{"_index":934,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["2",{"_index":931,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["2.2.0",{"_index":1219,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1294,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":1224,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1238,"title":{},"body":{"dependencies.html":{}}}],["30d",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["30min",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["32",{"_index":321,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["4",{"_index":306,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/Team.html":{},"overview.html":{}}}],["4.0.0",{"_index":1233,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1292,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":1193,"title":{},"body":{"coverage.html":{}}}],["6.0.1",{"_index":1230,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":1225,"title":{},"body":{"dependencies.html":{}}}],["6.6.5",{"_index":1231,"title":{},"body":{"dependencies.html":{}}}],["64",{"_index":329,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["64'])@isnotempty",{"_index":322,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["7.2.0",{"_index":1240,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1194,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1293,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":1218,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":1220,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":1213,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":887,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["_id",{"_index":466,"title":{},"body":{"classes/Stage.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{}}}],["_v",{"_index":1163,"title":{},"body":{"injectables/UsersService.html":{}}}],["accept/decline",{"_index":1063,"title":{},"body":{"controllers/UsersController.html":{}}}],["access",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstoken",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":18,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["account",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"classes/Team.html":{},"injectables/UsersService.html":{}}}],["action",{"_index":1121,"title":{},"body":{"injectables/UsersService.html":{}}}],["actions",{"_index":1041,"title":{},"body":{"controllers/UsersController.html":{}}}],["activetournament",{"_index":473,"title":{},"body":{"classes/Team.html":{}}}],["add",{"_index":1266,"title":{},"body":{"index.html":{}}}],["adding",{"_index":964,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["admin",{"_index":1011,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["agrees",{"_index":1168,"title":{},"body":{"injectables/UsersService.html":{}}}],["aliases",{"_index":1301,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allfinishedflag",{"_index":951,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["allows",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["already",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["apihideproperty",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["apihideproperty()@isempty",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproduces",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["apiproperty",{"_index":176,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/MatchResultDto.html":{}}}],["apiproperty()@isboolean()@isnotempty",{"_index":381,"title":{},"body":{"classes/HandleInviteDto.html":{}}}],["apiproperty()@isemail()@isnotempty",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isempty",{"_index":335,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty()@isstring",{"_index":301,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty()@isstring()@length(4",{"_index":305,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["apiproperty()@isnumber()@isin(['8",{"_index":319,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["apiproperty()@isnumber()@isnotempty",{"_index":424,"title":{},"body":{"classes/MatchResultDto.html":{}}}],["apiproperty()@isstring",{"_index":299,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/CreateUserDto.html":{}}}],["apiproperty()@isstring()@isnotempty",{"_index":170,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/MatchResultDto.html":{}}}],["apiproperty({type",{"_index":338,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apitags",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('teams",{"_index":603,"title":{},"body":{"controllers/TeamsController.html":{}}}],["apitags('tournaments",{"_index":807,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["apitags('users",{"_index":1086,"title":{},"body":{"controllers/UsersController.html":{}}}],["appmodule",{"_index":56,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argon",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["argon2.hash(createuserdto.password",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.hash(refreshtoken",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["async",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":86,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":116,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authdto.password",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authguard('jwt",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authmodule",{"_index":61,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1299,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":133,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["avatar",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["await",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":1253,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(\"team",{"_index":1178,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception('access",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('already",{"_index":713,"title":{},"body":{"injectables/TeamsService.html":{}}}],["badrequestexception('invalid",{"_index":945,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["badrequestexception('not",{"_index":696,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{}}}],["badrequestexception('previous",{"_index":935,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["badrequestexception('team",{"_index":705,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('tournament",{"_index":907,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["badrequestexception('user",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('username",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('usernames",{"_index":608,"title":{},"body":{"controllers/TeamsController.html":{}}}],["badrequestexception('you",{"_index":704,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["basic",{"_index":760,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["body",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":366,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/Match.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"controllers/TeamsController.html":{},"classes/Tournament.html":{},"classes/UserDetails.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["bootstrap",{"_index":1200,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["bot",{"_index":1025,"title":{},"body":{"classes/UserDetails.html":{},"miscellaneous/enumerations.html":{}}}],["both",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["bracket",{"_index":921,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["brackets",{"_index":800,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["browse",{"_index":1290,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1288,"title":{},"body":{"modules.html":{}}}],["canactivate",{"_index":440,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":444,"title":{},"body":{"guards/RolesGuard.html":{}}}],["cant",{"_index":1181,"title":{},"body":{"injectables/UsersService.html":{}}}],["cd",{"_index":1277,"title":{},"body":{"index.html":{}}}],["change",{"_index":757,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["changedescription",{"_index":740,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["changedescription(organizer",{"_index":854,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["changedescription(req",{"_index":751,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["changes",{"_index":1156,"title":{},"body":{"injectables/UsersService.html":{}}}],["checkifteamexists",{"_index":542,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["checkifteamexists(@param('tag",{"_index":618,"title":{},"body":{"controllers/TeamsController.html":{}}}],["checkifteamexists(tag",{"_index":550,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["checking",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["checks",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{}}}],["class",{"_index":13,"title":{"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"classes/MatchResultDto.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/Tournament.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":166,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"classes/MatchResultDto.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/Tournament.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"overview.html":{}}}],["cleared",{"_index":1094,"title":{},"body":{"controllers/UsersController.html":{}}}],["cleared.password",{"_index":1097,"title":{},"body":{"controllers/UsersController.html":{}}}],["cleared.refreshtoken",{"_index":1096,"title":{},"body":{"controllers/UsersController.html":{}}}],["client",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["clone",{"_index":1273,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_teamsmodule",{"_index":637,"title":{},"body":{"modules/TeamsModule.html":{},"overview.html":{}}}],["cluster_teamsmodule_exports",{"_index":638,"title":{},"body":{"modules/TeamsModule.html":{},"overview.html":{}}}],["cluster_teamsmodule_providers",{"_index":639,"title":{},"body":{"modules/TeamsModule.html":{},"overview.html":{}}}],["cluster_tournamentsmodule",{"_index":836,"title":{},"body":{"modules/TournamentsModule.html":{},"overview.html":{}}}],["cluster_tournamentsmodule_exports",{"_index":838,"title":{},"body":{"modules/TournamentsModule.html":{},"overview.html":{}}}],["cluster_tournamentsmodule_imports",{"_index":839,"title":{},"body":{"modules/TournamentsModule.html":{}}}],["cluster_tournamentsmodule_providers",{"_index":837,"title":{},"body":{"modules/TournamentsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1114,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1115,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1116,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["collection",{"_index":540,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"injectables/UsersService.html":{}}}],["color",{"_index":294,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/Team.html":{},"injectables/TeamsService.html":{}}}],["common/decorators/roles.decorator",{"_index":1083,"title":{},"body":{"controllers/UsersController.html":{}}}],["common/guards/accesstoken.guard",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["common/guards/refreshtoken.guard",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["common/guards/roles.guard",{"_index":1082,"title":{},"body":{"controllers/UsersController.html":{}}}],["community",{"_index":1257,"title":{},"body":{"index.html":{}}}],["config",{"_index":32,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["config.get('jwt_access_secret",{"_index":53,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["config.get('jwt_refresh_secret",{"_index":433,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["config.get('mongodb_uri",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice",{"_index":25,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["console.log(createuserdto",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Match.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":23,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"classes/UserDetails.html":{},"injectables/UsersService.html":{}}}],["constructor(config",{"_index":24,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["constructor(private",{"_index":48,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":441,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(teammodel",{"_index":651,"title":{},"body":{"injectables/TeamsService.html":{}}}],["constructor(tournamentmodel",{"_index":851,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["constructor(usermodel",{"_index":1126,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":447,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":452,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":453,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":85,"title":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('teams",{"_index":604,"title":{},"body":{"controllers/TeamsController.html":{}}}],["controller('tournaments",{"_index":808,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["controller('users",{"_index":1087,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["country",{"_index":360,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/UserDetails.html":{}}}],["coverage",{"_index":1188,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserUpdateSelfDto.html":{},"injectables/UsersService.html":{}}}],["create(@req",{"_index":605,"title":{},"body":{"controllers/TeamsController.html":{}}}],["create(createteamdto",{"_index":656,"title":{},"body":{"injectables/TeamsService.html":{}}}],["create(createuserdto",{"_index":1130,"title":{},"body":{"injectables/UsersService.html":{}}}],["create(req",{"_index":555,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{}}}],["create(user",{"_index":857,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["created",{"_index":523,"title":{},"body":{"classes/TeamEventsHistory.html":{},"miscellaneous/enumerations.html":{}}}],["createduser",{"_index":1159,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser.save",{"_index":1161,"title":{},"body":{"injectables/UsersService.html":{}}}],["creates",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["createteamdto",{"_index":291,"title":{"classes/CreateTeamDto.html":{}},"body":{"classes/CreateTeamDto.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/UpdateTeamDto.html":{},"coverage.html":{}}}],["createteamdto.owner",{"_index":607,"title":{},"body":{"controllers/TeamsController.html":{}}}],["createtournamentdto",{"_index":312,"title":{"classes/CreateTournamentDto.html":{}},"body":{"classes/CreateTournamentDto.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTournamentDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":122,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.username",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":558,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/UsersService.html":{}}}],["current",{"_index":612,"title":{},"body":{"controllers/TeamsController.html":{}}}],["currentteam",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/TeamsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["data",{"_index":1055,"title":{},"body":{"controllers/UsersController.html":{}}}],["date",{"_index":515,"title":{},"body":{"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["date.now",{"_index":682,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["decision",{"_index":379,"title":{},"body":{"classes/HandleInviteDto.html":{}}}],["declines",{"_index":1171,"title":{},"body":{"injectables/UsersService.html":{}}}],["decorators",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"classes/MatchResultDto.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"controllers/TeamsController.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"classes/User.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":505,"title":{},"body":{"classes/Team.html":{},"classes/Tournament.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":26,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["defualt",{"_index":997,"title":{},"body":{"classes/User.html":{}}}],["delete",{"_index":594,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["delete('kick/:tournamentid",{"_index":814,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["delete('msg/:index",{"_index":1110,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletemsgatindex",{"_index":1042,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletemsgatindex(@req",{"_index":1111,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletemsgatindex(index",{"_index":1133,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletemsgatindex(req",{"_index":1048,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletes",{"_index":1051,"title":{},"body":{"controllers/UsersController.html":{}}}],["denied",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":58,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTournamentDto.html":{},"controllers/TeamsController.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["details",{"_index":333,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/User.html":{},"injectables/UserUpdateSelfDto.html":{},"injectables/UsersService.html":{}}}],["details.preferredroles",{"_index":1174,"title":{},"body":{"injectables/UsersService.html":{}}}],["details.ts",{"_index":1015,"title":{},"body":{"classes/UserDetails.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["details.ts:10",{"_index":1020,"title":{},"body":{"classes/UserDetails.html":{}}}],["details.ts:11",{"_index":1019,"title":{},"body":{"classes/UserDetails.html":{}}}],["details.ts:12",{"_index":1018,"title":{},"body":{"classes/UserDetails.html":{}}}],["details.ts:13",{"_index":1021,"title":{},"body":{"classes/UserDetails.html":{}}}],["details.ts:14",{"_index":1017,"title":{},"body":{"classes/UserDetails.html":{}}}],["detailsdto",{"_index":337,"title":{"classes/DetailsDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/UserUpdateSelfDto.html":{},"coverage.html":{}}}],["detailsdto})@isoptional()@isdefined()@type(undefined)@validatenested",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["development",{"_index":1282,"title":{},"body":{"index.html":{}}}],["didnt",{"_index":977,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["directory",{"_index":1276,"title":{},"body":{"index.html":{}}}],["document",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"classes/Match.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"classes/User.html":{}}}],["documentation",{"_index":1189,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":1179,"title":{},"body":{"injectables/UsersService.html":{}}}],["doesnt",{"_index":706,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["dropped",{"_index":973,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["dto/auth.dto",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":599,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["dto/handle",{"_index":1084,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/invite",{"_index":602,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["dto/kick",{"_index":806,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["dto/match",{"_index":804,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["dto/update",{"_index":601,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["dto/user",{"_index":1080,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["each",{"_index":362,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["email",{"_index":46,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/User.html":{}}}],["empty",{"_index":922,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["endpoint",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["endpoints",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["enough",{"_index":913,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["enum",{"_index":522,"title":{},"body":{"classes/TeamEventsHistory.html":{},"classes/User.html":{},"classes/UserDetails.html":{}}}],["enumerations",{"_index":1243,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":1268,"title":{},"body":{"index.html":{}}}],["environment",{"_index":1261,"title":{},"body":{"index.html":{}}}],["esport",{"_index":1251,"title":{},"body":{"index.html":{}}}],["eventenum",{"_index":519,"title":{},"body":{"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["eventenum.created",{"_index":681,"title":{},"body":{"injectables/TeamsService.html":{}}}],["eventenum.joined",{"_index":1170,"title":{},"body":{"injectables/UsersService.html":{}}}],["eventenum.left",{"_index":698,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["eventenum.tournament_dropped",{"_index":972,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["eventenum.tournament_win",{"_index":961,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["events",{"_index":474,"title":{},"body":{"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["exec",{"_index":683,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["executioncontext",{"_index":445,"title":{},"body":{"guards/RolesGuard.html":{}}}],["existing",{"_index":762,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["exists",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["expiresin",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":641,"title":{},"body":{"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["express.user",{"_index":855,"title":{},"body":{"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["extends",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{}}}],["extracting",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["extractjwt",{"_index":39,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":51,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["extractjwt.frombodyfield('refreshtoken",{"_index":432,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["false",{"_index":467,"title":{},"body":{"classes/Stage.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/Tournament.html":{},"injectables/TournamentsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["find",{"_index":690,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":543,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["findbyid",{"_index":741,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["findbyid(@param('id",{"_index":827,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["findbyid(id",{"_index":763,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/UsersService.html":{}}}],["findbyidandupdate(id",{"_index":695,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["findbyslug",{"_index":742,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["findbyslug(@param('slug",{"_index":825,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["findbyslug(slug",{"_index":766,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["findbytag",{"_index":544,"title":{},"body":{"controllers/TeamsController.html":{}}}],["findbytag(@param('tag",{"_index":616,"title":{},"body":{"controllers/TeamsController.html":{}}}],["findbytag(tag",{"_index":561,"title":{},"body":{"controllers/TeamsController.html":{}}}],["findbyusername",{"_index":1122,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername(username",{"_index":1138,"title":{},"body":{"injectables/UsersService.html":{}}}],["findlikeusername",{"_index":1123,"title":{},"body":{"injectables/UsersService.html":{}}}],["findlikeusername(query",{"_index":1142,"title":{},"body":{"injectables/UsersService.html":{}}}],["findlogged",{"_index":1043,"title":{},"body":{"controllers/UsersController.html":{}}}],["findlogged(@req",{"_index":1089,"title":{},"body":{"controllers/UsersController.html":{}}}],["findlogged(req",{"_index":1052,"title":{},"body":{"controllers/UsersController.html":{}}}],["findloggeduser",{"_index":1124,"title":{},"body":{"injectables/UsersService.html":{}}}],["findloggeduser(username",{"_index":1144,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":545,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":620,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":564,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findoneandupdate",{"_index":1175,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebytag",{"_index":648,"title":{},"body":{"injectables/TeamsService.html":{}}}],["findonebytag(tag",{"_index":660,"title":{},"body":{"injectables/TeamsService.html":{}}}],["findonebyusername",{"_index":1044,"title":{},"body":{"controllers/UsersController.html":{}}}],["findonebyusername(@param('username",{"_index":1092,"title":{},"body":{"controllers/UsersController.html":{}}}],["findonebyusername(username",{"_index":1057,"title":{},"body":{"controllers/UsersController.html":{}}}],["findtournamentbyid",{"_index":847,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["findtournamentbyid(id",{"_index":860,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["findtournamentbyslug",{"_index":848,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["findtournamentbyslug(slug",{"_index":862,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["finished",{"_index":393,"title":{},"body":{"classes/Match.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["first",{"_index":613,"title":{},"body":{"controllers/TeamsController.html":{}}}],["firstname",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/UserDetails.html":{}}}],["following",{"_index":1267,"title":{},"body":{"index.html":{}}}],["foreignfield",{"_index":511,"title":{},"body":{"classes/Team.html":{}}}],["forwardref",{"_index":642,"title":{},"body":{"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":586,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["function",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["functions",{"_index":1248,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["game",{"_index":1258,"title":{},"body":{"index.html":{}}}],["generates",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["generating",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/:id/team/:tag",{"_index":775,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["get('/id/:id",{"_index":764,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["get(':id",{"_index":565,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/UsersController.html":{}}}],["get('exists/:tag",{"_index":551,"title":{},"body":{"controllers/TeamsController.html":{}}}],["get('finished",{"_index":769,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["get('logout",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('me",{"_index":1088,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('name/:username",{"_index":1058,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('new",{"_index":771,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["get('removeinvite/:username",{"_index":634,"title":{},"body":{"controllers/TeamsController.html":{}}}],["get('removeuser/:username",{"_index":630,"title":{},"body":{"controllers/TeamsController.html":{}}}],["get('search/:query",{"_index":583,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{}}}],["get('search/user",{"_index":1068,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('slug/:slug",{"_index":767,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["get('tag/:tag",{"_index":562,"title":{},"body":{"controllers/TeamsController.html":{}}}],["getfinishedtournament",{"_index":743,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["getnewesttournament",{"_index":744,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["getteammatches",{"_index":745,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["getteammatches(@param('id",{"_index":829,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["getteammatches(id",{"_index":774,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["getters",{"_index":504,"title":{},"body":{"classes/Team.html":{}}}],["getting",{"_index":1250,"title":{"index.html":{}},"body":{}}],["gettokens",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["git",{"_index":1274,"title":{},"body":{"index.html":{}}}],["given",{"_index":553,"title":{},"body":{"controllers/TeamsController.html":{}}}],["group",{"_index":486,"title":{},"body":{"classes/Team.html":{}}}],["guard",{"_index":436,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":438,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handleinvite",{"_index":1045,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["handleinvite(@req",{"_index":1099,"title":{},"body":{"controllers/UsersController.html":{}}}],["handleinvite(req",{"_index":1060,"title":{},"body":{"controllers/UsersController.html":{}}}],["handleinvite(username",{"_index":1147,"title":{},"body":{"injectables/UsersService.html":{}}}],["handleinvitedto",{"_index":376,"title":{"classes/HandleInviteDto.html":{}},"body":{"classes/HandleInviteDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["handleinvitedto.decision",{"_index":1169,"title":{},"body":{"injectables/UsersService.html":{}}}],["hash",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedrefreshedtoken",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashing",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["helmet",{"_index":1229,"title":{},"body":{"dependencies.html":{}}}],["history",{"_index":475,"title":{},"body":{"classes/Team.html":{},"injectables/TournamentsService.html":{}}}],["history.schema",{"_index":498,"title":{},"body":{"classes/Team.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["history.schema.ts",{"_index":514,"title":{},"body":{"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["history.schema.ts:10",{"_index":534,"title":{},"body":{"classes/TeamHistory.html":{}}}],["history.schema.ts:13",{"_index":535,"title":{},"body":{"classes/TeamHistory.html":{}}}],["history.schema.ts:16",{"_index":532,"title":{},"body":{"classes/TeamHistory.html":{}}}],["history.schema.ts:18",{"_index":521,"title":{},"body":{"classes/TeamEventsHistory.html":{}}}],["history.schema.ts:21",{"_index":517,"title":{},"body":{"classes/TeamEventsHistory.html":{}}}],["history.schema.ts:24",{"_index":518,"title":{},"body":{"classes/TeamEventsHistory.html":{}}}],["history.schema.ts:7",{"_index":533,"title":{},"body":{"classes/TeamHistory.html":{}}}],["httpcode",{"_index":877,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["httpexception",{"_index":595,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["https://github.com/opyd/praca_inzgo",{"_index":1275,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":596,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{}}}],["httpstatus.ok",{"_index":905,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["icon",{"_index":295,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/Team.html":{},"injectables/TeamsService.html":{}}}],["id",{"_index":567,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1190,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":449,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{}}}],["inbox",{"_index":699,"title":{},"body":{"injectables/TeamsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["incorrect",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":20,"title":{"index.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":676,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UserUpdateSelfDto.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UserUpdateSelfDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UserUpdateSelfDto.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injectmodel",{"_index":673,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(team.name",{"_index":675,"title":{},"body":{"injectables/TeamsService.html":{}}}],["injectmodel(tournament.name",{"_index":882,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["injectmodel(user.name",{"_index":1158,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects",{"_index":809,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["installstart",{"_index":1280,"title":{},"body":{"index.html":{}}}],["interface",{"_index":413,"title":{"interfaces/MatchInterface.html":{},"interfaces/StageInterface.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{}},"body":{"interfaces/MatchInterface.html":{},"interfaces/StageInterface.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":415,"title":{},"body":{"interfaces/MatchInterface.html":{},"interfaces/StageInterface.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"overview.html":{}}}],["invite",{"_index":578,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["invite.dto",{"_index":1085,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["invite.dto.ts",{"_index":378,"title":{},"body":{"classes/HandleInviteDto.html":{},"coverage.html":{}}}],["invite.dto.ts:13",{"_index":382,"title":{},"body":{"classes/HandleInviteDto.html":{}}}],["invite.dto.ts:8",{"_index":383,"title":{},"body":{"classes/HandleInviteDto.html":{}}}],["invited",{"_index":714,"title":{},"body":{"injectables/TeamsService.html":{}}}],["invitedusernames",{"_index":476,"title":{},"body":{"classes/Team.html":{},"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["inviter",{"_index":664,"title":{},"body":{"injectables/TeamsService.html":{}}}],["invites",{"_index":571,"title":{},"body":{"controllers/TeamsController.html":{}}}],["invitestags",{"_index":715,"title":{},"body":{"injectables/TeamsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["inviteuser",{"_index":649,"title":{},"body":{"injectables/TeamsService.html":{}}}],["inviteuser(inviter",{"_index":662,"title":{},"body":{"injectables/TeamsService.html":{}}}],["inviteuserdto",{"_index":384,"title":{"classes/InviteUserDto.html":{}},"body":{"classes/InviteUserDto.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"coverage.html":{}}}],["inviteuserdto.teamtag",{"_index":702,"title":{},"body":{"injectables/TeamsService.html":{}}}],["inviteusertoteam",{"_index":546,"title":{},"body":{"controllers/TeamsController.html":{}}}],["inviteusertoteam(@req",{"_index":625,"title":{},"body":{"controllers/TeamsController.html":{}}}],["inviteusertoteam(req",{"_index":568,"title":{},"body":{"controllers/TeamsController.html":{}}}],["isarray",{"_index":308,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{}}}],["isboolean",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{}}}],["isdefined",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/UserUpdateSelfDto.html":{}}}],["isemail",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["isempty",{"_index":325,"title":{},"body":{"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["isenum",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["isenum(playerroles",{"_index":361,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["isin",{"_index":326,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["isin([8",{"_index":328,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["isnotempty",{"_index":173,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/MatchResultDto.html":{}}}],["isnumber",{"_index":327,"title":{},"body":{"classes/CreateTournamentDto.html":{},"classes/MatchResultDto.html":{}}}],["isoptional",{"_index":309,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/UserUpdateSelfDto.html":{}}}],["isoptional()@isboolean",{"_index":372,"title":{},"body":{"classes/DetailsDto.html":{}}}],["isoptional()@isdefined()@type(undefined)@validatenested",{"_index":1035,"title":{},"body":{"injectables/UserUpdateSelfDto.html":{}}}],["isoptional()@isenum(playerroles",{"_index":374,"title":{},"body":{"classes/DetailsDto.html":{}}}],["isoptional()@isstring",{"_index":367,"title":{},"body":{"classes/DetailsDto.html":{},"injectables/UserUpdateSelfDto.html":{}}}],["isstring",{"_index":174,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/MatchResultDto.html":{},"injectables/UserUpdateSelfDto.html":{}}}],["isstring()@isnotempty",{"_index":303,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/KickFromTournamentDto.html":{}}}],["join",{"_index":572,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{}}}],["joined",{"_index":524,"title":{},"body":{"classes/TeamEventsHistory.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["jointournament",{"_index":849,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["jointournament(user",{"_index":867,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["jointournaments",{"_index":746,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["jointournaments(req",{"_index":780,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["json.parse",{"_index":717,"title":{},"body":{"injectables/TeamsService.html":{}}}],["json.parse(json.stringify(user.invitestags",{"_index":716,"title":{},"body":{"injectables/TeamsService.html":{}}}],["json.stringify(team.invitedusernames",{"_index":710,"title":{},"body":{"injectables/TeamsService.html":{}}}],["json.stringify(user.invitestags",{"_index":708,"title":{},"body":{"injectables/TeamsService.html":{}}}],["jungle",{"_index":1024,"title":{},"body":{"classes/UserDetails.html":{},"miscellaneous/enumerations.html":{}}}],["jwt",{"_index":42,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["jwt_access_secret",{"_index":1269,"title":{},"body":{"index.html":{}}}],["jwt_refresh_secret",{"_index":1270,"title":{},"body":{"index.html":{}}}],["jwtfromrequest",{"_index":50,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":34,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["jwtservice",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["kick",{"_index":787,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["kickfromtournament",{"_index":747,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["kickfromtournament(organizer",{"_index":869,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["kickfromtournament(req",{"_index":784,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["kickfromtournamentdto",{"_index":388,"title":{"classes/KickFromTournamentDto.html":{}},"body":{"classes/KickFromTournamentDto.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"coverage.html":{}}}],["kickfromtournamentdto.teamtag",{"_index":901,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["later",{"_index":923,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["league",{"_index":1259,"title":{},"body":{"index.html":{}}}],["leave",{"_index":611,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["leaveteam",{"_index":1046,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["leaveteam(@req",{"_index":1108,"title":{},"body":{"controllers/UsersController.html":{}}}],["leaveteam(req",{"_index":1064,"title":{},"body":{"controllers/UsersController.html":{}}}],["leaveteam(requser",{"_index":1150,"title":{},"body":{"injectables/UsersService.html":{}}}],["left",{"_index":527,"title":{},"body":{"classes/TeamEventsHistory.html":{},"injectables/TeamsService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["legends",{"_index":1260,"title":{},"body":{"index.html":{}}}],["length",{"_index":310,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["length(4",{"_index":311,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["let's",{"_index":756,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["license",{"_index":1297,"title":{},"body":{"properties.html":{}}}],["limit(10",{"_index":694,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["literal",{"_index":1307,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["localfield",{"_index":510,"title":{},"body":{"classes/Team.html":{}}}],["locally",{"_index":1272,"title":{},"body":{"index.html":{}}}],["log",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["logged",{"_index":759,"title":{},"body":{"controllers/TournamentsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logout",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@req",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["look",{"_index":1072,"title":{},"body":{"controllers/UsersController.html":{}}}],["lookingforteam",{"_index":365,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/UserDetails.html":{}}}],["looks",{"_index":938,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["loserteam",{"_index":957,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["loserteam.events.push",{"_index":971,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["loserteam.history.push",{"_index":968,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["loserteam.save",{"_index":975,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["loserteam.tag",{"_index":966,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["loss",{"_index":970,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["made",{"_index":1157,"title":{},"body":{"injectables/UsersService.html":{}}}],["match",{"_index":391,"title":{"classes/Match.html":{}},"body":{"classes/Match.html":{},"classes/Stage.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"coverage.html":{}}}],["match.finished",{"_index":948,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["match.interface",{"_index":464,"title":{},"body":{"classes/Stage.html":{},"interfaces/StageInterface.html":{}}}],["match.result",{"_index":947,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["match.schema",{"_index":463,"title":{},"body":{"classes/Stage.html":{}}}],["match.teama",{"_index":943,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["match.teamb",{"_index":944,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["match.winner",{"_index":946,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["match['id",{"_index":942,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["matchdocument",{"_index":410,"title":{},"body":{"classes/Match.html":{},"miscellaneous/typealiases.html":{}}}],["matches",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["matches.map((match",{"_index":941,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["matches_per_round",{"_index":929,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["matchid",{"_index":420,"title":{},"body":{"classes/MatchResultDto.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"injectables/TournamentsService.html":{}}}],["matchindex",{"_index":936,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["matching",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchinterface",{"_index":414,"title":{"interfaces/MatchInterface.html":{}},"body":{"interfaces/MatchInterface.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"coverage.html":{}}}],["matchresultdto",{"_index":417,"title":{"classes/MatchResultDto.html":{}},"body":{"classes/MatchResultDto.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"coverage.html":{}}}],["matchschema",{"_index":411,"title":{},"body":{"classes/Match.html":{},"classes/Stage.html":{},"modules/TournamentsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":886,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["math.log(2",{"_index":916,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["math.log(tournament.participants.length",{"_index":915,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["math.random",{"_index":918,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["maxlength",{"_index":494,"title":{},"body":{"classes/Team.html":{}}}],["mdi",{"_index":485,"title":{},"body":{"classes/Team.html":{}}}],["member",{"_index":1184,"title":{},"body":{"injectables/UsersService.html":{}}}],["members",{"_index":477,"title":{},"body":{"classes/Team.html":{},"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["message",{"_index":1136,"title":{},"body":{"injectables/UsersService.html":{}}}],["metadata",{"_index":1235,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["methods",{"_index":21,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mid",{"_index":1022,"title":{},"body":{"classes/UserDetails.html":{},"miscellaneous/enumerations.html":{}}}],["minlength",{"_index":493,"title":{},"body":{"classes/Team.html":{}}}],["miscellaneous",{"_index":1242,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":609,"title":{},"body":{"controllers/TeamsController.html":{}}}],["mode",{"_index":1284,"title":{},"body":{"index.html":{}}}],["model",{"_index":652,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["modify",{"_index":1077,"title":{},"body":{"controllers/UsersController.html":{}}}],["module",{"_index":55,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":57,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb_uri",{"_index":1271,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":409,"title":{},"body":{"classes/Match.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoose.schema.types.string",{"_index":506,"title":{},"body":{"classes/Team.html":{},"classes/User.html":{}}}],["mongoosemodule",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":645,"title":{},"body":{"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["moves",{"_index":949,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["msg",{"_index":516,"title":{},"body":{"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["name",{"_index":29,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":1265,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":43,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":448,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":988,"title":{},"body":{"classes/UpdateTeamDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"classes/Match.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1221,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":1222,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/MatchResultDto.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"classes/UpdateTournamentDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newest",{"_index":773,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["newstage",{"_index":932,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["newuser",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser._id",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.role",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.username",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":926,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["notfoundexception",{"_index":672,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{}}}],["npm",{"_index":1279,"title":{},"body":{"index.html":{}}}],["nrofteams",{"_index":315,"title":{},"body":{"classes/CreateTournamentDto.html":{},"classes/Tournament.html":{},"injectables/TournamentsService.html":{}}}],["null",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":318,"title":{},"body":{"classes/CreateTournamentDto.html":{},"classes/MatchResultDto.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["one",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["online",{"_index":1254,"title":{},"body":{"index.html":{}}}],["opponent",{"_index":530,"title":{},"body":{"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"injectables/TournamentsService.html":{}}}],["opponents",{"_index":981,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["opponents.push",{"_index":984,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["opponentsobjects",{"_index":985,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["optional",{"_index":31,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["organize",{"_index":1256,"title":{},"body":{"index.html":{}}}],["organizer",{"_index":719,"title":{},"body":{"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["organizer.currentteam",{"_index":884,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["organizer.update",{"_index":889,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["organizer.username",{"_index":892,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["out",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1291,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":296,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/Team.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["package",{"_index":1217,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":554,"title":{},"body":{"controllers/TeamsController.html":{}}}],["param",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('index",{"_index":1112,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('tag",{"_index":830,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["param('tournamentid",{"_index":812,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["param('username",{"_index":632,"title":{},"body":{"controllers/TeamsController.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partialtype",{"_index":987,"title":{},"body":{"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createteamdto",{"_index":989,"title":{},"body":{"classes/UpdateTeamDto.html":{}}}],["partialtype(createtournamentdto",{"_index":991,"title":{},"body":{"classes/UpdateTournamentDto.html":{}}}],["partialtype(createuserdto",{"_index":994,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["participants",{"_index":720,"title":{},"body":{"classes/Tournament.html":{},"injectables/TournamentsService.html":{}}}],["participants.length",{"_index":930,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["participate",{"_index":980,"title":{},"body":{"injectables/TournamentsService.html":{},"index.html":{}}}],["participating",{"_index":1180,"title":{},"body":{"injectables/UsersService.html":{}}}],["passed",{"_index":1078,"title":{},"body":{"controllers/UsersController.html":{}}}],["passport",{"_index":41,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":38,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":47,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["passreqtocallback",{"_index":434,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["password",{"_index":169,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/User.html":{},"injectables/UserUpdateSelfDto.html":{},"injectables/UsersService.html":{}}}],["passwordmatches",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":593,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":627,"title":{},"body":{"controllers/TeamsController.html":{}}}],["patch('description/:tournamentid",{"_index":819,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["patch('leaveteam",{"_index":1107,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('match/:tournamentid",{"_index":822,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["patch('me",{"_index":1104,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('start/:tournamentid",{"_index":817,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["payload",{"_index":36,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["pending",{"_index":577,"title":{},"body":{"controllers/TeamsController.html":{}}}],["pick",{"_index":794,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["platform",{"_index":1252,"title":{},"body":{"index.html":{}}}],["player",{"_index":1010,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["playerroles",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/UserDetails.html":{},"miscellaneous/enumerations.html":{}}}],["players",{"_index":1255,"title":{},"body":{"index.html":{}}}],["populate",{"_index":1139,"title":{},"body":{"injectables/UsersService.html":{}}}],["populate('invites",{"_index":1173,"title":{},"body":{"injectables/UsersService.html":{}}}],["post",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["post('handleinvite",{"_index":1098,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('invite",{"_index":624,"title":{},"body":{"controllers/TeamsController.html":{}}}],["post('join/:tournamentid",{"_index":811,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["post('refresh",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["praca_inz/backendinstall",{"_index":1278,"title":{},"body":{"index.html":{}}}],["preferredroles",{"_index":364,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/UserDetails.html":{}}}],["prefix",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["present",{"_index":1071,"title":{},"body":{"controllers/UsersController.html":{}}}],["private",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":1286,"title":{},"body":{"index.html":{}}}],["project",{"_index":1264,"title":{},"body":{"index.html":{}}}],["promise",{"_index":1132,"title":{},"body":{"injectables/UsersService.html":{}}}],["promise.all",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["prop",{"_index":398,"title":{},"body":{"classes/Match.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["prop({default",{"_index":478,"title":{},"body":{"classes/Team.html":{},"classes/User.html":{}}}],["prop({required",{"_index":458,"title":{},"body":{"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["prop({type",{"_index":401,"title":{},"body":{"classes/Match.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["properties",{"_index":168,"title":{"properties.html":{}},"body":{"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"classes/Tournament.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"properties.html":{}}}],["providers",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":1016,"title":{},"body":{"classes/UserDetails.html":{}}}],["pull",{"_index":697,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["push",{"_index":680,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["query",{"_index":587,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query('team",{"_index":1102,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('username",{"_index":1101,"title":{},"body":{"controllers/UsersController.html":{}}}],["readonly",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["ref",{"_index":402,"title":{},"body":{"classes/Match.html":{},"classes/Team.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["reflect",{"_index":1234,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":442,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refresh",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refreshes",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["refreshtokenguard",{"_index":140,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["refreshtokenmatches",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtokens(@req",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(req",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(username",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenstrategy",{"_index":180,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["regexp",{"_index":691,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["reject/accept",{"_index":1149,"title":{},"body":{"injectables/UsersService.html":{}}}],["removed",{"_index":700,"title":{},"body":{"injectables/TeamsService.html":{}}}],["removeinvite",{"_index":547,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["removeinvite(@req",{"_index":635,"title":{},"body":{"controllers/TeamsController.html":{}}}],["removeinvite(owner",{"_index":665,"title":{},"body":{"injectables/TeamsService.html":{}}}],["removeinvite(req",{"_index":573,"title":{},"body":{"controllers/TeamsController.html":{}}}],["removes",{"_index":576,"title":{},"body":{"controllers/TeamsController.html":{}}}],["removeuserfromteam",{"_index":548,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["removeuserfromteam(@req",{"_index":631,"title":{},"body":{"controllers/TeamsController.html":{}}}],["removeuserfromteam(owner",{"_index":667,"title":{},"body":{"injectables/TeamsService.html":{}}}],["removeuserfromteam(req",{"_index":579,"title":{},"body":{"controllers/TeamsController.html":{}}}],["removing",{"_index":1135,"title":{},"body":{"injectables/UsersService.html":{}}}],["req",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["req.body.refreshtoken",{"_index":435,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["req.user['refreshtoken",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user['username",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["req['user",{"_index":821,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["req['user']['username",{"_index":816,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["request",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["request.user",{"_index":454,"title":{},"body":{"guards/RolesGuard.html":{}}}],["required",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"controllers/TeamsController.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["requser",{"_index":1152,"title":{},"body":{"injectables/UsersService.html":{}}}],["requser['username",{"_index":1176,"title":{},"body":{"injectables/UsersService.html":{}}}],["reset",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["result",{"_index":394,"title":{},"body":{"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["result.dto",{"_index":805,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["result.dto.ts",{"_index":419,"title":{},"body":{"classes/MatchResultDto.html":{},"coverage.html":{}}}],["result.dto.ts:13",{"_index":425,"title":{},"body":{"classes/MatchResultDto.html":{}}}],["result.dto.ts:18",{"_index":426,"title":{},"body":{"classes/MatchResultDto.html":{}}}],["result.dto.ts:23",{"_index":423,"title":{},"body":{"classes/MatchResultDto.html":{}}}],["result.dto.ts:8",{"_index":422,"title":{},"body":{"classes/MatchResultDto.html":{}}}],["results",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":54,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":37,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["return{string",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["return{tokens",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["rimraf",{"_index":1237,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{}}}],["roles",{"_index":450,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles.includes(user.role",{"_index":455,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":437,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["round",{"_index":950,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["run",{"_index":1263,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1239,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":893,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["schema",{"_index":407,"title":{},"body":{"classes/Match.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"modules/TeamsModule.html":{},"classes/Tournament.html":{},"modules/TournamentsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schema/team",{"_index":674,"title":{},"body":{"injectables/TeamsService.html":{}}}],["schema/team.schema",{"_index":644,"title":{},"body":{"modules/TeamsModule.html":{},"injectables/TeamsService.html":{}}}],["schemafactory",{"_index":408,"title":{},"body":{"classes/Match.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(match",{"_index":412,"title":{},"body":{"classes/Match.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(stage",{"_index":469,"title":{},"body":{"classes/Stage.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(team",{"_index":508,"title":{},"body":{"classes/Team.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(teameventshistory",{"_index":528,"title":{},"body":{"classes/TeamEventsHistory.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(teamhistory",{"_index":536,"title":{},"body":{"classes/TeamHistory.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(tournament",{"_index":736,"title":{},"body":{"classes/Tournament.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1013,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/match.schema",{"_index":843,"title":{},"body":{"modules/TournamentsModule.html":{}}}],["schemas/stage.schema",{"_index":844,"title":{},"body":{"modules/TournamentsModule.html":{}}}],["schemas/tournament.schema",{"_index":842,"title":{},"body":{"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{}}}],["schemas/user",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["schemas/user.schema",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["search",{"_index":549,"title":{},"body":{"controllers/TeamsController.html":{}}}],["search(@param('query",{"_index":622,"title":{},"body":{"controllers/TeamsController.html":{}}}],["search(query",{"_index":582,"title":{},"body":{"controllers/TeamsController.html":{}}}],["searchbyquery",{"_index":748,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["searchbyquery(@param('query",{"_index":834,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["searchbyquery(query",{"_index":788,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["searchbyusername",{"_index":1047,"title":{},"body":{"controllers/UsersController.html":{}}}],["searchbyusername(username",{"_index":1067,"title":{},"body":{"controllers/UsersController.html":{}}}],["searches",{"_index":585,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"injectables/UsersService.html":{}}}],["searching",{"_index":1070,"title":{},"body":{"controllers/UsersController.html":{}}}],["searchteam",{"_index":650,"title":{},"body":{"injectables/TeamsService.html":{}}}],["searchteam(query",{"_index":669,"title":{},"body":{"injectables/TeamsService.html":{}}}],["searchtournament",{"_index":850,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["searchtournament(query",{"_index":871,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["secret",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":52,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["seeding",{"_index":799,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["select",{"_index":692,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["self.dto",{"_index":1081,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["self.dto.ts",{"_index":1034,"title":{},"body":{"injectables/UserUpdateSelfDto.html":{},"coverage.html":{}}}],["self.dto.ts:15",{"_index":1037,"title":{},"body":{"injectables/UserUpdateSelfDto.html":{}}}],["self.dto.ts:21",{"_index":1036,"title":{},"body":{"injectables/UserUpdateSelfDto.html":{}}}],["server",{"_index":1281,"title":{},"body":{"index.html":{}}}],["service",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["services",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["set",{"_index":793,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["setmatchresult",{"_index":749,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["setmatchresult(req",{"_index":790,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["setmatchresult(tournamentid",{"_index":873,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["setmetadata('roles",{"_index":1309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["sign",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(authdto",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(createuserdto",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["slug",{"_index":721,"title":{},"body":{"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["slugify",{"_index":880,"title":{},"body":{"injectables/TournamentsService.html":{},"dependencies.html":{}}}],["slugify(title",{"_index":885,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["specific",{"_index":541,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["specified",{"_index":592,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/.../accesstoken.strategy.ts",{"_index":1302,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":1249,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../match.schema.ts",{"_index":1303,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../stage.schema.ts",{"_index":1304,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../team",{"_index":1244,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../team.schema.ts",{"_index":1305,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../tournament.schema.ts",{"_index":1306,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1245,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.schema.ts",{"_index":1246,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:28",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:48",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:58",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:102",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:116",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:14",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:153",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:66",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:92",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":167,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:13",{"_index":171,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dto/auth.dto.ts:8",{"_index":172,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts",{"_index":19,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:12",{"_index":27,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:20",{"_index":35,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts",{"_index":428,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:11",{"_index":429,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:20",{"_index":431,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/common/decorators/roles.decorator.ts",{"_index":1196,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/guards/accesstoken.guard.ts",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/common/guards/refreshtoken.guard.ts",{"_index":427,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":439,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:5",{"_index":443,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:8",{"_index":446,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/main.ts",{"_index":1199,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/teams/dto/create",{"_index":292,"title":{},"body":{"classes/CreateTeamDto.html":{},"coverage.html":{}}}],["src/teams/dto/invite",{"_index":385,"title":{},"body":{"classes/InviteUserDto.html":{},"coverage.html":{}}}],["src/teams/dto/update",{"_index":986,"title":{},"body":{"classes/UpdateTeamDto.html":{},"coverage.html":{}}}],["src/teams/schema/team",{"_index":513,"title":{},"body":{"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/teams/schema/team.interface.ts",{"_index":529,"title":{},"body":{"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"coverage.html":{}}}],["src/teams/schema/team.schema.ts",{"_index":472,"title":{},"body":{"classes/Team.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/teams/schema/team.schema.ts:16",{"_index":490,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:19",{"_index":487,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:22",{"_index":495,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:25",{"_index":491,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:28",{"_index":489,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:31",{"_index":488,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:34",{"_index":479,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:37",{"_index":482,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:40",{"_index":484,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:43",{"_index":480,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/teams.controller.ts",{"_index":538,"title":{},"body":{"controllers/TeamsController.html":{},"coverage.html":{}}}],["src/teams/teams.controller.ts:102",{"_index":584,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:113",{"_index":570,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:124",{"_index":591,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:135",{"_index":581,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:146",{"_index":575,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:47",{"_index":557,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:65",{"_index":560,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:74",{"_index":563,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:84",{"_index":552,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:93",{"_index":566,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.module.ts",{"_index":640,"title":{},"body":{"modules/TeamsModule.html":{}}}],["src/teams/teams.service.ts",{"_index":647,"title":{},"body":{"injectables/TeamsService.html":{},"coverage.html":{}}}],["src/teams/teams.service.ts:117",{"_index":663,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:153",{"_index":666,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:20",{"_index":653,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:27",{"_index":657,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:44",{"_index":658,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:48",{"_index":661,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:56",{"_index":659,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:60",{"_index":670,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:72",{"_index":655,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:80",{"_index":671,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:86",{"_index":668,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/tournaments/dto/create",{"_index":313,"title":{},"body":{"classes/CreateTournamentDto.html":{},"coverage.html":{}}}],["src/tournaments/dto/kick",{"_index":389,"title":{},"body":{"classes/KickFromTournamentDto.html":{},"coverage.html":{}}}],["src/tournaments/dto/match",{"_index":418,"title":{},"body":{"classes/MatchResultDto.html":{},"coverage.html":{}}}],["src/tournaments/dto/update",{"_index":990,"title":{},"body":{"classes/UpdateTournamentDto.html":{},"coverage.html":{}}}],["src/tournaments/schemas/match.interface.ts",{"_index":416,"title":{},"body":{"interfaces/MatchInterface.html":{},"coverage.html":{}}}],["src/tournaments/schemas/match.schema.ts",{"_index":392,"title":{},"body":{"classes/Match.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/tournaments/schemas/match.schema.ts:12",{"_index":405,"title":{},"body":{"classes/Match.html":{}}}],["src/tournaments/schemas/match.schema.ts:15",{"_index":406,"title":{},"body":{"classes/Match.html":{}}}],["src/tournaments/schemas/match.schema.ts:18",{"_index":400,"title":{},"body":{"classes/Match.html":{}}}],["src/tournaments/schemas/match.schema.ts:21",{"_index":399,"title":{},"body":{"classes/Match.html":{}}}],["src/tournaments/schemas/match.schema.ts:9",{"_index":404,"title":{},"body":{"classes/Match.html":{}}}],["src/tournaments/schemas/stage.interface.ts",{"_index":471,"title":{},"body":{"interfaces/StageInterface.html":{},"coverage.html":{}}}],["src/tournaments/schemas/stage.schema.ts",{"_index":457,"title":{},"body":{"classes/Stage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/tournaments/schemas/stage.schema.ts:11",{"_index":459,"title":{},"body":{"classes/Stage.html":{}}}],["src/tournaments/schemas/stage.schema.ts:14",{"_index":462,"title":{},"body":{"classes/Stage.html":{}}}],["src/tournaments/schemas/stage.schema.ts:17",{"_index":461,"title":{},"body":{"classes/Stage.html":{}}}],["src/tournaments/schemas/tournament.schema.ts",{"_index":718,"title":{},"body":{"classes/Tournament.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:10",{"_index":732,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:13",{"_index":729,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:16",{"_index":726,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:19",{"_index":731,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:22",{"_index":725,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:25",{"_index":724,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:28",{"_index":727,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:31",{"_index":728,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:34",{"_index":730,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/tournaments.controller.ts",{"_index":738,"title":{},"body":{"controllers/TournamentsController.html":{},"coverage.html":{}}}],["src/tournaments/tournaments.controller.ts:105",{"_index":755,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:125",{"_index":792,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:141",{"_index":761,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:150",{"_index":768,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:159",{"_index":765,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:169",{"_index":776,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:177",{"_index":772,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:185",{"_index":770,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:194",{"_index":789,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:41",{"_index":758,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:56",{"_index":782,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:71",{"_index":786,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:90",{"_index":797,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.module.ts",{"_index":840,"title":{},"body":{"modules/TournamentsModule.html":{}}}],["src/tournaments/tournaments.service.ts",{"_index":846,"title":{},"body":{"injectables/TournamentsService.html":{},"coverage.html":{}}}],["src/tournaments/tournaments.service.ts:112",{"_index":870,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:140",{"_index":876,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:207",{"_index":874,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:23",{"_index":852,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:31",{"_index":858,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:329",{"_index":866,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:369",{"_index":856,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:392",{"_index":865,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:395",{"_index":864,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:402",{"_index":872,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:53",{"_index":861,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:61",{"_index":863,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:69",{"_index":859,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:73",{"_index":868,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/users/dto/create",{"_index":330,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"coverage.html":{}}}],["src/users/dto/handle",{"_index":377,"title":{},"body":{"classes/HandleInviteDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":993,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":1033,"title":{},"body":{"injectables/UserUpdateSelfDto.html":{},"coverage.html":{}}}],["src/users/schemas/user",{"_index":1014,"title":{},"body":{"classes/UserDetails.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/schemas/user.schema.ts",{"_index":995,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/schemas/user.schema.ts:20",{"_index":1007,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:22",{"_index":1001,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:24",{"_index":996,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:26",{"_index":1004,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:28",{"_index":1006,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:30",{"_index":1005,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:32",{"_index":998,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:34",{"_index":1003,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:36",{"_index":1002,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:38",{"_index":1000,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":1039,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:106",{"_index":1076,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:116",{"_index":1066,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:127",{"_index":1050,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:42",{"_index":1054,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:52",{"_index":1056,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":1059,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:79",{"_index":1062,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:92",{"_index":1069,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1117,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1120,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:100",{"_index":1148,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:148",{"_index":1140,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:168",{"_index":1143,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:186",{"_index":1153,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:200",{"_index":1155,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:21",{"_index":1128,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:214",{"_index":1151,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":1131,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:45",{"_index":1137,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:56",{"_index":1145,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:67",{"_index":1146,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:78",{"_index":1134,"title":{},"body":{"injectables/UsersService.html":{}}}],["stage",{"_index":456,"title":{"classes/Stage.html":{}},"body":{"classes/Stage.html":{},"classes/Tournament.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"coverage.html":{}}}],["stage.matches.foreach((match",{"_index":983,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["stage.schema",{"_index":733,"title":{},"body":{"classes/Tournament.html":{}}}],["stagecounter",{"_index":927,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["stagedocument",{"_index":465,"title":{},"body":{"classes/Stage.html":{},"miscellaneous/typealiases.html":{}}}],["stageinterface",{"_index":470,"title":{"interfaces/StageInterface.html":{}},"body":{"interfaces/StageInterface.html":{},"coverage.html":{}}}],["stagenr",{"_index":421,"title":{},"body":{"classes/MatchResultDto.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"injectables/TournamentsService.html":{}}}],["stages",{"_index":722,"title":{},"body":{"classes/Tournament.html":{},"injectables/TournamentsService.html":{}}}],["stageschema",{"_index":468,"title":{},"body":{"classes/Stage.html":{},"classes/Tournament.html":{},"modules/TournamentsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stagesnr",{"_index":914,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["start",{"_index":978,"title":{},"body":{"injectables/TournamentsService.html":{},"index.html":{}}}],["start:dev",{"_index":1285,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":1287,"title":{},"body":{"index.html":{}}}],["started",{"_index":723,"title":{"index.html":{}},"body":{"classes/Tournament.html":{},"injectables/TournamentsService.html":{}}}],["starts",{"_index":798,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["starttournament",{"_index":750,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["starttournament(organizer",{"_index":875,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["starttournament(req",{"_index":795,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["statements",{"_index":1191,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1223,"title":{},"body":{"dependencies.html":{}}}],["strategies/accesstoken.strategy",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/refreshtoken.strategy",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":40,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["string",{"_index":45,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":44,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{}}}],["successfully",{"_index":1187,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":49,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["support",{"_index":1026,"title":{},"body":{"classes/UserDetails.html":{},"miscellaneous/enumerations.html":{},"modules.html":{}}}],["svg",{"_index":1289,"title":{},"body":{"modules.html":{}}}],["table",{"_index":1216,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1215,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":297,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["team",{"_index":403,"title":{"classes/Team.html":{}},"body":{"classes/Match.html":{},"classes/Team.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["team's",{"_index":777,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["team.activetournament",{"_index":902,"title":{},"body":{"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["team.dto",{"_index":600,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/UpdateTeamDto.html":{}}}],["team.dto.ts",{"_index":293,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/UpdateTeamDto.html":{},"coverage.html":{}}}],["team.dto.ts:14",{"_index":302,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["team.dto.ts:18",{"_index":300,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["team.dto.ts:24",{"_index":307,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["team.dto.ts:28",{"_index":304,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["team.dto.ts:31",{"_index":298,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["team.events.push",{"_index":1185,"title":{},"body":{"injectables/UsersService.html":{}}}],["team.interface",{"_index":496,"title":{},"body":{"classes/Team.html":{}}}],["team.members",{"_index":1182,"title":{},"body":{"injectables/UsersService.html":{}}}],["team.members.filter((member",{"_index":1183,"title":{},"body":{"injectables/UsersService.html":{}}}],["team.members.length",{"_index":900,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["team.name",{"_index":646,"title":{},"body":{"modules/TeamsModule.html":{}}}],["team.owner",{"_index":703,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["team.save",{"_index":903,"title":{},"body":{"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["team.tag",{"_index":685,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["team.updateone",{"_index":1172,"title":{},"body":{"injectables/UsersService.html":{}}}],["teama",{"_index":395,"title":{},"body":{"classes/Match.html":{},"interfaces/MatchInterface.html":{},"injectables/TournamentsService.html":{}}}],["teama.tag",{"_index":956,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["teamatag",{"_index":939,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["teamb",{"_index":396,"title":{},"body":{"classes/Match.html":{},"interfaces/MatchInterface.html":{},"injectables/TournamentsService.html":{}}}],["teambtag",{"_index":940,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["teamdocument",{"_index":500,"title":{},"body":{"classes/Team.html":{},"injectables/TeamsService.html":{},"miscellaneous/typealiases.html":{}}}],["teameventshistory",{"_index":512,"title":{"classes/TeamEventsHistory.html":{}},"body":{"classes/TeamEventsHistory.html":{},"coverage.html":{}}}],["teameventshistoryschema",{"_index":499,"title":{},"body":{"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["teameventsinterface",{"_index":481,"title":{"interfaces/TeamEventsInterface.html":{}},"body":{"classes/Team.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"coverage.html":{}}}],["teamhistory",{"_index":531,"title":{"classes/TeamHistory.html":{}},"body":{"classes/TeamHistory.html":{},"coverage.html":{}}}],["teamhistoryinterface",{"_index":483,"title":{"interfaces/TeamHistoryInterface.html":{}},"body":{"classes/Team.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"coverage.html":{}}}],["teamhistoryschema",{"_index":497,"title":{},"body":{"classes/Team.html":{},"classes/TeamHistory.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["teammodel",{"_index":654,"title":{},"body":{"injectables/TeamsService.html":{}}}],["teamowner",{"_index":897,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["teamowner.currentteam",{"_index":898,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["teams",{"_index":539,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{}}}],["teams.controller",{"_index":643,"title":{},"body":{"modules/TeamsModule.html":{}}}],["teams.service",{"_index":598,"title":{},"body":{"controllers/TeamsController.html":{},"modules/TeamsModule.html":{}}}],["teams/schema/team",{"_index":881,"title":{},"body":{"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["teams/schema/team.schema",{"_index":1008,"title":{},"body":{"classes/User.html":{}}}],["teams/teams.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{}}}],["teams/teams.service",{"_index":879,"title":{},"body":{"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["teamschema",{"_index":507,"title":{},"body":{"classes/Team.html":{},"modules/TeamsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["teamschema.virtual('invitedusers",{"_index":509,"title":{},"body":{"classes/Team.html":{}}}],["teamscontroller",{"_index":537,"title":{"controllers/TeamsController.html":{}},"body":{"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"coverage.html":{}}}],["teamservice",{"_index":1127,"title":{},"body":{"injectables/UsersService.html":{}}}],["teamsmodule",{"_index":62,"title":{"modules/TeamsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["teamsservice",{"_index":597,"title":{"injectables/TeamsService.html":{}},"body":{"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["teamtag",{"_index":380,"title":{},"body":{"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{}}}],["this.about",{"_index":1029,"title":{},"body":{"classes/UserDetails.html":{}}}],["this.authservice.logout(req.user['sub",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens(username",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(authdto",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.country",{"_index":1028,"title":{},"body":{"classes/UserDetails.html":{}}}],["this.findbyusername(username",{"_index":1166,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findtournamentbyid(id",{"_index":976,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.findtournamentbyid(tournamentid",{"_index":906,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.firstname",{"_index":1027,"title":{},"body":{"classes/UserDetails.html":{}}}],["this.gettokens",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user._id",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.lookingforteam",{"_index":1031,"title":{},"body":{"classes/UserDetails.html":{}}}],["this.preferredroles",{"_index":1030,"title":{},"body":{"classes/UserDetails.html":{}}}],["this.reflector.get('roles",{"_index":451,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.teammodel",{"_index":689,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teammodel(createteamdto).save",{"_index":678,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teammodel.find({}).exec",{"_index":686,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teammodel.findbyid(id).populate('owner').exec",{"_index":688,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teammodel.findone",{"_index":687,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teamservice.findonebytag(handleinvitedto.teamtag",{"_index":1167,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.teamservice.findonebytag(user.currentteam",{"_index":1177,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.teamsservice.checkifteamexists(tag",{"_index":619,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.create(createteamdto",{"_index":614,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.findall",{"_index":615,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.findone(id",{"_index":621,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.findonebytag(tag",{"_index":617,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TournamentsService.html":{}}}],["this.teamsservice.findonebytag(teamatag",{"_index":953,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.teamsservice.findonebytag(teambtag",{"_index":954,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.teamsservice.findonebytag(teamowner.currentteam",{"_index":899,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.teamsservice.inviteuser(req.user['username",{"_index":626,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.removeinvite(req.user['username",{"_index":636,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.removeuserfromteam(req.user['username",{"_index":633,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.searchteam(query",{"_index":623,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.update(id",{"_index":629,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.tournamentmodel",{"_index":891,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.tournamentmodel.find({}).exec",{"_index":896,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.tournamentmodel.findbyid(id).exec",{"_index":894,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.tournamentmodel.findone",{"_index":895,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.tournamentsservice.changedescription",{"_index":820,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.create(req['user",{"_index":810,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.findall",{"_index":824,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.findtournamentbyid(id",{"_index":828,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.findtournamentbyslug(slug",{"_index":826,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.getfinishedtournament",{"_index":833,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.getnewesttournament",{"_index":832,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.getteammatches(id",{"_index":831,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.jointournament(req['user",{"_index":813,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.kickfromtournament",{"_index":815,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.searchtournament(query",{"_index":835,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.setmatchresult",{"_index":823,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.starttournament(req['user",{"_index":818,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.updaterefreshtoken(newuser._id",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterefreshtoken(user._id",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel",{"_index":1162,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel(createuserdto",{"_index":1160,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":1164,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.create",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyusername",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyusername(authdto.username",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyusername(createteamdto.owner",{"_index":677,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.userservice.findbyusername(inviteuserdto.username",{"_index":701,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.userservice.findbyusername(organizer['username",{"_index":909,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.userservice.findbyusername(req.user['username",{"_index":606,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.userservice.findbyusername(user['username",{"_index":883,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.userservice.findbyusername(username",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TeamsService.html":{}}}],["this.userservice.update(userid",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.deletemsgatindex(index",{"_index":1113,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyusername(username",{"_index":1093,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findlikeusername(username",{"_index":1103,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findloggeduser(req.user['username",{"_index":1090,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(id",{"_index":1091,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.handleinvite",{"_index":1100,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.leaveteam(req['user",{"_index":1109,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateself(req.user['username",{"_index":1106,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["timestamps",{"_index":501,"title":{},"body":{"classes/Team.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["title",{"_index":316,"title":{},"body":{"classes/CreateTournamentDto.html":{},"classes/Tournament.html":{},"injectables/TournamentsService.html":{}}}],["token",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["tokens",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokens.refreshtoken",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["toobject",{"_index":502,"title":{},"body":{"classes/Team.html":{}}}],["top",{"_index":1023,"title":{},"body":{"classes/UserDetails.html":{},"miscellaneous/enumerations.html":{}}}],["tournament",{"_index":559,"title":{"classes/Tournament.html":{}},"body":{"controllers/TeamsController.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tournament's",{"_index":779,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["tournament._id.tostring",{"_index":979,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.dto",{"_index":803,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTournamentDto.html":{}}}],["tournament.dto.ts",{"_index":314,"title":{},"body":{"classes/CreateTournamentDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/UpdateTournamentDto.html":{},"coverage.html":{}}}],["tournament.dto.ts:15",{"_index":324,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["tournament.dto.ts:20",{"_index":317,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["tournament.dto.ts:26",{"_index":323,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["tournament.dto.ts:6",{"_index":390,"title":{},"body":{"classes/KickFromTournamentDto.html":{}}}],["tournament.finished",{"_index":959,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.name",{"_index":845,"title":{},"body":{"modules/TournamentsModule.html":{}}}],["tournament.nrofteams",{"_index":912,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.organizer",{"_index":910,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.participants.length",{"_index":911,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.participants.sort",{"_index":917,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.save",{"_index":904,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.stages.foreach((stage",{"_index":982,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.stages.length",{"_index":958,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.stages[stagenr",{"_index":933,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.stages[stagenr].finished",{"_index":952,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.stages[stagenr].matches",{"_index":937,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.started",{"_index":908,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.title",{"_index":963,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament_dropped",{"_index":526,"title":{},"body":{"classes/TeamEventsHistory.html":{},"miscellaneous/enumerations.html":{}}}],["tournament_win",{"_index":525,"title":{},"body":{"classes/TeamEventsHistory.html":{},"miscellaneous/enumerations.html":{}}}],["tournamentdocument",{"_index":734,"title":{},"body":{"classes/Tournament.html":{},"injectables/TournamentsService.html":{},"miscellaneous/typealiases.html":{}}}],["tournamentid",{"_index":752,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["tournamentmodel",{"_index":853,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournaments",{"_index":739,"title":{},"body":{"controllers/TournamentsController.html":{},"index.html":{}}}],["tournaments.controller",{"_index":841,"title":{},"body":{"modules/TournamentsModule.html":{}}}],["tournaments.service",{"_index":802,"title":{},"body":{"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{}}}],["tournaments/tournaments.module",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["tournamentschema",{"_index":735,"title":{},"body":{"classes/Tournament.html":{},"modules/TournamentsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tournamentscontroller",{"_index":737,"title":{"controllers/TournamentsController.html":{}},"body":{"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"coverage.html":{}}}],["tournamentsmodule",{"_index":63,"title":{"modules/TournamentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TournamentsModule.html":{},"modules.html":{},"overview.html":{}}}],["tournamentsservice",{"_index":801,"title":{"injectables/TournamentsService.html":{}},"body":{"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"coverage.html":{},"overview.html":{}}}],["transferring",{"_index":924,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["transformer",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/UserUpdateSelfDto.html":{},"dependencies.html":{}}}],["true",{"_index":363,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UsersService.html":{}}}],["type",{"_index":30,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1300,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":520,"title":{},"body":{"classes/TeamEventsHistory.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["unauthorizedexception",{"_index":878,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["undefined",{"_index":460,"title":{},"body":{"classes/Stage.html":{},"classes/Team.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["unique",{"_index":492,"title":{},"body":{"classes/Team.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["unknown",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{}}}],["unlicensed",{"_index":1298,"title":{},"body":{"properties.html":{}}}],["upcoming",{"_index":778,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["update",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["update(@param('id",{"_index":628,"title":{},"body":{"controllers/TeamsController.html":{}}}],["update(@req",{"_index":1105,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":588,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["update(req",{"_index":1073,"title":{},"body":{"controllers/UsersController.html":{}}}],["updated",{"_index":783,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["updateone",{"_index":679,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["updaterefreshtoken",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterefreshtoken(userid",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["updates",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{}}}],["updateself",{"_index":1125,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateself(username",{"_index":1154,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateselfdto",{"_index":1074,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateteamdto",{"_index":589,"title":{"classes/UpdateTeamDto.html":{}},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/UpdateTeamDto.html":{},"coverage.html":{}}}],["updatetournamentdto",{"_index":753,"title":{"classes/UpdateTournamentDto.html":{}},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTournamentDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":992,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updating",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["uri",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{}}}],["usefactory",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@delete('kick/:tournamentid",{"_index":785,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["useguards(accesstokenguard)@delete('msg/:index",{"_index":1049,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@get('logout",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(accesstokenguard)@get('me",{"_index":1053,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@get('removeinvite/:username",{"_index":574,"title":{},"body":{"controllers/TeamsController.html":{}}}],["useguards(accesstokenguard)@get('removeuser/:username",{"_index":580,"title":{},"body":{"controllers/TeamsController.html":{}}}],["useguards(accesstokenguard)@patch(':id",{"_index":590,"title":{},"body":{"controllers/TeamsController.html":{}}}],["useguards(accesstokenguard)@patch('description/:tournamentid",{"_index":754,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["useguards(accesstokenguard)@patch('leaveteam",{"_index":1065,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@patch('match/:tournamentid",{"_index":791,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["useguards(accesstokenguard)@patch('me",{"_index":1075,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@patch('start/:tournamentid",{"_index":796,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["useguards(accesstokenguard)@post",{"_index":556,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{}}}],["useguards(accesstokenguard)@post('handleinvite",{"_index":1061,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@post('invite",{"_index":569,"title":{},"body":{"controllers/TeamsController.html":{}}}],["useguards(accesstokenguard)@post('join/:tournamentid",{"_index":781,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["useguards(refreshtokenguard",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshtokenguard)@post('refresh",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":102,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["user.currentteam",{"_index":610,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserUpdateSelfDto.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/InviteUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:13",{"_index":386,"title":{},"body":{"classes/InviteUserDto.html":{}}}],["user.dto.ts:20",{"_index":371,"title":{},"body":{"classes/DetailsDto.html":{}}}],["user.dto.ts:24",{"_index":370,"title":{},"body":{"classes/DetailsDto.html":{}}}],["user.dto.ts:28",{"_index":369,"title":{},"body":{"classes/DetailsDto.html":{}}}],["user.dto.ts:32",{"_index":368,"title":{},"body":{"classes/DetailsDto.html":{}}}],["user.dto.ts:36",{"_index":375,"title":{},"body":{"classes/DetailsDto.html":{}}}],["user.dto.ts:40",{"_index":373,"title":{},"body":{"classes/DetailsDto.html":{}}}],["user.dto.ts:47",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:52",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:57",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:61",{"_index":334,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:65",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:69",{"_index":336,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:73",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":387,"title":{},"body":{"classes/InviteUserDto.html":{}}}],["user.dto.ts:80",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.inbox.length",{"_index":1165,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.name",{"_index":1119,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.refreshtoken",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.save",{"_index":1186,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.toobject",{"_index":1095,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.updateone",{"_index":684,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["user.username",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["userdetails",{"_index":999,"title":{"classes/UserDetails.html":{}},"body":{"classes/User.html":{},"classes/UserDetails.html":{},"coverage.html":{}}}],["userdocument",{"_index":1009,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["userexists",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["userinvites",{"_index":707,"title":{},"body":{"injectables/TeamsService.html":{}}}],["userinvites.includes(team.tag",{"_index":711,"title":{},"body":{"injectables/TeamsService.html":{}}}],["usermodel",{"_index":1129,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/InviteUserDto.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userroles",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["userroles.organizer",{"_index":890,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["userroles.player",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":1040,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1118,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1079,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/create",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/schemas/user.schema",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"classes/Team.html":{},"injectables/TournamentsService.html":{}}}],["users/users.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{}}}],["users/users.service",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{}}}],["userschema",{"_index":1012,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1038,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{}}}],["usersinvitedbyteam",{"_index":709,"title":{},"body":{"injectables/TeamsService.html":{}}}],["usersinvitedbyteam.includes(user.username",{"_index":712,"title":{},"body":{"injectables/TeamsService.html":{}}}],["usersmodule",{"_index":64,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":193,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdateselfdto",{"_index":1032,"title":{"injectables/UserUpdateSelfDto.html":{}},"body":{"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["using",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["validate",{"_index":22,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["validate(payload",{"_index":33,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validate(req",{"_index":430,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validatenested",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/UserUpdateSelfDto.html":{}}}],["validator",{"_index":175,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/MatchResultDto.html":{},"injectables/UserUpdateSelfDto.html":{},"dependencies.html":{}}}],["value",{"_index":1247,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1197,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1262,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":1295,"title":{},"body":{"properties.html":{}}}],["virtuals",{"_index":503,"title":{},"body":{"classes/Team.html":{}}}],["void",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["watch",{"_index":1283,"title":{},"body":{"index.html":{}}}],["whole",{"_index":920,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["win",{"_index":967,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["winner",{"_index":397,"title":{},"body":{"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["winners",{"_index":925,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["winnerteam",{"_index":955,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["winnerteam.events.push",{"_index":960,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["winnerteam.history.push",{"_index":965,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["winnerteam.save",{"_index":974,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["winnerteam.tag",{"_index":969,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["won",{"_index":962,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["yes",{"_index":1141,"title":{},"body":{"injectables/UsersService.html":{}}}],["zoom",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/accessToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AccessTokenGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/accessToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/accessToken.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/accessToken.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ntype JwtPayload = {\n  sub: string;\n  email: string;\n};\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(private config: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('JWT_ACCESS_SECRET'),\n    });\n  }\n\n  validate(payload: JwtPayload) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTeamsModule\n\nTeamsModule\n\nAppModule -->\n\nTeamsModule->AppModule\n\n\n\n\n\nTournamentsModule\n\nTournamentsModule\n\nAppModule -->\n\nTournamentsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TeamsModule\n                        \n                        \n                            TournamentsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TeamsModule } from './teams/teams.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TournamentsModule } from './tournaments/tournaments.module';\n\n@Module({\n  imports: [\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (config: ConfigService) => ({\n        uri: config.get('MONGODB_URI'),\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    TeamsModule,\n    TournamentsModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller for AuthModule with all the endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logout\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                signin\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:48\n                \n            \n\n\n            \n                \n                    Allows user to logout\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Extracting user object from request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \nrefreshTokens(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshTokenGuard)@Post('refresh')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:58\n                \n            \n\n\n            \n                \n                    Refreshes user's AccessToken using RefreshToken\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signin\n                        \n                    \n                \n            \n            \n                \nsignin(authDto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:38\n                \n            \n\n\n            \n                \n                    Allows user to log in\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        JWT Tokens\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:28\n                \n            \n\n\n            \n                \n                    Endpoint used to create new user account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        JWT tokens\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Req, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport { AuthDto } from './dto/auth.dto';\nimport { Request } from 'express';\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard';\nimport { RefreshTokenGuard } from '../common/guards/refreshToken.guard';\nimport { ApiTags } from '@nestjs/swagger';\n\n/**\n * Controller for AuthModule with all the endpoints\n */\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  /**\n   * Injecting service\n   * @param authService {AuthService}\n   */\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * Endpoint used to create new user account\n   * @param createUserDto\n   * @returns JWT tokens\n   */\n  @Post('signup')\n  signup(@Body() createUserDto: CreateUserDto) {\n    return this.authService.signUp(createUserDto);\n  }\n\n  /**\n   * Allows user to log in\n   * @param authDto\n   * @returns JWT Tokens\n   */\n  @Post('signin')\n  signin(@Body() authDto: AuthDto) {\n    return this.authService.signIn(authDto);\n  }\n\n  /**\n   * Allows user to logout\n   * @param req Extracting user object from request\n   */\n  @UseGuards(AccessTokenGuard)\n  @Get('logout')\n  logout(@Req() req: Request) {\n    this.authService.logout(req.user['sub']);\n  }\n\n  /**\n   * Refreshes user's AccessToken using RefreshToken\n   * @param req\n   */\n  @UseGuards(RefreshTokenGuard)\n  @Post('refresh')\n  refreshTokens(@Req() req: Request) {\n    const username = req.user['username'];\n    const refreshToken = req.user['refreshToken'];\n    return this.authService.refreshTokens(username, refreshToken);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RefreshTokenStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AccessTokenStrategy } from './strategies/accessToken.strategy';\nimport { RefreshTokenStrategy } from './strategies/refreshToken.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService, AccessTokenStrategy, RefreshTokenStrategy],\n  imports: [JwtModule.register({}), ConfigModule.forRoot(), UsersModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for AuthModule\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                updateRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            Injecting required services\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, username: string, role: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:116\n                \n            \n\n\n            \n                \n                    Generates both tokens for user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        accessToken\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:92\n                \n            \n\n\n            \n                \n                    Logout method\nSets user refreshToken to NULL\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(username: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:153\n                \n            \n\n\n            \n                \n                    Updates user's access Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        tokens\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:66\n                \n            \n\n\n            \n                \n                    Sign in method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        tokens\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:32\n                \n            \n\n\n            \n                \n                    Creates new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        refreshToken\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:102\n                \n            \n\n\n            \n                \n                    Function used to hash a refresh token and update it in user's document\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport * as argon2 from 'argon2';\nimport { AuthDto } from './dto/auth.dto';\nimport { UserRoles } from '../users/schemas/user.schema';\n\n/**\n * Service for AuthModule\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Injecting required services\n   * @param userService\n   * @param jwtService\n   * @param configService\n   */\n  constructor(\n    private userService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService,\n  ) {}\n\n  /**\n   * Creates new user\n   * @param {CreateUserDto} createUserDto\n   * @returns {Tokens} refreshToken\n   */\n  async signUp(createUserDto: CreateUserDto) {\n    //Checking if user exists\n    const userExists = await this.userService.findByUsername(\n      createUserDto.username,\n    );\n    if (userExists) {\n      throw new BadRequestException('User already exists');\n    }\n\n    //hashing password with argon\n    const hash = await argon2.hash(createUserDto.password);\n    console.log(createUserDto);\n    const newUser = await this.userService.create({\n      ...createUserDto,\n      password: hash,\n      role: UserRoles.PLAYER,\n      currentTeam: null,\n    });\n\n    //generating tokens for client\n    const tokens = await this.getTokens(\n      newUser._id,\n      newUser.username,\n      newUser.role,\n    );\n    await this.updateRefreshToken(newUser._id, tokens.refreshToken);\n    return tokens;\n  }\n\n  /**\n   * Sign in method\n   * @param {AuthDto} authDto\n   * @return{Tokens} tokens\n   */\n  async signIn(authDto: AuthDto) {\n    //Checking if user exists\n    const user = await this.userService.findByUsername(authDto.username);\n    if (!user) throw new BadRequestException('User does not exists');\n\n    //Checking if the password matches\n    const passwordMatches = await argon2.verify(\n      user.password,\n      authDto.password,\n    );\n    if (!passwordMatches)\n      throw new BadRequestException('Username or password is incorrect');\n\n    //generating tokens for client\n    const tokens = await this.getTokens(user._id, user.username, user.role);\n\n    //updating the user's refresh token\n    await this.updateRefreshToken(user._id, tokens.refreshToken);\n    return tokens;\n  }\n\n  /**\n   * Logout method\n   * Sets user refreshToken to NULL\n   * @param {string} userId\n   */\n  async logout(userId: string) {\n    //Sets refresh token to NULL\n    return await this.userService.update(userId, { refreshToken: null });\n  }\n\n  /**\n   * Function used to hash a refresh token and update it in user's document\n   * @param {string} userId\n   * @param {string} refreshToken\n   */\n  async updateRefreshToken(userId: string, refreshToken: string) {\n    const hashedRefreshedToken = await argon2.hash(refreshToken);\n    await this.userService.update(userId, {\n      refreshToken: hashedRefreshedToken,\n    });\n  }\n\n  /**\n   * Generates both tokens for user\n   * @param userId\n   * @param username\n   * @return{string} accessToken\n   * @return{string} refreshToken\n   */\n  async getTokens(userId: string, username: string, role: string) {\n    const [accessToken, refreshToken] = await Promise.all([\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username,\n          role,\n        },\n        {\n          secret: this.configService.get('JWT_ACCESS_SECRET'),\n          expiresIn: '30min',\n        },\n      ),\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username,\n          role,\n        },\n        {\n          secret: this.configService.get('JWT_REFRESH_SECRET'),\n          expiresIn: '30d',\n        },\n      ),\n    ]);\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  /**\n   * Updates user's access Token\n   * @param username\n   * @param refreshToken\n   * @return{Tokens} tokens\n   */\n  async refreshTokens(username: string, refreshToken: string) {\n    const user = await this.userService.findByUsername(username);\n    if (!user || !user.refreshToken)\n      throw new BadRequestException('Access Denied');\n\n    //Checks if refreshToken from request matches one from document\n    const refreshTokenMatches = await argon2.verify(\n      user.refreshToken,\n      refreshToken,\n    );\n    if (!refreshTokenMatches) throw new BadRequestException('Access Denied');\n\n    const tokens = await this.getTokens(user._id, user.username, user.role);\n    await this.updateRefreshToken(user._id, tokens.refreshToken);\n    return tokens;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTeamDto.html":{"url":"classes/CreateTeamDto.html","title":"class - CreateTeamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTeamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/dto/create-team.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                icon\n                            \n                            \n                                name\n                            \n                            \n                                owner\n                            \n                            \n                                tag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/dto/create-team.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/dto/create-team.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/dto/create-team.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/dto/create-team.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()@Length(4, 4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/dto/create-team.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Length,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateTeamDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty()\n  @IsString()\n  icon: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @Length(4, 4)\n  tag: string;\n\n  @IsString()\n  @IsNotEmpty()\n  owner: string;\n\n  @IsString()\n  color: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTournamentDto.html":{"url":"classes/CreateTournamentDto.html","title":"class - CreateTournamentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTournamentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/dto/create-tournament.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                nrOfTeams\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/create-tournament.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nrOfTeams\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsIn(['8', '16', '32', '4', '64'])@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/create-tournament.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/create-tournament.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsEmpty,\n  IsIn,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n} from 'class-validator';\n\nexport class CreateTournamentDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsIn([8, 16, 32, 4, 64])\n  @IsNotEmpty()\n  nrOfTeams: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                currentTeam\n                            \n                            \n                                    Optional\n                                details\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                role\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentTeam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DetailsDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: DetailsDto})@IsOptional()@IsDefined()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@IsEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@IsEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsDefined,\n  IsEmail,\n  IsEmpty,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { UserRoles } from '../schemas/user.schema';\nimport { Type } from 'class-transformer';\nimport { ApiHideProperty, ApiProduces, ApiProperty } from '@nestjs/swagger';\nimport { PlayerRoles } from '../schemas/user-details';\n\nexport class DetailsDto {\n  @IsOptional()\n  @IsString()\n  firstname: string;\n\n  @IsOptional()\n  @IsString()\n  country: string;\n\n  @IsOptional()\n  @IsString()\n  avatar: string;\n\n  @IsOptional()\n  @IsString()\n  about: string;\n\n  @IsOptional()\n  @IsEnum(PlayerRoles, { each: true })\n  preferredRoles: PlayerRoles[];\n\n  @IsOptional()\n  @IsBoolean()\n  lookingForTeam: boolean;\n}\n\nexport class CreateUserDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty()\n  @IsString()\n  avatar: string;\n\n  @ApiHideProperty()\n  @IsEmpty()\n  refreshToken: string;\n\n  @ApiProperty()\n  @IsEmpty()\n  currentTeam: string;\n\n  @ApiHideProperty()\n  @IsEmpty()\n  role: UserRoles;\n\n  @ApiProperty({ type: DetailsDto })\n  @IsOptional()\n  @IsDefined()\n  @Type(() => DetailsDto)\n  @ValidateNested()\n  details?: DetailsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DetailsDto.html":{"url":"classes/DetailsDto.html","title":"class - DetailsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DetailsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                about\n                            \n                            \n                                avatar\n                            \n                            \n                                country\n                            \n                            \n                                firstname\n                            \n                            \n                                lookingForTeam\n                            \n                            \n                                preferredRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        about\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lookingForTeam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        preferredRoles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlayerRoles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(PlayerRoles, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsDefined,\n  IsEmail,\n  IsEmpty,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { UserRoles } from '../schemas/user.schema';\nimport { Type } from 'class-transformer';\nimport { ApiHideProperty, ApiProduces, ApiProperty } from '@nestjs/swagger';\nimport { PlayerRoles } from '../schemas/user-details';\n\nexport class DetailsDto {\n  @IsOptional()\n  @IsString()\n  firstname: string;\n\n  @IsOptional()\n  @IsString()\n  country: string;\n\n  @IsOptional()\n  @IsString()\n  avatar: string;\n\n  @IsOptional()\n  @IsString()\n  about: string;\n\n  @IsOptional()\n  @IsEnum(PlayerRoles, { each: true })\n  preferredRoles: PlayerRoles[];\n\n  @IsOptional()\n  @IsBoolean()\n  lookingForTeam: boolean;\n}\n\nexport class CreateUserDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty()\n  @IsString()\n  avatar: string;\n\n  @ApiHideProperty()\n  @IsEmpty()\n  refreshToken: string;\n\n  @ApiProperty()\n  @IsEmpty()\n  currentTeam: string;\n\n  @ApiHideProperty()\n  @IsEmpty()\n  role: UserRoles;\n\n  @ApiProperty({ type: DetailsDto })\n  @IsOptional()\n  @IsDefined()\n  @Type(() => DetailsDto)\n  @ValidateNested()\n  details?: DetailsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HandleInviteDto.html":{"url":"classes/HandleInviteDto.html","title":"class - HandleInviteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HandleInviteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/handle-invite.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                decision\n                            \n                            \n                                teamtag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        decision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/handle-invite.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        teamtag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/handle-invite.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class HandleInviteDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  teamtag: string;\n\n  @ApiProperty()\n  @IsBoolean()\n  @IsNotEmpty()\n  decision: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InviteUserDto.html":{"url":"classes/InviteUserDto.html","title":"class - InviteUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InviteUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/dto/invite-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                teamtag\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        teamtag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/dto/invite-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/dto/invite-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class InviteUserDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  teamtag: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KickFromTournamentDto.html":{"url":"classes/KickFromTournamentDto.html","title":"class - KickFromTournamentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KickFromTournamentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/dto/kick-from-tournament.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                teamtag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        teamtag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/kick-from-tournament.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class KickFromTournamentDto {\n  @IsString()\n  @IsNotEmpty()\n  teamtag: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Match.html":{"url":"classes/Match.html","title":"class - Match","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Match\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/schemas/match.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                finished\n                            \n                            \n                                result\n                            \n                            \n                                teamA\n                            \n                            \n                                teamB\n                            \n                            \n                                winner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        finished\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/match.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/match.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        teamA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, ref: 'Team'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/match.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        teamB\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, ref: 'Team'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/match.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        winner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, ref: 'Team'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/match.schema.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type MatchDocument = Match & Document;\n\n@Schema()\nexport class Match {\n  @Prop({ type: String, ref: 'Team' })\n  teamA: string;\n\n  @Prop({ type: String, ref: 'Team' })\n  teamB: string;\n\n  @Prop({ type: String, ref: 'Team' })\n  winner: string;\n\n  @Prop()\n  result: string;\n\n  @Prop()\n  finished: boolean;\n}\n\nconst MatchSchema = SchemaFactory.createForClass(Match);\n\nexport { MatchSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MatchInterface.html":{"url":"interfaces/MatchInterface.html","title":"interface - MatchInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MatchInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/schemas/match.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            result\n                                        \n                                \n                                \n                                        \n                                            teamA\n                                        \n                                \n                                \n                                        \n                                            teamB\n                                        \n                                \n                                \n                                        \n                                            winner\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        result:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        teamA\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        teamA:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        teamB\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        teamB:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        winner\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        winner:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MatchInterface {\n  teamA: string;\n\n  teamB: string;\n\n  winner: string;\n\n  result: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatchResultDto.html":{"url":"classes/MatchResultDto.html","title":"class - MatchResultDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatchResultDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/dto/match-result.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                matchId\n                            \n                            \n                                result\n                            \n                            \n                                stageNr\n                            \n                            \n                                winner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        matchId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/match-result.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/match-result.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stageNr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/match-result.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        winner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/match-result.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class MatchResultDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  matchId: string;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsNotEmpty()\n  stageNr: number;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  winner: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  result: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/refreshToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshTokenGuard extends AuthGuard('jwt-refresh') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/refreshToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/refreshToken.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/refreshToken.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private config: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromBodyField('refreshToken'),\n      secretOrKey: config.get('JWT_REFRESH_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  validate(req: Request, payload: any) {\n    const refreshToken = req.body.refreshToken;\n    return { ...payload, refreshToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/roles.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const roles = this.reflector.get('roles', context.getHandler());\n    if (!roles) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    return roles.includes(user.role);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stage.html":{"url":"classes/Stage.html","title":"class - Stage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/schemas/stage.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                finished\n                            \n                            \n                                matches\n                            \n                            \n                                stageNr\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        finished\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/stage.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matches\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Match[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/stage.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stageNr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/stage.schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { Match, MatchSchema } from './match.schema';\nimport { MatchInterface } from './match.interface';\n\nexport type StageDocument = Stage & Document;\n\n@Schema({ _id: false })\nexport class Stage {\n  @Prop({ required: true })\n  finished: boolean;\n\n  @Prop({ required: true })\n  stageNr: number;\n\n  @Prop({ type: [{ type: MatchSchema }] })\n  matches: Match[];\n}\n\nconst StageSchema = SchemaFactory.createForClass(Stage);\n\nexport { StageSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StageInterface.html":{"url":"interfaces/StageInterface.html","title":"interface - StageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/schemas/stage.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            finished\n                                        \n                                \n                                \n                                        \n                                            matches\n                                        \n                                \n                                \n                                        \n                                            stageNr\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        finished\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        finished:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        matches\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        matches:         MatchInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MatchInterface[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stageNr\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stageNr:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MatchInterface } from './match.interface';\n\nexport interface StageInterface {\n  finished: boolean;\n\n  stageNr: number;\n\n  matches: MatchInterface[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Team.html":{"url":"classes/Team.html","title":"class - Team","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Team\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/schema/team.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeTournament\n                            \n                            \n                                color\n                            \n                            \n                                events\n                            \n                            \n                                history\n                            \n                            \n                                icon\n                            \n                            \n                                invitedUsernames\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                owner\n                            \n                            \n                                tag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        activeTournament\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        events\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TeamEventsInterface[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TeamHistoryInterface[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: 'mdi-account-group'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        invitedUsernames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true, minlength: 4, maxlength: 4})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\nimport { User } from '../../users/schemas/user.schema';\nimport { TeamEventsInterface, TeamHistoryInterface } from './team.interface';\nimport { TeamHistorySchema } from './team-history.schema';\nimport { TeamEventsHistorySchema } from './team-events-history.schema';\n\nexport type TeamDocument = Team & Document;\n\n/**\n * @class Team\n */\n@Schema({ timestamps: true, toObject: { virtuals: true, getters: true } })\nexport class Team {\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({ default: 'mdi-account-group' })\n  icon: string;\n\n  @Prop({ required: true, unique: true, minlength: 4, maxlength: 4 })\n  tag: string;\n\n  @Prop({ type: String, ref: 'User' })\n  owner: string;\n\n  @Prop({ type: [{ type: String, ref: 'User' }] })\n  members: string[];\n\n  @Prop({ type: [{ type: mongoose.Schema.Types.String, ref: 'User' }] })\n  invitedUsernames: string[];\n\n  @Prop({ default: null })\n  activeTournament: string;\n\n  @Prop({ type: [{ type: TeamEventsHistorySchema }] })\n  events: TeamEventsInterface[];\n\n  @Prop({ type: [{ type: TeamHistorySchema }] })\n  history: TeamHistoryInterface[];\n\n  @Prop({ type: String })\n  color: string;\n}\n\nconst TeamSchema = SchemaFactory.createForClass(Team);\n\nTeamSchema.virtual('invitedUsers', {\n  type: 'String',\n  ref: 'User',\n  localField: 'invitedUsernames',\n  foreignField: 'username',\n});\n\nexport { TeamSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TeamEventsHistory.html":{"url":"classes/TeamEventsHistory.html","title":"class - TeamEventsHistory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TeamEventsHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/schema/team-events-history.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                msg\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team-events-history.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        msg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team-events-history.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, types: EventEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team-events-history.schema.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport enum EventEnum {\n  CREATED = 'CREATED',\n  JOINED = 'JOINED',\n\n  TOURNAMENT_WIN = 'TOURNAMENT_WIN',\n\n  TOURNAMENT_DROPPED = 'TOURNAMENT_DROPPED',\n\n  LEFT = 'LEFT',\n}\n\n@Schema({ _id: false })\nexport class TeamEventsHistory extends Document {\n  @Prop({ required: true, types: EventEnum })\n  type: EventEnum;\n\n  @Prop()\n  date: Date;\n\n  @Prop()\n  msg: string;\n}\n\nexport const TeamEventsHistorySchema =\n  SchemaFactory.createForClass(TeamEventsHistory);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TeamEventsInterface.html":{"url":"interfaces/TeamEventsInterface.html","title":"interface - TeamEventsInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TeamEventsInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/schema/team.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            msg\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        msg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        msg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         EventEnum\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventEnum\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EventEnum } from './team-events-history.schema';\n\nexport interface TeamHistoryInterface {\n  matchId: string;\n  opponent: string;\n  result: string;\n  date: Date;\n}\n\nexport interface TeamEventsInterface {\n  type: EventEnum;\n\n  date: Date;\n\n  msg: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TeamHistory.html":{"url":"classes/TeamHistory.html","title":"class - TeamHistory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TeamHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/schema/team-history.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                matchId\n                            \n                            \n                                opponent\n                            \n                            \n                                result\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team-history.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matchId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team-history.schema.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        opponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team-history.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team-history.schema.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\n@Schema({ _id: false })\nexport class TeamHistory extends Document {\n  @Prop()\n  matchId: string;\n\n  @Prop({ required: true })\n  opponent: string;\n\n  @Prop({ required: true })\n  result: string;\n\n  @Prop({ required: true })\n  date: Date;\n}\n\nexport const TeamHistorySchema = SchemaFactory.createForClass(TeamHistory);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TeamHistoryInterface.html":{"url":"interfaces/TeamHistoryInterface.html","title":"interface - TeamHistoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TeamHistoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/schema/team.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            matchId\n                                        \n                                \n                                \n                                        \n                                            opponent\n                                        \n                                \n                                \n                                        \n                                            result\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        matchId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        matchId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        opponent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        opponent:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        result:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EventEnum } from './team-events-history.schema';\n\nexport interface TeamHistoryInterface {\n  matchId: string;\n  opponent: string;\n  result: string;\n  date: Date;\n}\n\nexport interface TeamEventsInterface {\n  type: EventEnum;\n\n  date: Date;\n\n  msg: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TeamsController.html":{"url":"controllers/TeamsController.html","title":"controller - TeamsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TeamsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/teams.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                teams\n            \n\n\n            \n                Description\n            \n            \n                Collection of teams specific endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkIfTeamExists\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findByTag\n                            \n                            \n                                findOne\n                            \n                            \n                                inviteUserToTeam\n                            \n                            \n                                removeInvite\n                            \n                            \n                                removeUserFromTeam\n                            \n                            \n                                search\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkIfTeamExists\n                        \n                    \n                \n            \n            \n                \ncheckIfTeamExists(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('exists/:tag')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:84\n                \n            \n\n\n            \n                \n                    Checks if given team exists (used in create team page)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        exists\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req: Request, createTeamDto: CreateTeamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:47\n                \n            \n\n\n            \n                \n                    Creating new tournament\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createTeamDto\n                                    \n                                                CreateTeamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:65\n                \n            \n\n\n            \n                \n                    Returns all teams\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByTag\n                        \n                    \n                \n            \n            \n                \nfindByTag(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('tag/:tag')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:74\n                \n            \n\n\n            \n                \n                    Returns specific team by tag\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:93\n                \n            \n\n\n            \n                \n                    Returns team by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inviteUserToTeam\n                        \n                    \n                \n            \n            \n                \ninviteUserToTeam(req: Request, inviteUserDto: InviteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Post('invite')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:113\n                \n            \n\n\n            \n                \n                    Invites user to join the team\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    inviteUserDto\n                                    \n                                                InviteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeInvite\n                        \n                    \n                \n            \n            \n                \nremoveInvite(req: Request, username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('removeinvite/:username')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:146\n                \n            \n\n\n            \n                \n                    Removes pending invite\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeUserFromTeam\n                        \n                    \n                \n            \n            \n                \nremoveUserFromTeam(req: Request, username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('removeuser/:username')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:135\n                \n            \n\n\n            \n                \n                    Removes user from the team\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        search\n                        \n                    \n                \n            \n            \n                \nsearch(query: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search/:query')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:102\n                \n            \n\n\n            \n                \n                    Searches for and returns team if found\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateTeamDto: UpdateTeamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:124\n                \n            \n\n\n            \n                \n                    Updates specified by id team\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTeamDto\n                                    \n                                                UpdateTeamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Req,\n  UseGuards,\n  HttpException,\n  HttpStatus,\n  BadRequestException,\n} from '@nestjs/common';\nimport { TeamsService } from './teams.service';\nimport { CreateTeamDto } from './dto/create-team.dto';\nimport { UpdateTeamDto } from './dto/update-team.dto';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard';\nimport { InviteUserDto } from './dto/invite-user.dto';\nimport { UsersService } from '../users/users.service';\n\n/**\n * Collection of teams specific endpoints\n */\n@ApiTags('teams')\n@Controller('teams')\nexport class TeamsController {\n  /**\n   * Injecting required dependencies\n   * @param teamsService {TeamsService}\n   * @param userService {UsersService}\n   */\n  constructor(\n    private readonly teamsService: TeamsService,\n    private userService: UsersService,\n  ) {}\n\n  /**\n   * Creating new tournament\n   * @param req {Request}\n   * @param createTeamDto {CreateTeamDto}\n   */\n  @UseGuards(AccessTokenGuard)\n  @Post()\n  async create(@Req() req: Request, @Body() createTeamDto: CreateTeamDto) {\n    const user = await this.userService.findByUsername(req.user['username']);\n    if (user.username !== createTeamDto.owner) {\n      throw new BadRequestException('Usernames mismatch');\n    }\n    if (user.currentTeam !== null) {\n      throw new BadRequestException(\n        'User already in team. Leave current team first',\n      );\n    }\n\n    return this.teamsService.create(createTeamDto);\n  }\n\n  /**\n   * Returns all teams\n   */\n  @Get()\n  findAll() {\n    return this.teamsService.findAll();\n  }\n\n  /**\n   * Returns specific team by tag\n   * @param tag {String}\n   */\n  @Get('tag/:tag')\n  findByTag(@Param('tag') tag: string) {\n    return this.teamsService.findOneByTag(tag);\n  }\n\n  /**\n   * Checks if given team exists (used in create team page)\n   * @param tag {String}\n   * @return {boolean} exists\n   */\n  @Get('exists/:tag')\n  checkIfTeamExists(@Param('tag') tag: string) {\n    return this.teamsService.checkIfTeamExists(tag);\n  }\n\n  /**\n   * Returns team by id\n   * @param id {String}\n   */\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.teamsService.findOne(id);\n  }\n\n  /**\n   * Searches for and returns team if found\n   * @param query {String}\n   */\n  @Get('search/:query')\n  search(@Param('query') query: string) {\n    return this.teamsService.searchTeam(query);\n  }\n\n  /**\n   * Invites user to join the team\n   * @param req {Request}\n   * @param inviteUserDto {InviteUserDto}\n   */\n  @UseGuards(AccessTokenGuard)\n  @Post('invite')\n  inviteUserToTeam(@Req() req: Request, @Body() inviteUserDto: InviteUserDto) {\n    return this.teamsService.inviteUser(req.user['username'], inviteUserDto);\n  }\n\n  /**\n   * Updates specified by id team\n   * @param id {String}\n   * @param updateTeamDto {UpdateTeamDto}\n   */\n  @UseGuards(AccessTokenGuard)\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateTeamDto: UpdateTeamDto) {\n    return this.teamsService.update(id, updateTeamDto);\n  }\n\n  /**\n   * Removes user from the team\n   * @param req {Request}\n   * @param username {String}\n   */\n  @UseGuards(AccessTokenGuard)\n  @Get('removeuser/:username')\n  removeUserFromTeam(@Req() req: Request, @Param('username') username: string) {\n    return this.teamsService.removeUserFromTeam(req.user['username'], username);\n  }\n\n  /**\n   * Removes pending invite\n   * @param req {Request}\n   * @param username {String}\n   */\n  @UseGuards(AccessTokenGuard)\n  @Get('removeinvite/:username')\n  removeInvite(@Req() req: Request, @Param('username') username: string) {\n    return this.teamsService.removeInvite(req.user['username'], username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TeamsModule.html":{"url":"modules/TeamsModule.html","title":"module - TeamsModule","body":"\n                   \n\n\n\n\n    Modules\n    TeamsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TeamsModule\n\n\n\ncluster_TeamsModule_exports\n\n\n\ncluster_TeamsModule_providers\n\n\n\n\nTeamsService \n\nTeamsService \n\n\n\nTeamsModule\n\nTeamsModule\n\nTeamsService  -->\n\nTeamsModule->TeamsService \n\n\n\n\n\nTeamsService\n\nTeamsService\n\nTeamsModule -->\n\nTeamsService->TeamsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/teams/teams.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TeamsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TeamsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TeamsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TeamsService } from './teams.service';\nimport { TeamsController } from './teams.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Team, TeamSchema } from './schema/team.schema';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  controllers: [TeamsController],\n  providers: [TeamsService],\n  exports: [TeamsService],\n  imports: [\n    MongooseModule.forFeature([{ name: Team.name, schema: TeamSchema }]),\n    forwardRef(() => UsersModule),\n  ],\n})\nexport class TeamsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TeamsService.html":{"url":"injectables/TeamsService.html","title":"injectable - TeamsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TeamsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/teams.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkIfTeamExists\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                findOneByTag\n                            \n                            \n                                    Async\n                                inviteUser\n                            \n                            \n                                    Async\n                                removeInvite\n                            \n                            \n                                    Async\n                                removeUserFromTeam\n                            \n                            \n                                    Async\n                                searchTeam\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(teamModel: Model, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/teams/teams.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkIfTeamExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkIfTeamExists(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createTeamDto: CreateTeamDto)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTeamDto\n                                    \n                                                CreateTeamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByTag(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        inviteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    inviteUser(inviter: string, inviteUserDto: InviteUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inviter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    inviteUserDto\n                                    \n                                                InviteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInvite\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInvite(owner: string, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserFromTeam\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserFromTeam(owner: string, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchTeam\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchTeam(query: string)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateTeamDto: UpdateTeamDto)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTeamDto\n                                    \n                                                UpdateTeamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateTeamDto } from './dto/create-team.dto';\nimport { UpdateTeamDto } from './dto/update-team.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Team, TeamDocument } from './schema/team.schema';\nimport { Model } from 'mongoose';\nimport { UsersService } from '../users/users.service';\nimport { InviteUserDto } from './dto/invite-user.dto';\nimport { EventEnum } from './schema/team-events-history.schema';\n\n@Injectable()\nexport class TeamsService {\n  constructor(\n    @InjectModel(Team.name) private teamModel: Model,\n    @Inject(forwardRef(() => UsersService))\n    private userService: UsersService,\n  ) {}\n\n  async create(createTeamDto: CreateTeamDto) {\n    const user = await this.userService.findByUsername(createTeamDto.owner);\n    const team = await new this.teamModel(createTeamDto).save();\n    await team\n      .updateOne({\n        $push: {\n          events: {\n            type: EventEnum.CREATED,\n            date: Date.now(),\n          },\n        },\n      })\n      .exec();\n    await user.updateOne({ currentTeam: team.tag }).exec();\n    return team;\n  }\n\n  findAll() {\n    return this.teamModel.find({}).exec();\n  }\n\n  async findOneByTag(tag: string) {\n    const team = await this.teamModel.findOne({ tag }).exec();\n    if (!team) {\n      throw new NotFoundException();\n    }\n    return team;\n  }\n\n  findOne(id: string) {\n    return this.teamModel.findById(id).populate('owner').exec();\n  }\n\n  async searchTeam(query: string) {\n    return this.teamModel\n      .find({\n        $or: [\n          { name: new RegExp('.*' + query + '.*', 'i') },\n          { tag: new RegExp('.*' + query + '.*', 'i') },\n        ],\n      })\n      .select({ tag: 1, name: 1, icon: 1, color: 1, members: 1, owner: 1 })\n      .limit(10);\n  }\n\n  async checkIfTeamExists(tag: string) {\n    const team = await this.teamModel.findOne({ tag }).exec();\n\n    return {\n      exists: !!team,\n    };\n  }\n\n  update(id: string, updateTeamDto: UpdateTeamDto) {\n    return this.teamModel\n      .findByIdAndUpdate(id, updateTeamDto, { new: true })\n      .exec();\n  }\n\n  async removeUserFromTeam(owner: string, username: string) {\n    const team = await this.teamModel.findOne({ owner: owner });\n    const user = await this.userService.findByUsername(username);\n    if (!team || !user) {\n      throw new BadRequestException('Not Found');\n    }\n\n    if (user.currentTeam !== team.tag) {\n      throw new BadRequestException('User is not in team');\n    }\n    await team\n      .updateOne({\n        $pull: { members: user.username },\n        $push: {\n          events: {\n            type: EventEnum.LEFT,\n            date: Date.now(),\n            msg: `${user.username} left the team`,\n          },\n        },\n      })\n      .exec();\n    await user.updateOne({\n      currentTeam: null,\n      $push: {\n        inbox: `You have been removed from ${team.tag}`,\n      },\n    });\n    return team;\n  }\n\n  async inviteUser(inviter: string, inviteUserDto: InviteUserDto) {\n    const user = await this.userService.findByUsername(inviteUserDto.username);\n\n    const team = await this.teamModel.findOne({\n      tag: inviteUserDto.teamtag,\n    });\n\n    if (team.owner !== inviter) {\n      throw new BadRequestException('You are not the owner');\n    }\n\n    if (!user || !team) {\n      throw new BadRequestException('Team or User doesnt exists');\n    }\n    const userInvites = JSON.stringify(user.invitesTags);\n    const usersInvitedByTeam = JSON.stringify(team.invitedUsernames);\n\n    if (\n      userInvites.includes(team.tag) ||\n      usersInvitedByTeam.includes(user.username)\n    ) {\n      throw new BadRequestException('Already invited');\n    }\n\n    await user\n      .updateOne({\n        $push: {\n          invitesTags: team.tag,\n        },\n      })\n      .exec();\n    return await team\n      .updateOne({ $push: { invitedUsernames: user.username } }, { new: true })\n      .exec();\n  }\n\n  async removeInvite(owner: string, username: string) {\n    const team = await this.teamModel.findOne({ owner: owner });\n    const user = await this.userService.findByUsername(username);\n    if (!team || !user) {\n      throw new BadRequestException('Not Found');\n    }\n\n    const userInvites = JSON.parse(JSON.stringify(user.invitesTags));\n    const usersInvitedByTeam = JSON.parse(\n      JSON.stringify(team.invitedUsernames),\n    );\n\n    if (\n      !userInvites.includes(team.tag) ||\n      !usersInvitedByTeam.includes(user.username)\n    ) {\n      throw new BadRequestException('Not invited');\n    }\n\n    await user\n      .updateOne({\n        $pull: {\n          invitesTags: team.tag,\n        },\n      })\n      .exec();\n    return await team\n      .updateOne({ $pull: { invitedUsernames: user.username } }, { new: true })\n      .exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tournament.html":{"url":"classes/Tournament.html","title":"class - Tournament","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tournament\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/schemas/tournament.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                finished\n                            \n                            \n                                nrOfTeams\n                            \n                            \n                                organizer\n                            \n                            \n                                participants\n                            \n                            \n                                slug\n                            \n                            \n                                stages\n                            \n                            \n                                started\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        finished\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nrOfTeams\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        organizer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: String, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        participants\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Stage[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        started\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { Stage, StageSchema } from './stage.schema';\n\nexport type TournamentDocument = Tournament & Document;\n\n@Schema({ timestamps: true })\nexport class Tournament {\n  @Prop({ required: true })\n  title: string;\n\n  @Prop({ required: true, unique: true })\n  slug: string;\n\n  @Prop({ required: true })\n  nrOfTeams: number;\n\n  @Prop({ required: true, default: false })\n  started: boolean;\n\n  @Prop({ required: true, default: false })\n  finished: boolean;\n\n  @Prop()\n  description: string;\n\n  @Prop({ required: true, type: String, ref: 'User' })\n  organizer: string;\n\n  @Prop({ type: [{ type: String, ref: 'Team' }] })\n  participants: string[];\n\n  @Prop({ type: [{ type: StageSchema }] })\n  stages: Stage[];\n}\n\nconst TournamentSchema = SchemaFactory.createForClass(Tournament);\n\nexport { TournamentSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TournamentsController.html":{"url":"controllers/TournamentsController.html","title":"controller - TournamentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TournamentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/tournaments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tournaments\n            \n\n\n            \n                Description\n            \n            \n                Collection of Tournaments Module endpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changeDescription\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findBySlug\n                            \n                            \n                                    Async\n                                getFinishedTournament\n                            \n                            \n                                    Async\n                                getNewestTournament\n                            \n                            \n                                    Async\n                                getTeamMatches\n                            \n                            \n                                    Async\n                                joinTournaments\n                            \n                            \n                                    Async\n                                kickFromTournament\n                            \n                            \n                                    Async\n                                searchByQuery\n                            \n                            \n                                    Async\n                                setMatchResult\n                            \n                            \n                                    Async\n                                startTournament\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changeDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeDescription(req: Request, tournamentid: string, updateTournamentDto: UpdateTournamentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('description/:tournamentid')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:105\n                \n            \n\n\n            \n                \n                    Let's organizer change the tournament description\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTournamentDto\n                                    \n                                                UpdateTournamentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req: Request, createTournamentDto: CreateTournamentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:41\n                \n            \n\n\n            \n                \n                    Creates new tournament\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nlogged user\n\n\n                                    \n                                \n                                \n                                    createTournamentDto\n                                    \n                                                CreateTournamentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nbasic info about tournaments\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        new Tournament document\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:141\n                \n            \n\n\n            \n                \n                    Returns all existing tournaments\n\n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:159\n                \n            \n\n\n            \n                \n                    Returns specific tournament by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySlug(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('slug/:slug')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:150\n                \n            \n\n\n            \n                \n                    Returns specific tournament by slug\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFinishedTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFinishedTournament()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('finished')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:185\n                \n            \n\n\n            \n                \n                    Returns just finished tournament\n\n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNewestTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNewestTournament()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('new')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:177\n                \n            \n\n\n            \n                \n                    Returns newest tournament\n\n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTeamMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTeamMatches(id: string, tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/team/:tag')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:169\n                \n            \n\n\n            \n                \n                    Returns team's upcoming matches in the tournament\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ntournament's id\n\n\n                                    \n                                \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nteam's tag\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        joinTournaments\n                        \n                    \n                \n            \n            \n                \n                    \n                    joinTournaments(req: Request, tournamentid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Post('join/:tournamentid')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:56\n                \n            \n\n\n            \n                \n                    Allows team owner join a specified tournament\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nlogged user\n\n\n                                    \n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ntournament id\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        updated tournament document\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        kickFromTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    kickFromTournament(req: Request, tournamentid: string, kickFromTournamentDto: KickFromTournamentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Delete('kick/:tournamentid')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:71\n                \n            \n\n\n            \n                \n                    Allows organizer to kick team from the tournament\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    kickFromTournamentDto\n                                    \n                                                KickFromTournamentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchByQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchByQuery(query: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search/:query')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:194\n                \n            \n\n\n            \n                \n                    Searches for tournament\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setMatchResult\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMatchResult(req: Request, matchResultDto: MatchResultDto, tournamentid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('match/:tournamentid')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:125\n                \n            \n\n\n            \n                \n                    Allows to set match result and pick a winner\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    matchResultDto\n                                    \n                                                MatchResultDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        startTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    startTournament(req: Request, tournamentid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('start/:tournamentid')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:90\n                \n            \n\n\n            \n                \n                    Starts tournament (seeding brackets)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Req,\n} from '@nestjs/common';\nimport { TournamentsService } from './tournaments.service';\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard';\nimport { Request } from 'express';\nimport { CreateTournamentDto } from './dto/create-tournament.dto';\nimport { ApiTags } from '@nestjs/swagger';\nimport { MatchResultDto } from './dto/match-result.dto';\nimport { UpdateTournamentDto } from './dto/update-tournament.dto';\nimport { KickFromTournamentDto } from './dto/kick-from-tournament.dto';\n\n/**\n * Collection of Tournaments Module endpoints\n */\n@ApiTags('tournaments')\n@Controller('tournaments')\nexport class TournamentsController {\n  /**\n   * Injects service\n   * @param tournamentsService {TournamentsService}\n   */\n  constructor(private readonly tournamentsService: TournamentsService) {}\n\n  /**\n   * Creates new tournament\n   * @param req - logged user\n   * @param createTournamentDto - basic info about tournaments\n   * @returns {Tournament} new Tournament document\n   */\n  @UseGuards(AccessTokenGuard)\n  @Post()\n  async create(\n    @Req() req: Request,\n    @Body() createTournamentDto: CreateTournamentDto,\n  ) {\n    return this.tournamentsService.create(req['user'], createTournamentDto);\n  }\n\n  /**\n   * Allows team owner join a specified tournament\n   * @param req - logged user\n   * @param tournamentid {String} - tournament id\n   * @returns {Tournament} updated tournament document\n   */\n  @UseGuards(AccessTokenGuard)\n  @Post('join/:tournamentid')\n  async joinTournaments(\n    @Req() req: Request,\n    @Param('tournamentid') tournamentid: string,\n  ) {\n    return this.tournamentsService.joinTournament(req['user'], tournamentid);\n  }\n\n  /**\n   * Allows organizer to kick team from the tournament\n   * @param req {Request}\n   * @param tournamentid {Number}\n   * @param kickFromTournamentDto {KickFromTournamentDto}\n   */\n  @UseGuards(AccessTokenGuard)\n  @Delete('kick/:tournamentid')\n  async kickFromTournament(\n    @Req() req: Request,\n    @Param('tournamentid') tournamentid: string,\n    @Body() kickFromTournamentDto: KickFromTournamentDto,\n  ) {\n    return await this.tournamentsService.kickFromTournament(\n      req['user']['username'],\n      tournamentid,\n      kickFromTournamentDto,\n    );\n  }\n\n  /**\n   * Starts tournament (seeding brackets)\n   * @param req {Request}\n   * @param tournamentid {String}\n   */\n  @UseGuards(AccessTokenGuard)\n  @Patch('start/:tournamentid')\n  async startTournament(\n    @Req() req: Request,\n    @Param('tournamentid') tournamentid: string,\n  ) {\n    return this.tournamentsService.startTournament(req['user'], tournamentid);\n  }\n\n  /**\n   * Let's organizer change the tournament description\n   * @param req {Request}\n   * @param tournamentid {String}\n   * @param updateTournamentDto {UpdateTournamentDto}\n   */\n  @UseGuards(AccessTokenGuard)\n  @Patch('description/:tournamentid')\n  async changeDescription(\n    @Req() req: Request,\n    @Param('tournamentid') tournamentid: string,\n    @Body() updateTournamentDto: UpdateTournamentDto,\n  ) {\n    return this.tournamentsService.changeDescription(\n      req['user'],\n      tournamentid,\n      updateTournamentDto,\n    );\n  }\n\n  /**\n   * Allows to set match result and pick a winner\n   * @param req {Request}\n   * @param matchResultDto {MatchResultDto}\n   * @param tournamentid {string}\n   */\n  @UseGuards(AccessTokenGuard)\n  @Patch('match/:tournamentid')\n  async setMatchResult(\n    @Req() req: Request,\n    @Body() matchResultDto: MatchResultDto,\n    @Param('tournamentid') tournamentid: string,\n  ) {\n    return this.tournamentsService.setMatchResult(\n      tournamentid,\n      req['user'],\n      matchResultDto,\n    );\n  }\n\n  /**\n   * Returns all existing tournaments\n   */\n  @Get()\n  async findAll() {\n    return await this.tournamentsService.findAll();\n  }\n\n  /**\n   * Returns specific tournament by slug\n   * @param slug {String}\n   */\n  @Get('slug/:slug')\n  async findBySlug(@Param('slug') slug: string) {\n    return await this.tournamentsService.findTournamentBySlug(slug);\n  }\n\n  /**\n   * Returns specific tournament by id\n   * @param id {String}\n   */\n  @Get('/id/:id')\n  async findById(@Param('id') id: string) {\n    return await this.tournamentsService.findTournamentById(id);\n  }\n\n  /**\n   * Returns team's upcoming matches in the tournament\n   * @param id {String} - tournament's id\n   * @param tag {String} - team's tag\n   */\n  @Get('/:id/team/:tag')\n  async getTeamMatches(@Param('id') id: string, @Param('tag') tag: string) {\n    return await this.tournamentsService.getTeamMatches(id, tag);\n  }\n\n  /**\n   * Returns newest tournament\n   */\n  @Get('new')\n  async getNewestTournament() {\n    return await this.tournamentsService.getNewestTournament();\n  }\n\n  /**\n   * Returns just finished tournament\n   */\n  @Get('finished')\n  async getFinishedTournament() {\n    return await this.tournamentsService.getFinishedTournament();\n  }\n\n  /**\n   * Searches for tournament\n   * @param query {String}\n   */\n  @Get('search/:query')\n  async searchByQuery(@Param('query') query: string) {\n    return await this.tournamentsService.searchTournament(query);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TournamentsModule.html":{"url":"modules/TournamentsModule.html","title":"module - TournamentsModule","body":"\n                   \n\n\n\n\n    Modules\n    TournamentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TournamentsModule\n\n\n\ncluster_TournamentsModule_providers\n\n\n\ncluster_TournamentsModule_exports\n\n\n\ncluster_TournamentsModule_imports\n\n\n\n\nTeamsModule\n\nTeamsModule\n\n\n\nTournamentsModule\n\nTournamentsModule\n\nTournamentsModule -->\n\nTeamsModule->TournamentsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nTournamentsModule -->\n\nUsersModule->TournamentsModule\n\n\n\n\n\nTournamentsService \n\nTournamentsService \n\nTournamentsService  -->\n\nTournamentsModule->TournamentsService \n\n\n\n\n\nTournamentsService\n\nTournamentsService\n\nTournamentsModule -->\n\nTournamentsService->TournamentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tournaments/tournaments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TournamentsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TournamentsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TeamsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TournamentsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TournamentsService } from './tournaments.service';\nimport { TournamentsController } from './tournaments.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Tournament, TournamentSchema } from './schemas/tournament.schema';\nimport { UsersModule } from '../users/users.module';\nimport { TeamsModule } from '../teams/teams.module';\nimport { Match, MatchSchema } from './schemas/match.schema';\nimport { Stage, StageSchema } from './schemas/stage.schema';\n\n@Module({\n  controllers: [TournamentsController],\n  providers: [TournamentsService],\n  imports: [\n    MongooseModule.forFeature([\n      { name: Tournament.name, schema: TournamentSchema },\n    ]),\n\n    UsersModule,\n    TeamsModule,\n  ],\n  exports: [TournamentsService],\n})\nexport class TournamentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TournamentsService.html":{"url":"injectables/TournamentsService.html","title":"injectable - TournamentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TournamentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/tournaments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changeDescription\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findTournamentById\n                            \n                            \n                                    Async\n                                findTournamentBySlug\n                            \n                            \n                                    Async\n                                getFinishedTournament\n                            \n                            \n                                    Async\n                                getNewestTournament\n                            \n                            \n                                    Async\n                                getTeamMatches\n                            \n                            \n                                    Async\n                                joinTournament\n                            \n                            \n                                    Async\n                                kickFromTournament\n                            \n                            \n                                    Async\n                                searchTournament\n                            \n                            \n                                    Async\n                                setMatchResult\n                            \n                            \n                                    Async\n                                startTournament\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tournamentModel: Model, userService: UsersService, teamsService: TeamsService)\n                    \n                \n                        \n                            \n                                Defined in src/tournaments/tournaments.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tournamentModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamsService\n                                                  \n                                                        \n                                                                        TeamsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changeDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeDescription(organizer: Express.User, tournamentid: string, updateTournamentDto: UpdateTournamentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:369\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    organizer\n                                    \n                                                Express.User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTournamentDto\n                                    \n                                                UpdateTournamentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: Express.User, createTournamentDto: CreateTournamentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Express.User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createTournamentDto\n                                    \n                                                CreateTournamentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTournamentById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTournamentById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTournamentBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTournamentBySlug(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFinishedTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFinishedTournament()\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:395\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNewestTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNewestTournament()\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:392\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTeamMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTeamMatches(id: string, tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:329\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        joinTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    joinTournament(user: Express.User, tournamentid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Express.User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        kickFromTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    kickFromTournament(organizer: string, tournamentId: string, kickFromTournamentDto: KickFromTournamentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    organizer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    kickFromTournamentDto\n                                    \n                                                KickFromTournamentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchTournament(query: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:402\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setMatchResult\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMatchResult(tournamentid: string, organizer: Express.User, matchResultDto: MatchResultDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    organizer\n                                    \n                                                Express.User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    matchResultDto\n                                    \n                                                MatchResultDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        startTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    startTournament(organizer: Express.User, tournamentid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    organizer\n                                    \n                                                Express.User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpCode,\n  HttpStatus,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { CreateTournamentDto } from './dto/create-tournament.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Tournament, TournamentDocument } from './schemas/tournament.schema';\nimport { UsersService } from '../users/users.service';\nimport { TeamsService } from '../teams/teams.service';\nimport { UserRoles } from '../users/schemas/user.schema';\nimport { MatchResultDto } from './dto/match-result.dto';\nimport slugify from 'slugify';\nimport { UpdateTournamentDto } from './dto/update-tournament.dto';\nimport { EventEnum } from '../teams/schema/team-events-history.schema';\nimport { KickFromTournamentDto } from './dto/kick-from-tournament.dto';\n\n@Injectable()\nexport class TournamentsService {\n  constructor(\n    @InjectModel(Tournament.name)\n    private tournamentModel: Model,\n\n    private userService: UsersService,\n    private teamsService: TeamsService,\n  ) {}\n  async create(user: Express.User, createTournamentDto: CreateTournamentDto) {\n    const organizer = await this.userService.findByUsername(user['username']);\n\n    if (organizer.currentTeam !== null) {\n      throw new BadRequestException('User is in team');\n    }\n\n    const { title, description, nrOfTeams } = createTournamentDto;\n\n    const slug: string = slugify(title) + Math.floor(Math.random() * 90 + 10);\n\n    await organizer.update({ role: UserRoles.ORGANIZER }).exec();\n\n    return await new this.tournamentModel({\n      title,\n      slug,\n      description,\n      nrOfTeams,\n      organizer: organizer.username,\n    }).save();\n  }\n\n  async findTournamentById(id: string) {\n    const tournament = await this.tournamentModel.findById(id).exec();\n    if (!tournament) {\n      throw new NotFoundException();\n    }\n    return tournament;\n  }\n\n  async findTournamentBySlug(slug: string) {\n    const tournament = await this.tournamentModel.findOne({ slug }).exec();\n    if (!tournament) {\n      throw new NotFoundException();\n    }\n    return tournament;\n  }\n\n  async findAll() {\n    return await this.tournamentModel.find({}).exec();\n  }\n\n  async joinTournament(user: Express.User, tournamentid: string) {\n    const teamOwner = await this.userService.findByUsername(user['username']);\n\n    if (teamOwner.currentTeam === null) {\n      throw new BadRequestException('User not in team');\n    }\n    const team = await this.teamsService.findOneByTag(teamOwner.currentTeam);\n\n    if (!team) {\n      throw new BadRequestException('Team doesnt exists');\n    }\n\n    // if (team.members.length + 1  team !== kickFromTournamentDto.teamtag,\n    );\n    team.activeTournament = null;\n\n    await team.save();\n    await tournament.save();\n    return HttpStatus.OK;\n  }\n\n  async startTournament(organizer: Express.User, tournamentid: string) {\n    const tournament = await this.findTournamentById(tournamentid);\n    if (!tournament) {\n      throw new BadRequestException('Tournament doesnt exists');\n    }\n    if (tournament.started) {\n      throw new BadRequestException('Tournament already started');\n    }\n    const user = await this.userService.findByUsername(organizer['username']);\n\n    if (user.username !== tournament.organizer) {\n      throw new BadRequestException('User is not a tournament organizer');\n    }\n\n    if (!(tournament.participants.length === tournament.nrOfTeams)) {\n      throw new BadRequestException('Not enough teams');\n    }\n\n    let stagesNr = Math.log(tournament.participants.length) / Math.log(2);\n\n    const stages = [];\n\n    const participants = tournament.participants.sort(\n      () => Math.random() - 0.5,\n    );\n\n    /**\n     * Creates whole bracket with empty matches, used later for transferring winners to next stage\n     */\n\n    let stageCounter = 0;\n    let MATCHES_PER_ROUND = participants.length / 2;\n    while (stagesNr > 0) {\n      const newStage = { finished: false, stageNr: stageCounter, matches: [] };\n      for (let i = 0; i  0 && !tournament.stages[stageNr - 1].finished) {\n      throw new BadRequestException('Previous stage is not yet finished');\n    }\n\n    let matchIndex = 0;\n    const matches = tournament.stages[stageNr].matches;\n\n    /**\n     * Looks for a match that will be updated\n     */\n    let teamAtag = '';\n    let teamBtag = '';\n    matches.map((match, index) => {\n      if (match['id'] === matchId) {\n        matchIndex = index;\n        if (match.teamA !== winner && match.teamB !== winner) {\n          throw new BadRequestException('Invalid winner');\n        }\n        teamAtag = match.teamA;\n        teamBtag = match.teamB;\n        match.winner = winner;\n        match.result = result;\n        match.finished = true;\n      }\n    });\n\n    tournament.stages[stageNr].matches = matches;\n\n    /**\n     * Moves winner to next round\n     */\n\n    if (stageNr  {\n      if (!match.finished) allFinishedFlag = false;\n    });\n\n    tournament.stages[stageNr].finished = allFinishedFlag;\n\n    const teamA = await this.teamsService.findOneByTag(teamAtag);\n    const teamB = await this.teamsService.findOneByTag(teamBtag);\n    const winnerTeam = teamA.tag === winner ? teamA : teamB;\n    const loserTeam = teamA.tag !== winner ? teamA : teamB;\n\n    if (stageNr === tournament.stages.length - 1) {\n      tournament.finished = tournament.stages[stageNr].finished;\n      winnerTeam.events.push({\n        type: EventEnum.TOURNAMENT_WIN,\n        date: new Date(),\n        msg: `Team won \"${tournament.title}\" tournament!`,\n      });\n    }\n\n    /**\n     * Adding matches to teams' history\n     */\n\n    winnerTeam.history.push({\n      opponent: loserTeam.tag,\n      result: 'win',\n      date: new Date(),\n      matchId: matchId,\n    });\n\n    loserTeam.history.push({\n      opponent: winnerTeam.tag,\n      result: 'loss',\n      date: new Date(),\n      matchId: matchId,\n    });\n\n    loserTeam.events.push({\n      type: EventEnum.TOURNAMENT_DROPPED,\n      date: new Date(),\n      msg: `Team dropped out from \"${tournament.title}\" in stage ${\n        stageNr + 1\n      } `,\n    });\n\n    await winnerTeam.save();\n    await loserTeam.save();\n\n    await tournament.save();\n\n    return tournament;\n  }\n\n  async getTeamMatches(id: string, tag: string) {\n    const tournament = await this.findTournamentById(id);\n    if (!tournament) {\n      throw new BadRequestException('Tournament doesnt exists');\n    }\n    if (!tournament.started) {\n      throw new BadRequestException('Tournament didnt start');\n    }\n    const team = await this.teamsService.findOneByTag(tag);\n    if (!team) {\n      throw new BadRequestException('Team doesnt exists');\n    }\n    if (team.activeTournament !== tournament._id.toString()) {\n      throw new BadRequestException(\n        'Team doesnt participate in this tournament',\n      );\n    }\n    const opponents = [];\n    tournament.stages.forEach((stage) => {\n      stage.matches.forEach((match) => {\n        if (match.teamA === team.tag || match.teamB === team.tag) {\n          if (match.finished !== true) {\n            opponents.push(\n              team.tag === match.teamA ? match.teamB : match.teamA,\n            );\n          }\n        }\n      });\n    });\n    const opponentsObjects = [];\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTeamDto.html":{"url":"classes/UpdateTeamDto.html","title":"class - UpdateTeamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTeamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/dto/update-team.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateTeamDto } from './create-team.dto';\n\nexport class UpdateTeamDto extends PartialType(CreateTeamDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTournamentDto.html":{"url":"classes/UpdateTournamentDto.html","title":"class - UpdateTournamentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTournamentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/dto/update-tournament.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateTournamentDto } from './create-tournament.dto';\n\nexport class UpdateTournamentDto extends PartialType(CreateTournamentDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                currentTeam\n                            \n                            \n                                details\n                            \n                            \n                                email\n                            \n                            \n                                inbox\n                            \n                            \n                                invitesTags\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                role\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentTeam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Team', defualt: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDetails\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: UserDetails, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inbox\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        invitesTags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Team[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\nimport { Team } from '../../teams/schema/team.schema';\nimport { UserDetails } from './user-details';\n\nexport type UserDocument = User & Document;\n\nexport enum UserRoles {\n  PLAYER = 'PLAYER',\n  ORGANIZER = 'ORGANIZER',\n  ADMIN = 'ADMIN',\n}\n\n/**\n * @class User\n */\n@Schema({ timestamps: true })\nexport class User {\n  @Prop({ required: true, unique: true })\n  username: string;\n  @Prop({ required: true, unique: true })\n  email: string;\n  @Prop({ default: null })\n  avatar: string;\n  @Prop({ required: true })\n  password: string;\n  @Prop({ required: true })\n  role: UserRoles;\n  @Prop()\n  refreshToken: string;\n  @Prop({ type: mongoose.Schema.Types.String, ref: 'Team', defualt: null })\n  currentTeam: string;\n  @Prop({ type: [{ type: mongoose.Schema.Types.String, ref: 'Team' }] })\n  invitesTags: Team[];\n  @Prop()\n  inbox: string[];\n  @Prop({ type: UserDetails, default: new UserDetails() })\n  details: UserDetails;\n}\nconst UserSchema = SchemaFactory.createForClass(User);\n\nexport { UserSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDetails.html":{"url":"classes/UserDetails.html","title":"class - UserDetails","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/schemas/user-details.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                about\n                            \n                            \n                                country\n                            \n                            \n                                firstname\n                            \n                            \n                                lookingForTeam\n                            \n                            \n                                preferredRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/users/schemas/user-details.ts:14\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        about\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user-details.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user-details.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user-details.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lookingForTeam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user-details.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        preferredRoles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlayerRoles[]\n\n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user-details.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export enum PlayerRoles {\n  MID = 'MID',\n  TOP = 'TOP',\n  JUNGLE = 'JUNGLE',\n  BOT = 'BOT',\n  SUPPORT = 'SUPPORT',\n}\n\nexport class UserDetails {\n  firstname: string;\n  country: string;\n  about: string;\n  preferredRoles: PlayerRoles[];\n  lookingForTeam: boolean;\n\n  public constructor() {\n    this.firstname = '';\n    this.country = '';\n    this.about = '';\n    this.preferredRoles = [];\n    this.lookingForTeam = true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserUpdateSelfDto.html":{"url":"injectables/UserUpdateSelfDto.html","title":"injectable - UserUpdateSelfDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserUpdateSelfDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-update-self.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                details\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DetailsDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDefined()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-update-self.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-update-self.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  IsDefined,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { DetailsDto } from './create-user.dto';\n\n@Injectable()\nexport class UserUpdateSelfDto {\n  @IsOptional()\n  @IsString()\n  password: string;\n\n  @IsOptional()\n  @IsDefined()\n  @Type(() => DetailsDto)\n  @ValidateNested()\n  details: DetailsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller for Users Module, for endpoints specific to user's actions\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteMsgAtIndex\n                            \n                            \n                                    Async\n                                findLogged\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                            \n                                handleInvite\n                            \n                            \n                                leaveTeam\n                            \n                            \n                                searchByUsername\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteMsgAtIndex\n                        \n                    \n                \n            \n            \n                \ndeleteMsgAtIndex(req: Request, index: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Delete('msg/:index')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:127\n                \n            \n\n\n            \n                \n                    Deletes msg from user's inbox\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findLogged\n                        \n                    \n                \n            \n            \n                \n                    \n                    findLogged(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('me')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:42\n                \n            \n\n\n            \n                \n                    Returns logged user's data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nfrom AccessTokenGuard\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        user data of the token owner\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:52\n                \n            \n\n\n            \n                \n                    Returns specified user's data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nID of user\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nuser data\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('name/:username')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:61\n                \n            \n\n\n            \n                \n                    Return specified user's data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nuser's username\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleInvite\n                        \n                    \n                \n            \n            \n                \nhandleInvite(req: Request, handleInviteDto: HandleInviteDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Post('handleinvite')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:79\n                \n            \n\n\n            \n                \n                    Allows user to accept/decline invite\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    handleInviteDto\n                                    \n                                                HandleInviteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        leaveTeam\n                        \n                    \n                \n            \n            \n                \nleaveTeam(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('leaveTeam')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:116\n                \n            \n\n\n            \n                \n                    Allows user to leave the team\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchByUsername\n                        \n                    \n                \n            \n            \n                \nsearchByUsername(username: string, team: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search/user')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:92\n                \n            \n\n\n            \n                \n                    Used for searching users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    team\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nif present, will look for user that are also in teams\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(req: Request, updateSelfDto: UserUpdateSelfDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('me')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:106\n                \n            \n\n\n            \n                \n                    Allows user to modify his data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \npassed from request by AccessTokenGuard\n\n\n                                    \n                                \n                                \n                                    updateSelfDto\n                                    \n                                                UserUpdateSelfDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Req,\n  NotFoundException,\n  Query,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UserUpdateSelfDto } from './dto/user-update-self.dto';\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard';\nimport { Request } from 'express';\nimport { ApiTags } from '@nestjs/swagger';\nimport { RolesGuard } from '../common/guards/roles.guard';\nimport { Roles } from '../common/decorators/roles.decorator';\nimport { HandleInviteDto } from './dto/handle-invite.dto';\n\n/**\n * Controller for Users Module, for endpoints specific to user's actions\n */\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  /**\n   * Injecting service\n   * @param usersService {UsersService}\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Returns logged user's data\n   * @returns {User} user data of the token owner\n   * @param req - from AccessTokenGuard\n   */\n  @UseGuards(AccessTokenGuard)\n  @Get('me')\n  async findLogged(@Req() req: Request) {\n    return await this.usersService.findLoggedUser(req.user['username']);\n  }\n\n  /**\n   * Returns specified user's data\n   * @returns {User} - user data\n   * @param id {string} - ID of user\n   */\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(id);\n  }\n\n  /**\n   * Return specified user's data\n   * @param username {string} - user's username\n   */\n  @Get('name/:username')\n  async findOneByUsername(@Param('username') username: string) {\n    const user = await this.usersService.findByUsername(username);\n    if (!user) {\n      throw new NotFoundException();\n    }\n    const cleared = user.toObject();\n    delete cleared.refreshToken;\n    delete cleared.password;\n    return cleared;\n  }\n\n  /**\n   * Allows user to accept/decline invite\n   * @param req\n   * @param handleInviteDto {HandleInviteDto}\n   */\n  @UseGuards(AccessTokenGuard)\n  @Post('handleinvite')\n  handleInvite(@Req() req: Request, @Body() handleInviteDto: HandleInviteDto) {\n    return this.usersService.handleInvite(\n      req.user['username'],\n      handleInviteDto,\n    );\n  }\n\n  /**\n   * Used for searching users\n   * @param username {String}\n   * @param team {String} - if present, will look for user that are also in teams\n   */\n  @Get('search/user')\n  searchByUsername(\n    @Query('username') username: string,\n    @Query('team') team: boolean,\n  ) {\n    return this.usersService.findLikeUsername(username, team);\n  }\n\n  /**\n   * Allows user to modify his data\n   * @param req - passed from request by AccessTokenGuard\n   * @param updateSelfDto\n   */\n  @UseGuards(AccessTokenGuard)\n  @Patch('me')\n  update(@Req() req: Request, @Body() updateSelfDto: UserUpdateSelfDto) {\n    return this.usersService.updateSelf(req.user['username'], updateSelfDto);\n  }\n\n  /**\n   * Allows user to leave the team\n   * @param req\n   */\n  @UseGuards(AccessTokenGuard)\n  @Patch('leaveTeam')\n  leaveTeam(@Req() req: Request) {\n    return this.usersService.leaveTeam(req['user']);\n  }\n\n  /**\n   * Deletes msg from user's inbox\n   * @param req\n   * @param index {number}\n   */\n  @UseGuards(AccessTokenGuard)\n  @Delete('msg/:index')\n  deleteMsgAtIndex(@Req() req: Request, @Param('index') index: number) {\n    return this.usersService.deleteMsgAtIndex(index, req.user['username']);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './schemas/user.schema';\nimport { TeamsModule } from '../teams/teams.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    forwardRef(() => TeamsModule),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Collection of User specific action\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteMsgAtIndex\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findLikeUsername\n                            \n                            \n                                    Async\n                                findLoggedUser\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                handleInvite\n                            \n                            \n                                    Async\n                                leaveTeam\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, teamService: TeamsService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:21\n                            \n                        \n\n                \n                    \n                            Injecting dependencies and creating mongoose model\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n                    Creating new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMsgAtIndex\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMsgAtIndex(index: number, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:78\n                \n            \n\n\n            \n                \n                    Removing message at index\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:45\n                \n            \n\n\n            \n                \n                    Returns all users\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUsername(username: string, populate?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:148\n                \n            \n\n\n            \n                \n                    Searches for specified user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    populate\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findLikeUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findLikeUsername(query: string, team?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:168\n                \n            \n\n\n            \n                \n                    Searches for users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    team\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findLoggedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findLoggedUser(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:56\n                \n            \n\n\n            \n                \n                    Returns logged user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:67\n                \n            \n\n\n            \n                \n                    Returns specific user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleInvite\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleInvite(username: string, handleInviteDto: HandleInviteDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:100\n                \n            \n\n\n            \n                \n                    Allows user to reject/accept invite\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    handleInviteDto\n                                    \n                                                HandleInviteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        leaveTeam\n                        \n                    \n                \n            \n            \n                \n                    \n                    leaveTeam(reqUser: Express.User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:214\n                \n            \n\n\n            \n                \n                    Allows user to leave the team\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reqUser\n                                    \n                                                Express.User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:186\n                \n            \n\n\n            \n                \n                    Allows user to update his details\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateSelf\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSelf(username: string, userUpdateSelfDto: UserUpdateSelfDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:200\n                \n            \n\n\n            \n                \n                    Update function for changes to account made by user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userUpdateSelfDto\n                                    \n                                                UserUpdateSelfDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User, UserDocument } from './schemas/user.schema';\nimport { Model } from 'mongoose';\nimport { UserUpdateSelfDto } from './dto/user-update-self.dto';\nimport { TeamsService } from '../teams/teams.service';\nimport { HandleInviteDto } from './dto/handle-invite.dto';\nimport { EventEnum } from '../teams/schema/team-events-history.schema';\n\n/**\n * Collection of User specific action\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Injecting dependencies and creating mongoose model\n   * @param userModel {Model}\n   * @param teamService {TeamsService}\n   */\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n    @Inject(forwardRef(() => TeamsService))\n    private teamService: TeamsService,\n  ) {}\n\n  /**\n   * Creating new user\n   * @param createUserDto {CreateUserDto}\n   */\n  async create(createUserDto: CreateUserDto): Promise {\n    const createdUser = await new this.userModel(createUserDto);\n    return createdUser.save();\n  }\n\n  /**\n   * Returns all users\n   */\n  async findAll(): Promise {\n    return this.userModel\n      .find()\n      .select({ refreshToken: 0, password: 0, _v: 0 })\n      .exec();\n  }\n\n  /**\n   * Returns logged user\n   * @param username {String}\n   */\n  async findLoggedUser(username: string): Promise {\n    return this.userModel\n      .findOne({ username })\n      .select({ refreshToken: 0, password: 0, _v: 0 })\n      .exec();\n  }\n\n  /**\n   * Returns specific user\n   * @param id\n   */\n  async findOne(id: string): Promise {\n    return this.userModel\n      .findById(id)\n      .select({ refreshToken: 0, password: 0, _v: 0 });\n  }\n\n  /**\n   * Removing message at index\n   * @param index\n   * @param username\n   */\n  async deleteMsgAtIndex(\n    index: number,\n    username: string,\n  ): Promise {\n    const user = await this.userModel.findOne({ username });\n    if (!user) {\n      throw new BadRequestException();\n    }\n    if (user.inbox.length - 1  {\n    const user = await this.findByUsername(username);\n    if (user.currentTeam !== null) {\n      throw new BadRequestException('User already in team.');\n    }\n    const team = await this.teamService.findOneByTag(handleInviteDto.teamtag);\n    if (!team) {\n      throw new BadRequestException('Team doesnt exists');\n    }\n    //if user agrees\n    if (handleInviteDto.decision) {\n      await team\n        .updateOne({\n          $push: {\n            members: user.username,\n            events: {\n              type: EventEnum.JOINED,\n              date: Date.now(),\n              msg: `${user.username} joined the team`,\n            },\n          },\n          $pull: { invitedUsernames: user.username },\n        })\n        .exec();\n      await user\n        .updateOne({ $pull: { invitesTags: team.tag }, currentTeam: team.tag })\n        .select({ refreshToken: 0, password: 0, _v: 0 })\n        .exec();\n    }\n    //if user declines\n    if (!handleInviteDto.decision) {\n      await team.updateOne({\n        $pull: { invitedUsernames: user.username },\n      });\n      await user.updateOne({ $pull: { invitesTags: team.tag } }).exec();\n    }\n\n    return user;\n  }\n\n  /**\n   * Searches for specified user\n   * @param username\n   * @param populate\n   */\n  async findByUsername(\n    username: string,\n    populate?: boolean,\n  ): Promise {\n    if (populate) {\n      const user = await this.userModel\n        .findOne({ username })\n        .populate('invites')\n        .exec();\n      return user;\n    }\n    const user = await this.userModel.findOne({ username }).exec();\n    return user;\n  }\n\n  /**\n   * Searches for users\n   * @param query\n   * @param team\n   */\n  async findLikeUsername(\n    query: string,\n    team?: boolean,\n  ): Promise {\n    return this.userModel\n      .find({\n        username: new RegExp('.*' + query + '.*', 'i'),\n        currentTeam: team ? { $in: [null, new RegExp('.*')] } : null,\n      })\n      .select({ username: 1, 'details.preferredRoles': 1, avatar: 1 })\n      .limit(10);\n  }\n\n  /**\n   * Allows user to update his details\n   * @param id\n   * @param updateUserDto\n   */\n  async update(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.userModel\n      .findByIdAndUpdate(id, updateUserDto, { new: true })\n      .exec();\n  }\n\n  /**\n   * Update function for changes to account made by user\n   * @param {string} username\n   * @param {UserUpdateSelfDto} userUpdateSelfDto\n   */\n  async updateSelf(\n    username: string,\n    userUpdateSelfDto: UserUpdateSelfDto,\n  ): Promise {\n    return this.userModel\n      .findOneAndUpdate({ username }, userUpdateSelfDto, { new: true })\n      .select({ refreshToken: 0, password: 0, _v: 0 })\n      .exec();\n  }\n\n  /**\n   * Allows user to leave the team\n   * @param reqUser\n   */\n  async leaveTeam(reqUser: Express.User): Promise {\n    const user = await this.userModel.findOne({\n      username: reqUser['username'],\n    });\n    if (!user) {\n      throw new BadRequestException('User not found');\n    }\n    if (user.currentTeam === null) {\n      throw new BadRequestException('User not in team');\n    }\n    const team = await this.teamService.findOneByTag(user.currentTeam);\n    if (!team) {\n      throw new BadRequestException(\"Team doesn't exists\");\n    }\n    if (team.activeTournament !== null) {\n      throw new BadRequestException('Team is participating in tournament');\n    }\n    if (user.username === team.owner) {\n      throw new BadRequestException('You cant leave your own team');\n    }\n    team.members = team.members.filter((member) => member !== user.username);\n    team.events.push({\n      type: EventEnum.LEFT,\n      date: new Date(),\n      msg: `${user.username} left the team`,\n    });\n    user.currentTeam = null;\n    await team.save();\n    await user.save();\n    return { msg: 'Successfully left the team' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/accessToken.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/refreshToken.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/accessToken.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/refreshToken.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/teams/dto/create-team.dto.ts\n            \n            class\n            CreateTeamDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/teams/dto/invite-user.dto.ts\n            \n            class\n            InviteUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/teams/dto/update-team.dto.ts\n            \n            class\n            UpdateTeamDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/teams/schema/team-events-history.schema.ts\n            \n            class\n            TeamEventsHistory\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/teams/schema/team-events-history.schema.ts\n            \n            variable\n            TeamEventsHistorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/teams/schema/team-history.schema.ts\n            \n            class\n            TeamHistory\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/teams/schema/team-history.schema.ts\n            \n            variable\n            TeamHistorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/teams/schema/team.interface.ts\n            \n            interface\n            TeamEventsInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/teams/schema/team.interface.ts\n            \n            interface\n            TeamHistoryInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/teams/schema/team.schema.ts\n            \n            class\n            Team\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/teams/schema/team.schema.ts\n            \n            variable\n            TeamSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/teams/teams.controller.ts\n            \n            controller\n            TeamsController\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/teams/teams.service.ts\n            \n            injectable\n            TeamsService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/tournaments/dto/create-tournament.dto.ts\n            \n            class\n            CreateTournamentDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tournaments/dto/kick-from-tournament.dto.ts\n            \n            class\n            KickFromTournamentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tournaments/dto/match-result.dto.ts\n            \n            class\n            MatchResultDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/tournaments/dto/update-tournament.dto.ts\n            \n            class\n            UpdateTournamentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/match.interface.ts\n            \n            interface\n            MatchInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/match.schema.ts\n            \n            class\n            Match\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/match.schema.ts\n            \n            variable\n            MatchSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/stage.interface.ts\n            \n            interface\n            StageInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/stage.schema.ts\n            \n            class\n            Stage\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/stage.schema.ts\n            \n            variable\n            StageSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/tournament.schema.ts\n            \n            class\n            Tournament\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/tournament.schema.ts\n            \n            variable\n            TournamentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tournaments/tournaments.controller.ts\n            \n            controller\n            TournamentsController\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/tournaments/tournaments.service.ts\n            \n            injectable\n            TournamentsService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            DetailsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/handle-invite.dto.ts\n            \n            class\n            HandleInviteDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/user-update-self.dto.ts\n            \n            injectable\n            UserUpdateSelfDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/schemas/user-details.ts\n            \n            class\n            UserDetails\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (13/13)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.1.3\n        \n            argon2 : ^0.30.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            helmet : ^6.0.1\n        \n            mongoose : ^6.6.5\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            slugify : ^1.6.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EventEnum   (src/.../team-events-history.schema.ts)\n                        \n                        \n                            PlayerRoles   (src/.../user-details.ts)\n                        \n                        \n                            UserRoles   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/teams/schema/team-events-history.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        EventEnum\n                    \n                \n                        \n                            \n                                 CREATED\n                            \n                        \n                        \n                            \n                                Value : CREATED\n                            \n                        \n                        \n                            \n                                 JOINED\n                            \n                        \n                        \n                            \n                                Value : JOINED\n                            \n                        \n                        \n                            \n                                 TOURNAMENT_WIN\n                            \n                        \n                        \n                            \n                                Value : TOURNAMENT_WIN\n                            \n                        \n                        \n                            \n                                 TOURNAMENT_DROPPED\n                            \n                        \n                        \n                            \n                                Value : TOURNAMENT_DROPPED\n                            \n                        \n                        \n                            \n                                 LEFT\n                            \n                        \n                        \n                            \n                                Value : LEFT\n                            \n                        \n            \n        \n\n    src/users/schemas/user-details.ts\n    \n        \n            \n                \n                    \n                        \n                        PlayerRoles\n                    \n                \n                        \n                            \n                                 MID\n                            \n                        \n                        \n                            \n                                Value : MID\n                            \n                        \n                        \n                            \n                                 TOP\n                            \n                        \n                        \n                            \n                                Value : TOP\n                            \n                        \n                        \n                            \n                                 JUNGLE\n                            \n                        \n                        \n                            \n                                Value : JUNGLE\n                            \n                        \n                        \n                            \n                                 BOT\n                            \n                        \n                        \n                            \n                                Value : BOT\n                            \n                        \n                        \n                            \n                                 SUPPORT\n                            \n                        \n                        \n                            \n                                Value : SUPPORT\n                            \n                        \n            \n        \n\n    src/users/schemas/user.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRoles\n                    \n                \n                        \n                            \n                                 PLAYER\n                            \n                        \n                        \n                            \n                                Value : PLAYER\n                            \n                        \n                        \n                            \n                                 ORGANIZER\n                            \n                        \n                        \n                            \n                                Value : ORGANIZER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nEsport Tournaments Platform - Backend\nAn online platform that allows players to organize and participate in community tournaments in the game League of Legends.\nEnvironment Variables\nTo run this project, you will need to add the following environment variables to your .env file\nJWT_ACCESS_SECRET\nJWT_REFRESH_SECRET\nMONGODB_URI\nRun Locally\nClone the project\n  git clone https://github.com/Opyd/praca_inzGo to the project directory\n  cd praca_inz/backendInstall dependencies\n  npm installStart the server\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prod\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TeamsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TournamentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TeamsModule\n\n\n\ncluster_TeamsModule_exports\n\n\n\ncluster_TeamsModule_providers\n\n\n\ncluster_TournamentsModule\n\n\n\ncluster_TournamentsModule_exports\n\n\n\ncluster_TournamentsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTeamsModule\n\nTeamsModule\n\n\n\nTournamentsModule\n\nTournamentsModule\n\nTournamentsModule -->\n\nTeamsModule->TournamentsModule\n\n\n\nAppModule -->\n\nTeamsModule->AppModule\n\n\n\n\n\nTeamsService \n\nTeamsService \n\nTeamsService  -->\n\nTeamsModule->TeamsService \n\n\n\nAppModule -->\n\nTournamentsModule->AppModule\n\n\n\n\n\nTournamentsService \n\nTournamentsService \n\nTournamentsService  -->\n\nTournamentsModule->TournamentsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nTournamentsModule -->\n\nUsersModule->TournamentsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\nTeamsService\n\nTeamsService\n\nTeamsModule -->\n\nTeamsService->TeamsModule\n\n\n\n\n\nTournamentsService\n\nTournamentsService\n\nTournamentsModule -->\n\nTournamentsService->TournamentsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JwtPayload   (src/.../accessToken.strategy.ts)\n                        \n                        \n                            MatchDocument   (src/.../match.schema.ts)\n                        \n                        \n                            StageDocument   (src/.../stage.schema.ts)\n                        \n                        \n                            TeamDocument   (src/.../team.schema.ts)\n                        \n                        \n                            TournamentDocument   (src/.../tournament.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/strategies/accessToken.strategy.ts\n    \n    \n        \n            \n                \n                    \n                    JwtPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/tournaments/schemas/match.schema.ts\n    \n    \n        \n            \n                \n                    \n                    MatchDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/tournaments/schemas/stage.schema.ts\n    \n    \n        \n            \n                \n                    \n                    StageDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/teams/schema/team.schema.ts\n    \n    \n        \n            \n                \n                    \n                    TeamDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/tournaments/schemas/tournament.schema.ts\n    \n    \n        \n            \n                \n                    \n                    TournamentDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MatchSchema   (src/.../match.schema.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            StageSchema   (src/.../stage.schema.ts)\n                        \n                        \n                            TeamEventsHistorySchema   (src/.../team-events-history.schema.ts)\n                        \n                        \n                            TeamHistorySchema   (src/.../team-history.schema.ts)\n                        \n                        \n                            TeamSchema   (src/.../team.schema.ts)\n                        \n                        \n                            TournamentSchema   (src/.../tournament.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/tournaments/schemas/match.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MatchSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Match)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n    src/tournaments/schemas/stage.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StageSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Stage)\n                    \n                \n\n\n        \n    \n\n    src/teams/schema/team-events-history.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TeamEventsHistorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(TeamEventsHistory)\n                    \n                \n\n\n        \n    \n\n    src/teams/schema/team-history.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TeamHistorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(TeamHistory)\n                    \n                \n\n\n        \n    \n\n    src/teams/schema/team.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TeamSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Team)\n                    \n                \n\n\n        \n    \n\n    src/tournaments/schemas/tournament.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TournamentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Tournament)\n                    \n                \n\n\n        \n    \n\n    src/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
