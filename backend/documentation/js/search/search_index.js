var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.994,1,2.025]],["body/injectables/AccessTokenGuard.html",[0,1.742,1,3.551,2,2.491,3,0.329,4,0.329,5,0.261,6,4.674,7,0.474,8,0.019,9,1.473,10,4.674,11,3.475,12,0.329,13,0.175,14,2.643,15,4.674,16,0.017,17,0.017]],["title/injectables/AccessTokenStrategy.html",[0,0.994,18,2.344]],["body/injectables/AccessTokenStrategy.html",[0,1.52,2,1.997,3,0.264,4,0.264,5,0.209,7,0.482,8,0.02,9,1.181,11,2.785,12,0.264,13,0.14,14,2.119,16,0.015,17,0.015,18,3.584,19,3.336,20,0.413,21,2.427,22,4.821,23,2.119,24,3.746,25,4.552,26,0.949,27,4.369,28,2.427,29,1.86,30,0.728,31,2.296,32,4.293,33,5.623,34,5.823,35,4.369,36,4.821,37,1.886,38,3.746,39,3.746,40,3.746,41,3.336,42,4.293,43,2.581,44,3.746,45,0.949,46,3.03,47,4.369,48,2.581,49,3.746,50,3.746,51,4.369,52,3.746,53,4.369,54,1.886]],["title/modules/AppModule.html",[55,1.68,56,2.55]],["body/modules/AppModule.html",[3,0.25,4,0.25,5,0.198,7,0.513,8,0.02,9,1.121,12,0.25,13,0.133,16,0.014,17,0.014,25,4.205,32,3.168,43,2.451,55,2.485,56,5.085,57,2.141,58,2.636,59,3.558,60,3.558,61,4.37,62,3.776,63,4.37,64,3.537,65,3.212,66,2.451,67,2.286,68,4.149,69,3.865,70,2.877,71,1.445,72,2.877,73,4.149,74,3.168,75,4.662,76,4.149,77,4.149,78,3.168,79,4.149,80,2.141,81,4.149,82,4.149,83,1.896,84,2.645]],["title/controllers/AuthController.html",[85,1.783,86,2.55]],["body/controllers/AuthController.html",[1,1.865,3,0.204,4,0.204,5,0.162,7,0.497,8,0.02,9,0.915,12,0.204,13,0.109,16,0.012,17,0.012,20,0.32,21,2.044,26,0.998,28,2.554,29,1.958,30,0.693,31,2.416,37,2.554,48,2,54,2.358,83,1.547,85,1.642,86,3.285,87,2.903,88,2.347,89,3.385,90,4.061,91,4.061,92,4.061,93,4.061,94,3.385,95,3.784,96,1.521,97,3.385,98,3.385,99,1.865,100,4.114,101,4.737,102,1.65,103,4.061,104,3.385,105,3.385,106,3.385,107,3.385,108,2.903,109,4.114,110,4.737,111,3.385,112,2.903,113,3.13,114,4.737,115,3.385,116,2.347,117,2.347,118,2.347,119,3.228,120,2.903,121,2.903,122,1.747,123,2.903,124,2,125,2.347,126,2.347,127,3.385,128,2.347,129,1.242,130,3.385,131,3.385,132,2.347,133,3.385,134,3.385,135,3.385,136,3.385,137,2,138,2.347,139,3.385,140,3.385,141,3.385,142,3.385,143,3.385,144,3.385,145,1.567,146,1.382,147,2.903,148,2.609,149,3.385,150,3.385]],["title/classes/AuthDto.html",[13,0.118,109,2.344]],["body/classes/AuthDto.html",[3,0.295,4,0.295,5,0.234,7,0.443,8,0.019,12,0.295,13,0.194,16,0.016,17,0.016,20,0.462,26,1.018,30,0.706,45,1.153,96,1.551,109,3.847,129,1.794,146,2.673,151,1.256,152,4.192,153,1.331,154,3.606,155,3.566,156,4.889,157,4.889,158,3.175,159,2.992,160,2.11,161,3.378]],["title/modules/AuthModule.html",[55,1.68,61,2.344]],["body/modules/AuthModule.html",[3,0.256,4,0.256,5,0.203,7,0.523,8,0.02,9,1.146,12,0.256,13,0.136,16,0.014,17,0.014,18,4.395,43,2.504,55,2.52,57,2.187,58,2.674,61,4.689,64,3.558,65,3.257,66,2.504,67,2.335,69,3.514,72,2.939,75,3.635,83,2.52,84,3.514,86,4.249,119,4.074,120,3.635,162,3.635,163,4.239,164,3.635,165,4.395,166,4.239,167,4.239,168,4.239,169,3.237,170,4.239,171,4.239,172,4.239,173,4.239]],["title/injectables/AuthService.html",[0,0.994,119,2.172]],["body/injectables/AuthService.html",[0,0.793,2,0.824,3,0.109,4,0.109,5,0.086,7,0.408,8,0.02,9,0.487,12,0.109,13,0.058,16,0.008,17,0.008,20,0.17,21,1.267,23,1.423,25,3.69,26,0.898,28,2.297,29,1.76,30,0.623,31,2.173,37,2.297,43,1.066,44,2.517,45,1.182,54,2.032,80,3.426,90,3.668,91,2.517,92,2.517,93,2.517,95,0.993,102,2.144,103,1.546,108,2.517,109,3.392,112,2.517,113,2.69,119,1.734,121,1.546,122,0.931,123,1.546,137,3.388,145,2.036,146,2.265,148,3.716,154,2.357,169,1.377,174,1.546,175,2.935,176,2.935,177,1.803,178,1.955,179,5.321,180,1.803,181,2.036,182,2.935,183,3.217,184,1.803,185,2.935,186,2.935,187,6.512,188,4.756,189,2.594,190,4.709,191,2.935,192,1.803,193,4.278,194,3.712,195,2.594,196,2.935,197,1.803,198,2.935,199,4.038,200,3.712,201,4.756,202,1.803,203,2.935,204,1.803,205,2.036,206,2.58,207,2.935,208,1.803,209,2.241,210,2.241,211,4.278,212,3.595,213,1.617,214,1.8,215,1.15,216,1.251,217,2.517,218,1.066,219,1.377,220,1.803,221,2.935,222,1.515,223,2.366,224,3.712,225,2.727,226,2.935,227,3.624,228,1.803,229,1.803,230,2.782,231,2.036,232,1.377,233,1.803,234,1.803,235,1.803,236,1.803,237,1.803,238,1.803,239,1.803,240,1.066,241,2.935,242,2.935,243,1.803,244,1.803,245,1.803,246,1.803,247,1.803,248,3.712,249,2.935,250,1.803,251,2.036,252,2.935,253,2.935,254,1.803,255,1.803,256,1.803,257,1.803,258,2.935,259,1.871,260,2.935,261,1.803,262,2.935,263,2.935,264,2.935,265,1.803,266,2.935,267,1.803,268,2.935,269,2.935,270,1.803,271,2.935,272,1.803,273,1.803,274,1.803,275,1.546,276,2.935,277,2.935,278,2.935,279,1.546,280,1.803,281,2.935]],["title/classes/CreateTeamDto.html",[13,0.118,282,2.172]],["body/classes/CreateTeamDto.html",[3,0.253,4,0.253,5,0.2,7,0.402,8,0.02,12,0.253,13,0.176,16,0.014,17,0.014,20,0.396,26,1.131,29,2.017,30,0.785,45,1.223,96,1.723,129,1.539,151,1.078,153,1.207,158,3.134,159,3.2,160,1.81,161,3.334,282,3.235,283,5.895,284,3.202,285,4.654,286,4.654,287,3.886,288,3.358,289,4.194,290,3.596,291,4.194,292,3.596,293,4.194,294,3.596,295,4.194,296,4.194,297,3.796,298,4.194,299,3.596,300,2.908,301,4.194,302,4.194]],["title/classes/CreateTournamentDto.html",[13,0.118,303,2.172]],["body/classes/CreateTournamentDto.html",[3,0.268,4,0.268,5,0.212,7,0.418,8,0.019,12,0.268,13,0.183,16,0.015,17,0.015,20,0.42,26,1.057,30,0.734,45,1.114,96,1.61,99,3.452,129,1.631,151,1.142,153,1.254,155,3.358,158,3.203,159,2.864,160,1.918,161,3.408,222,2.933,297,3.941,299,3.81,303,3.358,304,5.664,305,3.081,306,4.785,307,4.785,308,4.444,309,4.444,310,5.684,311,5.684,312,4.444,313,4.444,314,4.444,315,3.393,316,4.444,317,4.874,318,4.444,319,4.444]],["title/classes/CreateUserDto.html",[13,0.118,113,1.783]],["body/classes/CreateUserDto.html",[3,0.195,4,0.195,5,0.155,7,0.45,8,0.02,12,0.277,13,0.186,16,0.012,17,0.012,20,0.306,26,1.128,30,0.816,31,1.874,45,1.221,46,3.698,96,1.718,113,2.226,129,1.188,146,2.178,148,2.938,151,0.832,153,1.012,154,2.938,155,1.913,158,2.814,159,3.055,160,1.398,161,3.376,183,3.4,218,3.151,240,3.151,290,2.776,292,2.776,300,4.635,315,4.431,320,5.192,321,2.064,322,4.024,323,4.024,324,3.238,325,3.238,326,3.238,327,3.905,328,3.238,329,3.238,330,3.238,331,3.238,332,3.238,333,3.238,334,4.591,335,3.238,336,3.238,337,3.238,338,3.505,339,3.505,340,3.936,341,2.776,342,3.505,343,2.245,344,2.245,345,4.573,346,2.776,347,3.183,348,2.776,349,2.472,350,2.472,351,2.776,352,2.776,353,1.188,354,2.472,355,2.472,356,1.322]],["title/classes/DetailsDto.html",[13,0.118,327,2.344]],["body/classes/DetailsDto.html",[3,0.206,4,0.206,5,0.163,7,0.459,8,0.02,12,0.288,13,0.191,16,0.012,17,0.012,20,0.322,26,1.092,30,0.806,45,1.216,46,2.368,96,1.663,113,1.656,129,1.253,146,1.394,148,1.881,151,0.878,153,1.051,154,1.881,158,2.881,159,3.096,160,1.474,161,3.427,183,2.177,218,2.816,240,2.018,300,4.698,315,4.536,320,5.072,321,2.177,322,4.119,323,3.305,327,3.983,338,3.639,339,3.639,340,4.086,341,2.928,342,3.639,343,2.368,344,2.368,345,4.707,346,2.928,347,3.806,348,2.928,349,4.191,350,4.191,351,2.928,352,4.086,353,1.749,354,4.191,355,4.191,356,1.946,357,5.093,358,3.415,359,3.415,360,3.415,361,3.415,362,3.415,363,3.415,364,3.415,365,3.415]],["title/classes/HandleInviteDto.html",[13,0.118,366,2.344]],["body/classes/HandleInviteDto.html",[3,0.291,4,0.291,5,0.231,7,0.44,8,0.019,12,0.291,13,0.192,16,0.016,17,0.016,20,0.456,26,1.01,30,0.701,45,1.01,96,1.539,129,1.772,151,1.241,153,1.321,155,2.853,158,3.157,159,2.737,160,2.084,161,3.359,338,4.573,356,2.445,366,3.817,367,5.582,368,4.14,369,6.51,370,4.971,371,4.828,372,4.828,373,4.828]],["title/classes/InviteUserDto.html",[13,0.118,374,2.344]],["body/classes/InviteUserDto.html",[3,0.292,4,0.292,5,0.231,7,0.441,8,0.019,12,0.292,13,0.193,16,0.016,17,0.016,20,0.457,26,1.012,30,0.702,45,1.15,96,1.542,129,1.777,146,2.662,151,1.245,153,1.323,155,3.545,158,3.161,159,2.979,160,2.09,161,3.364,321,3.087,370,4.978,374,3.825,375,5.59,376,4.843,377,4.843]],["title/classes/KickFromTournamentDto.html",[13,0.118,378,2.344]],["body/classes/KickFromTournamentDto.html",[3,0.314,4,0.314,5,0.248,7,0.382,8,0.019,12,0.314,13,0.201,16,0.016,17,0.016,20,0.491,26,0.877,30,0.608,45,1.057,96,1.336,151,1.336,153,1.382,158,3.038,159,2.863,160,2.243,294,4.457,305,3.604,370,5.135,378,3.993,379,5.372,380,5.197]],["title/classes/Match.html",[13,0.118,381,2.025]],["body/classes/Match.html",[3,0.239,4,0.239,5,0.189,7,0.387,8,0.02,12,0.358,13,0.127,16,0.014,17,0.014,20,0.374,26,1.11,30,0.831,45,1.242,71,1.379,96,1.691,145,1.31,151,1.018,153,1.163,214,2.556,356,2.153,381,3.265,382,2.746,383,3.778,384,3.058,385,4.525,386,4.525,387,3.778,388,3.864,389,3.96,390,3.96,391,3.778,392,4.692,393,2.357,394,3.96,395,3.96,396,3.96,397,2.409,398,2.181,399,1.709,400,3.395,401,3.36,402,3.395]],["title/interfaces/MatchInterface.html",[403,1.783,404,2.344]],["body/interfaces/MatchInterface.html",[3,0.301,4,0.301,5,0.238,8,0.019,12,0.301,16,0.016,17,0.016,20,0.47,30,0.806,45,1.269,153,1.347,384,3.551,385,5.255,386,5.255,387,4.387,403,2.416,404,3.892,405,3.176,406,4.272]],["title/classes/MatchResultDto.html",[13,0.118,407,2.344]],["body/classes/MatchResultDto.html",[3,0.265,4,0.265,5,0.21,7,0.415,8,0.019,12,0.265,13,0.181,16,0.015,17,0.015,20,0.415,26,1.11,30,0.77,45,1.175,96,1.69,129,1.612,151,1.129,153,1.244,155,3.683,158,3.299,159,3.006,160,1.896,161,3.51,222,2.911,317,4.838,384,3.216,387,3.973,407,3.597,408,5.833,409,3.768,410,3.973,411,4.322,412,4.394,413,4.394,414,4.394,415,4.394,416,4.394]],["title/injectables/RefreshTokenGuard.html",[0,0.994,126,2.55]],["body/injectables/RefreshTokenGuard.html",[0,1.739,2,2.482,3,0.328,4,0.328,5,0.26,7,0.473,8,0.019,9,1.468,10,4.658,11,3.463,12,0.328,13,0.174,14,2.634,15,4.658,16,0.017,17,0.017,126,4.46,212,4.148,417,4.658]],["title/injectables/RefreshTokenStrategy.html",[0,0.994,165,2.344]],["body/injectables/RefreshTokenStrategy.html",[0,1.493,2,1.942,3,0.256,4,0.256,5,0.203,7,0.495,8,0.02,9,1.149,11,2.709,12,0.256,13,0.136,14,2.061,16,0.014,17,0.014,20,0.401,21,2.384,22,4.736,23,2.061,24,3.645,25,4.504,26,0.932,28,2.384,29,1.827,30,0.646,31,2.255,32,4.217,36,5.57,37,1.835,38,4.736,39,3.645,40,4.736,41,3.246,42,4.217,43,2.511,48,2.511,49,3.645,50,3.645,52,3.645,54,1.835,95,3.578,100,2.709,124,2.511,145,1.406,148,3.043,165,3.521,212,3.246,353,1.56,418,3.645,419,4.251,420,5.523,421,4.251,422,4.251,423,4.251,424,4.251,425,4.251]],["title/guards/RolesGuard.html",[426,2.807,427,2.55]],["body/guards/RolesGuard.html",[0,1.542,3,0.27,4,0.27,5,0.214,7,0.419,8,0.02,9,1.208,12,0.27,13,0.144,16,0.015,17,0.015,20,0.422,21,2.462,23,2.167,26,0.962,28,2.462,29,1.887,30,0.668,31,2.329,37,1.929,48,2.64,54,2.462,95,2.462,102,1.557,145,2.079,353,1.64,356,2.329,427,3.956,428,4.469,429,3.832,430,6.619,431,4.469,432,6.993,433,4.469,434,5.705,435,6.619,436,4.469,437,4.469,438,3.832,439,4.469,440,3.956,441,4.469,442,4.469,443,4.469,444,4.469,445,4.469]],["title/classes/Stage.html",[13,0.118,446,2.172]],["body/classes/Stage.html",[3,0.252,4,0.252,5,0.2,7,0.474,8,0.02,12,0.367,13,0.134,16,0.014,17,0.014,20,0.395,26,1.027,30,0.804,71,1.457,96,1.565,145,1.384,151,1.075,153,1.205,214,2.65,222,2.82,251,4.221,353,2.369,356,2.232,381,3.354,383,3.881,388,3.556,391,2.666,397,2.498,398,2.304,399,1.805,401,3.484,404,2.666,411,4.221,446,3.597,447,2.9,448,3.229,449,4.182,450,2.9,451,4.182,452,4.182,453,4.182,454,3.586,455,3.586,456,3.193,457,2.471,458,3.229,459,3.484,460,3.586]],["title/interfaces/StageInterface.html",[403,1.783,461,2.807]],["body/interfaces/StageInterface.html",[3,0.304,4,0.304,5,0.241,7,0.371,8,0.019,12,0.304,16,0.016,17,0.016,20,0.476,30,0.777,153,1.357,222,3.426,251,4.793,356,2.711,383,4.406,403,2.447,404,4.406,405,3.217,411,4.793,454,4.327,461,4.699,462,4.327]],["title/classes/Team.html",[13,0.118,393,1.281]],["body/classes/Team.html",[3,0.168,4,0.168,5,0.133,7,0.443,8,0.02,12,0.295,13,0.132,16,0.011,17,0.011,20,0.262,26,1.124,29,1.617,30,0.852,45,1.228,71,0.967,96,1.711,102,2.102,145,0.919,146,1.134,151,0.714,153,0.906,195,1.53,214,1.992,219,2.121,285,3.733,286,3.733,287,3.116,288,2.693,297,3.746,353,2.402,388,3.721,391,3.847,392,3.997,393,2.102,397,1.877,398,1.53,399,1.773,448,2.427,450,3.997,458,2.427,463,1.926,464,4.888,465,2.468,466,4.192,467,4.631,468,4.192,469,3.522,470,2.778,471,2.778,472,3.116,473,2.778,474,3.116,475,2.778,476,4.108,477,3.137,478,4.108,479,2.778,480,2.778,481,2.778,482,2.778,483,2.778,484,3.137,485,4.108,486,4.108,487,2.778,488,2.778,489,2.849,490,2.427,491,2.849,492,2.121,493,2.121,494,2.382,495,2.382,496,2.382,497,2.849,498,2.382,499,2.849,500,2.382,501,2.778,502,2.382,503,2.382]],["title/classes/TeamEventsHistory.html",[13,0.118,504,2.807]],["body/classes/TeamEventsHistory.html",[3,0.249,4,0.249,5,0.197,7,0.398,8,0.02,12,0.365,13,0.133,14,2.627,16,0.014,17,0.014,20,0.39,26,1.02,30,0.801,45,0.914,71,1.437,96,1.554,145,1.365,151,1.061,153,1.195,214,2.933,353,1.988,388,3.771,397,2.476,398,2.274,399,2.338,448,2.438,456,3.151,457,2.438,458,2.438,465,2.935,491,2.862,504,4.137,505,4.094,506,2.631,507,3.674,508,3.574,509,4.127,510,4.127,511,3.674,512,3.757,513,4.127,514,3.151,515,4.646,516,4.646,517,4.646,518,4.646,519,3.757,520,3.539]],["title/interfaces/TeamEventsInterface.html",[403,1.783,472,2.344]],["body/interfaces/TeamEventsInterface.html",[3,0.29,4,0.29,5,0.23,7,0.354,8,0.019,12,0.361,16,0.016,17,0.016,20,0.454,30,0.846,45,1.202,153,1.318,384,2.483,393,1.676,403,2.898,405,3.068,410,3.068,465,2.2,472,3.81,474,3.068,490,2.844,507,4.056,508,4.017,511,3.746,521,3.675,522,3.338]],["title/classes/TeamHistory.html",[13,0.118,523,2.807]],["body/classes/TeamHistory.html",[3,0.253,4,0.253,5,0.2,7,0.402,8,0.02,12,0.33,13,0.135,14,2.655,16,0.014,17,0.014,20,0.396,26,1.09,30,0.756,45,1.16,71,1.461,96,1.661,145,1.387,151,1.078,153,1.207,214,2.956,353,2.523,384,3.145,388,3.787,397,2.502,398,2.31,399,2.363,410,3.886,448,3.601,456,3.202,457,2.478,458,3.601,489,2.908,505,4.273,506,2.673,507,3.693,522,4.227,523,4.18,524,4.194,525,4.194,526,4.194,527,4.194,528,3.596]],["title/interfaces/TeamHistoryInterface.html",[403,1.783,474,2.344]],["body/interfaces/TeamHistoryInterface.html",[3,0.284,4,0.284,5,0.225,7,0.346,8,0.019,12,0.356,16,0.015,17,0.015,20,0.445,30,0.813,45,1.246,153,1.301,384,3.482,393,1.641,403,2.86,405,3.003,410,4.301,465,2.153,472,3.003,474,3.76,490,2.784,507,4.041,508,2.784,511,3.249,521,3.598,522,4.679]],["title/controllers/TeamsController.html",[85,1.783,529,2.55]],["body/controllers/TeamsController.html",[1,1.18,3,0.129,4,0.129,5,0.102,7,0.446,8,0.02,9,0.579,12,0.129,13,0.069,16,0.009,17,0.009,20,0.202,21,1.454,23,1.039,26,1.069,28,2.683,29,2.057,30,0.728,31,2.539,37,2.736,45,1.196,54,2.781,80,2.148,83,0.979,85,1.039,88,1.485,95,3.601,96,1.629,100,3.872,102,1.173,116,2.336,117,3.273,118,1.485,122,1.105,124,1.266,125,1.485,128,1.485,129,0.786,132,1.485,137,1.99,138,3.779,145,0.709,146,2.411,178,1.539,181,1.485,189,1.18,195,1.18,206,1.634,210,2.572,213,1.856,215,2.147,216,1.485,223,2.147,225,3.009,227,1.18,230,1.99,232,1.636,259,1.365,279,2.889,282,3.368,288,2.827,356,0.875,374,3.764,393,1.898,529,2.336,530,1.837,531,1.837,532,2.889,533,2.157,534,3.009,535,3.369,536,2.336,537,3.369,538,2.336,539,2.889,540,2.889,541,3.369,542,1.837,543,3.369,544,2.142,545,3.369,546,3.369,547,1.837,548,1.837,549,2.142,550,2.142,551,2.142,552,3.369,553,2.142,554,1.485,555,2.889,556,2.142,557,3.22,558,2.142,559,2.142,560,2.142,561,1.485,562,2.142,563,2.142,564,2.142,565,2.142,566,2.142,567,2.142,568,2.142,569,2.142,570,2.142,571,2.889,572,2.142,573,1.99,574,1.636,575,3.764,576,2.142,577,2.142,578,1.636,579,1.636,580,1.837,581,1.636,582,2.148,583,1.837,584,1.266,585,2.572,586,1.365,587,1.837,588,2.142,589,2.142,590,2.142,591,2.142,592,2.142,593,2.142,594,2.142,595,1.636,596,1.837,597,2.142,598,2.142,599,2.142,600,2.142,601,2.142,602,1.837,603,2.142,604,2.142,605,1.837,606,2.142,607,2.142,608,2.142,609,2.142,610,2.142,611,2.142,612,2.142,613,2.142,614,2.142,615,2.142,616,2.142,617,3.369,618,2.142,619,2.142,620,2.142,621,2.142,622,1.837,623,1.837,624,2.142]],["title/modules/TeamsModule.html",[55,1.68,62,2.025]],["body/modules/TeamsModule.html",[3,0.266,4,0.266,5,0.211,7,0.512,8,0.02,9,1.191,12,0.266,13,0.141,16,0.015,17,0.015,29,1.458,55,2.583,57,2.273,58,2.741,62,3.903,64,2.917,65,3.34,66,2.603,67,2.427,69,2.809,70,3.055,71,1.535,72,3.055,83,2.583,84,3.603,393,1.535,397,2.014,499,3.92,529,4.328,582,3.817,583,3.778,625,3.778,626,3.778,627,3.778,628,4.406,629,4.316,630,3.92,631,4.406,632,3.778,633,3.364,634,4.406]],["title/injectables/TeamsService.html",[0,0.994,582,1.897]],["body/injectables/TeamsService.html",[0,0.716,2,0.728,3,0.096,4,0.096,5,0.076,7,0.403,8,0.02,9,0.43,12,0.096,13,0.051,16,0.007,17,0.007,20,0.15,21,1.143,23,1.285,26,1.02,28,2.56,29,2.034,30,0.72,31,2.422,37,2.56,45,1.199,54,2.609,71,0.555,78,1.216,80,3.493,102,1.968,122,0.822,145,2.065,146,1.941,178,2.012,181,2.359,188,2.272,189,2.907,195,0.877,206,2.981,213,1.459,215,1.015,216,1.104,223,1.689,225,1.689,227,3.595,230,3.118,231,1.104,240,1.565,259,2.528,275,2.272,282,2.602,285,1.216,286,1.216,287,3.492,288,2.776,353,1.455,374,3.212,393,2.343,399,0.687,457,0.941,465,1.555,467,2.272,468,2.272,490,0.941,492,1.216,507,1.459,508,0.941,511,0.877,519,1.104,532,2.272,533,1.211,534,2.528,536,1.837,538,1.837,539,2.272,540,2.272,542,2.272,554,1.837,557,2.01,561,1.837,573,2.01,574,2.023,575,3.364,580,1.365,581,1.216,582,1.367,584,0.941,585,2.023,586,1.015,587,1.365,595,1.216,630,1.104,632,1.365,635,1.365,636,2.649,637,2.649,638,2.649,639,2.649,640,1.592,641,3.028,642,1.592,643,2.649,644,1.592,645,2.649,646,1.592,647,1.592,648,1.592,649,2.649,650,1.592,651,2.649,652,1.592,653,2.649,654,2.649,655,1.592,656,1.592,657,2.649,658,1.592,659,2.649,660,1.592,661,2.649,662,1.592,663,1.592,664,2.023,665,1.216,666,1.592,667,1.592,668,1.365,669,1.592,670,1.592,671,4.753,672,4.404,673,1.592,674,2.649,675,4.315,676,2.649,677,3.776,678,1.592,679,4.404,680,1.592,681,2.649,682,1.365,683,2.272,684,1.365,685,3.296,686,1.365,687,1.592,688,1.365,689,2.917,690,2.272,691,3.402,692,1.365,693,1.365,694,1.592,695,1.592,696,1.592,697,1.365,698,1.365,699,1.216,700,1.365,701,2.649,702,1.592,703,2.649,704,2.649,705,2.649,706,2.649,707,1.592,708,2.649,709,2.272,710,1.592,711,1.592,712,1.592]],["title/classes/Tournament.html",[13,0.118,713,2.025]],["body/classes/Tournament.html",[3,0.192,4,0.192,5,0.152,7,0.388,8,0.02,12,0.319,13,0.102,16,0.012,17,0.012,20,0.3,26,1.142,30,0.845,45,1.194,71,1.107,96,1.74,99,2.908,102,1.578,145,1.052,151,0.817,153,0.999,214,2.197,222,2.338,306,4.031,307,4.031,353,2.633,356,2.35,383,3.365,388,3.828,391,2.888,392,3.661,393,1.107,397,2.07,398,1.751,399,1.372,446,3.119,448,3.736,450,3.142,457,3.4,458,3.736,459,2.888,484,3.459,493,2.427,497,3.99,713,2.908,714,2.204,715,3.661,716,4.527,717,4.031,718,4.527,719,4.031,720,3.179,721,3.179,722,3.179,723,3.179,724,3.179,725,3.179,726,3.179,727,3.179,728,3.179,729,3.179,730,2.427,731,3.142,732,2.726]],["title/controllers/TournamentsController.html",[85,1.783,733,2.55]],["body/controllers/TournamentsController.html",[1,0.904,3,0.21,4,0.099,5,0.078,7,0.407,8,0.02,9,0.443,12,0.099,13,0.053,16,0.007,17,0.007,20,0.155,21,1.172,26,1.029,28,2.465,29,1.889,30,0.668,31,2.332,37,2.835,45,1.189,48,0.969,54,2.632,80,3.706,83,0.75,85,0.796,88,1.138,95,3.649,96,1.567,99,1.496,100,4.312,102,1.407,116,1.883,117,3.104,118,1.138,124,0.969,125,1.138,128,1.138,129,0.602,132,1.138,137,3.461,138,3.345,189,3.36,205,1.883,206,1.959,214,1.959,227,2.943,287,1.731,288,2.226,303,3.274,378,3.406,381,1.496,384,1.401,387,1.731,393,0.946,407,3.64,533,1.588,534,2.575,547,1.407,548,1.407,557,3.018,571,2.329,573,1.605,578,1.253,579,1.253,584,0.969,586,1.046,713,3.509,717,2.074,733,1.883,734,1.407,735,3.839,736,2.98,737,2.716,738,2.716,739,3.464,740,3.464,741,2.329,742,3.476,743,2.98,744,2.716,745,2.98,746,2.98,747,1.641,748,5.8,749,3.406,750,1.641,751,1.641,752,1.641,753,3.464,754,2.716,755,1.641,756,2.716,757,1.407,758,2.716,759,1.641,760,1.641,761,2.716,762,1.641,763,2.716,764,2.716,765,1.641,766,2.716,767,1.641,768,1.407,769,2.716,770,1.641,771,1.641,772,1.641,773,1.641,774,3.085,775,2.716,776,2.329,777,2.329,778,1.641,779,1.641,780,1.641,781,1.641,782,1.641,783,1.641,784,1.641,785,1.641,786,2.716,787,2.716,788,1.641,789,1.641,790,1.641,791,2.716,792,2.716,793,2.716,794,2.053,795,1.407,796,2.654,797,1.407,798,1.407,799,1.407,800,1.641,801,1.641,802,1.641,803,1.641,804,4.477,805,1.641,806,1.641,807,1.641,808,1.641,809,1.641,810,1.641,811,1.641,812,1.641,813,2.716,814,1.641,815,1.641,816,1.641,817,1.641,818,1.641,819,1.641,820,1.641,821,1.641,822,1.641,823,1.641,824,1.641,825,1.641,826,1.641,827,1.641]],["title/modules/TournamentsModule.html",[55,1.68,63,2.344]],["body/modules/TournamentsModule.html",[3,0.243,4,0.243,5,0.193,7,0.524,8,0.02,9,1.09,12,0.243,13,0.129,16,0.014,17,0.014,29,1.334,55,2.438,57,2.08,58,2.587,62,3.746,63,4.624,64,3.509,65,3.152,66,2.382,67,2.221,69,3.4,70,2.795,71,1.404,72,2.795,74,3.078,83,2.438,84,3.4,381,2.221,397,1.842,401,2.57,446,2.382,459,2.57,629,4.073,633,3.078,713,2.221,731,3.699,733,4.146,794,4.314,795,3.457,828,3.457,829,3.457,830,3.457,831,4.031,832,4.031,833,4.031,834,3.457,835,4.031,836,4.031,837,4.031]],["title/injectables/TournamentsService.html",[0,0.994,794,2.172]],["body/injectables/TournamentsService.html",[0,0.609,2,0.6,3,0.079,4,0.079,5,0.063,7,0.418,8,0.02,9,0.355,12,0.079,13,0.042,16,0.006,17,0.006,20,0.279,21,0.972,23,1.092,26,0.98,28,2.339,29,1.793,30,0.666,31,2.213,37,2.457,45,1.134,54,1.856,67,0.724,71,0.458,80,3.532,99,1.241,102,1.03,145,2.107,178,1.601,181,2.05,183,0.837,189,3.137,195,1.629,205,0.911,206,3.058,210,1.003,215,1.436,216,0.911,218,0.776,219,1.003,223,1.884,225,2.233,227,3.438,230,3.493,231,2.05,232,1.003,251,2.733,259,0.837,288,1.629,303,2.866,306,1.72,307,1.72,353,0.826,378,2.513,381,0.724,383,1.436,384,1.525,385,2.257,386,2.257,387,2.931,393,1.831,399,0.567,407,2.513,410,2.513,411,2.43,446,1.747,457,1.331,465,0.6,466,1.127,490,0.776,507,2.673,508,1.331,511,0.724,522,1.562,531,1.931,533,1.029,534,2.233,557,1.331,573,0.776,581,1.003,582,2.373,584,0.776,586,0.837,602,1.127,641,2.675,664,2.257,665,1.003,675,1.72,677,2.535,685,2.05,689,1.127,699,1.72,700,3.38,713,3.257,715,3.364,716,1.127,717,2.675,718,1.127,719,1.003,730,1.003,736,1.931,739,2.535,740,2.535,741,1.931,743,1.931,745,1.931,746,1.931,748,4.647,749,2.513,768,1.931,777,1.127,794,1.331,796,2.257,797,1.127,798,1.127,799,1.127,834,1.127,838,1.127,839,2.252,840,2.252,841,2.252,842,2.252,843,1.314,844,1.314,845,2.252,846,1.314,847,4.882,848,1.314,849,2.252,850,1.314,851,1.314,852,2.252,853,1.314,854,2.252,855,1.314,856,1.314,857,1.314,858,1.314,859,2.252,860,1.314,861,1.314,862,1.314,863,1.314,864,1.314,865,1.314,866,1.314,867,2.252,868,1.314,869,1.314,870,1.314,871,1.127,872,1.931,873,1.127,874,1.314,875,2.252,876,1.314,877,1.314,878,1.314,879,1.314,880,1.314,881,1.314,882,1.314,883,1.314,884,1.314,885,1.314,886,1.314,887,1.314,888,1.314,889,1.314,890,1.314,891,1.314,892,1.314,893,1.314,894,1.931,895,1.127,896,2.252,897,1.314,898,1.314,899,3.504,900,2.252,901,1.314,902,1.314,903,1.314,904,1.314,905,1.314,906,2.252,907,1.314,908,1.314,909,1.314,910,1.314,911,1.314,912,1.314,913,1.314,914,1.314,915,1.314,916,1.314,917,1.314,918,2.252,919,2.252,920,3.283,921,1.314,922,1.314,923,1.314,924,1.314,925,1.314,926,1.314,927,1.314,928,2.252,929,2.252,930,1.314,931,2.252,932,2.252,933,1.314,934,1.314,935,3.942,936,3.504,937,1.314,938,1.314,939,1.314,940,2.956,941,1.314,942,1.314,943,2.252,944,2.252,945,1.314,946,1.314,947,1.314,948,2.252,949,1.314,950,1.314,951,1.314,952,1.314,953,1.314,954,1.314,955,2.252,956,1.314,957,1.314,958,1.314,959,1.314,960,1.314,961,1.314,962,1.314,963,1.314,964,1.314,965,1.314,966,1.314,967,1.314,968,1.314,969,1.314,970,1.127,971,1.314,972,1.127,973,1.314,974,1.314,975,1.314,976,1.314,977,1.314]],["title/classes/UpdateTeamDto.html",[13,0.118,575,2.344]],["body/classes/UpdateTeamDto.html",[3,0.327,4,0.327,5,0.259,7,0.472,8,0.019,12,0.327,13,0.174,14,2.625,16,0.017,17,0.017,151,1.391,282,3.198,284,4.133,512,3.754,533,2.474,575,4.092,585,4.133,978,4.642,979,4.133,980,4.133,981,5.413]],["title/classes/UpdateTournamentDto.html",[13,0.118,749,2.344]],["body/classes/UpdateTournamentDto.html",[3,0.328,4,0.328,5,0.26,7,0.473,8,0.019,12,0.328,13,0.174,14,2.634,16,0.017,17,0.017,129,1.993,151,1.396,303,3.209,305,3.767,533,2.482,749,4.1,796,4.148,979,4.148,982,4.658,983,5.432]],["title/classes/UpdateUserDto.html",[13,0.118,984,2.55]],["body/classes/UpdateUserDto.html",[3,0.327,4,0.327,5,0.259,7,0.472,8,0.019,12,0.327,13,0.174,14,2.625,16,0.017,17,0.017,113,2.625,122,2.793,151,1.391,321,3.451,512,3.754,533,2.474,979,4.133,980,4.133,984,4.451,985,4.642,986,5.413]],["title/classes/User.html",[13,0.118,102,1.281]],["body/classes/User.html",[3,0.173,4,0.173,5,0.137,7,0.403,8,0.02,12,0.331,13,0.135,16,0.011,17,0.011,20,0.27,26,1.132,30,0.832,45,1.191,46,3.451,71,0.998,96,1.724,102,2.033,145,0.948,146,2.032,148,2.741,151,0.736,153,0.927,154,2.741,183,3.172,195,2.315,206,1.389,214,2.038,218,2.94,240,2.94,288,1.578,322,3.451,323,3.801,353,2.59,388,3.827,391,3.172,392,3.801,393,2.196,397,1.92,398,1.578,399,1.814,448,3.239,450,4.048,458,3.239,469,2.456,484,4.186,493,2.187,494,2.456,495,2.456,496,2.456,497,3.451,498,3.603,502,2.456,503,2.456,514,2.187,693,4.267,709,4.701,715,2.914,987,1.826,988,2.864,989,4.202,990,2.864,991,4.231,992,2.864,993,2.864,994,2.864,995,2.864,996,2.864,997,2.864,998,2.864,999,2.864,1000,2.864,1001,2.187,1002,3.603,1003,3.208,1004,2.914,1005,2.456,1006,2.864]],["title/classes/UserDetails.html",[13,0.118,991,2.55]],["body/classes/UserDetails.html",[3,0.254,4,0.254,5,0.202,8,0.02,12,0.332,13,0.135,16,0.014,17,0.014,20,0.398,23,2.964,26,1.162,30,0.786,45,1.162,151,1.084,153,1.212,347,4.238,349,4.667,350,4.667,353,1.547,354,4.667,355,4.667,356,2.243,514,3.219,991,3.81,1007,5.354,1008,3.219,1009,5.494,1010,5.494,1011,4.216,1012,4.216,1013,4.216,1014,4.216,1015,4.711,1016,4.711,1017,4.711,1018,4.711,1019,4.195,1020,4.216,1021,4.216,1022,4.216,1023,4.216,1024,4.216]],["title/injectables/UserUpdateSelfDto.html",[0,0.994,1025,2.344]],["body/injectables/UserUpdateSelfDto.html",[0,1.562,2,2.084,3,0.275,4,0.275,5,0.218,7,0.49,8,0.02,9,1.233,12,0.275,13,0.204,16,0.015,17,0.015,20,0.431,26,0.975,30,0.781,45,0.975,96,1.485,122,2.353,153,1.274,154,3.494,159,2.641,160,1.968,213,3.494,300,4.398,323,4.398,327,4.251,339,4.412,342,4.412,344,3.162,357,3.91,533,2.084,1025,3.683,1026,5.439,1027,3.91,1028,4.561,1029,4.561,1030,4.561]],["title/controllers/UsersController.html",[85,1.783,1031,2.55]],["body/controllers/UsersController.html",[1,2.668,3,0.115,4,0.115,5,0.091,7,0.441,8,0.02,9,0.515,12,0.115,13,0.061,16,0.008,17,0.008,20,0.417,21,1.324,26,1.012,28,2.59,29,1.985,30,0.702,31,2.45,37,2.872,45,1.086,48,1.125,54,2.741,80,2.67,83,0.87,85,0.924,88,1.321,95,3.698,96,1.542,99,2.433,100,4.048,102,2.357,113,2.746,116,2.671,117,2.671,118,1.321,122,0.983,124,1.125,125,1.321,128,1.321,129,0.699,132,1.321,137,3.345,138,3.589,145,1.015,146,2.312,147,2.631,178,1.76,189,1.69,199,4.855,201,2.631,205,2.127,206,0.924,213,2.122,222,1.988,227,1.69,230,1.125,287,1.956,356,1.573,366,3.609,393,1.687,427,2.127,440,1.321,477,2.343,533,1.402,536,2.127,538,3.063,554,1.321,555,2.631,557,3.345,561,1.321,573,1.125,578,1.454,579,2.941,584,1.125,605,1.633,622,1.633,623,1.633,664,2.343,753,2.631,774,2.343,776,3.787,1003,2.343,1025,2.816,1031,2.127,1032,1.633,1033,1.905,1034,2.631,1035,3.068,1036,3.068,1037,2.631,1038,2.631,1039,3.852,1040,1.633,1041,1.905,1042,1.905,1043,1.905,1044,1.905,1045,1.905,1046,1.905,1047,1.905,1048,6.249,1049,1.905,1050,1.905,1051,3.068,1052,1.905,1053,1.905,1054,1.905,1055,1.905,1056,1.905,1057,1.905,1058,1.905,1059,1.905,1060,1.905,1061,1.905,1062,3.068,1063,1.905,1064,3.068,1065,1.905,1066,1.905,1067,4.843,1068,1.905,1069,1.905,1070,3.068,1071,3.068,1072,1.633,1073,1.633,1074,1.633,1075,1.905,1076,1.905,1077,1.633,1078,1.633,1079,1.905,1080,1.905,1081,1.905,1082,1.905,1083,1.905,1084,1.905,1085,1.905,1086,1.905,1087,1.905,1088,1.905,1089,3.068,1090,1.905,1091,1.905,1092,1.905,1093,1.905,1094,1.905,1095,1.905,1096,1.905,1097,1.905,1098,1.905,1099,1.905,1100,1.905,1101,1.905,1102,1.905,1103,1.905,1104,1.905,1105,1.905,1106,1.905,1107,1.905,1108,1.905,1109,1.905,1110,1.905]],["title/modules/UsersModule.html",[55,1.68,64,1.897]],["body/modules/UsersModule.html",[3,0.266,4,0.266,5,0.211,7,0.512,8,0.02,9,1.191,12,0.266,13,0.141,16,0.015,17,0.015,29,1.458,55,2.583,57,2.273,58,2.741,62,3.114,64,3.655,65,3.34,66,2.603,67,2.427,69,2.809,70,3.055,71,1.535,74,3.364,83,2.583,84,3.603,102,1.535,178,3.38,343,3.055,397,2.014,629,4.316,630,3.92,633,3.364,1004,3.92,1031,4.328,1072,3.778,1111,3.778,1112,3.778,1113,3.778,1114,4.406,1115,4.406,1116,4.406]],["title/injectables/UsersService.html",[0,0.994,178,1.68]],["body/injectables/UsersService.html",[0,0.751,2,0.771,3,0.102,4,0.102,5,0.081,7,0.424,8,0.02,9,0.456,12,0.102,13,0.054,16,0.007,17,0.007,20,0.262,21,1.199,23,1.348,26,1.037,28,2.605,29,1.997,30,0.719,31,2.465,37,2.605,45,1.165,54,2.551,71,0.587,78,1.288,80,3.671,102,2.058,113,2.204,122,1.434,137,1.642,145,1.618,146,2.647,148,2.264,154,2.264,178,1.27,189,2.694,195,2.503,206,2.927,209,2.122,213,2.694,215,1.771,222,1.828,223,1.771,225,1.075,227,2.976,230,2.889,231,1.927,240,0.997,259,2.259,322,1.17,343,1.17,353,1.02,356,1.856,366,2.897,393,2.008,399,0.728,465,0.771,477,2.122,490,0.997,507,1.531,508,1.642,511,0.929,519,1.927,533,1.27,534,2.619,536,2.85,538,1.927,554,1.927,557,2.428,561,1.927,573,1.642,574,1.288,582,2.345,584,0.997,586,1.075,595,2.122,596,1.446,630,1.17,641,3.138,665,1.288,668,1.446,675,3.734,682,2.383,683,2.383,684,3.897,685,2.85,686,1.446,688,1.446,690,1.446,692,1.446,697,1.446,698,1.446,699,1.288,713,0.929,757,1.446,847,3.039,871,1.446,873,1.446,894,1.446,895,1.446,920,4.609,984,3.746,1001,1.288,1025,3.675,1034,2.383,1037,2.383,1038,2.383,1040,2.383,1073,1.446,1074,1.446,1077,1.446,1078,1.446,1117,1.446,1118,2.779,1119,2.779,1120,2.779,1121,3.544,1122,1.687,1123,3.544,1124,1.687,1125,2.779,1126,1.687,1127,2.779,1128,1.687,1129,1.687,1130,5.91,1131,1.687,1132,3.544,1133,1.687,1134,2.779,1135,2.779,1136,1.687,1137,2.779,1138,1.687,1139,1.687,1140,1.687,1141,1.687,1142,2.779,1143,1.687,1144,1.687,1145,1.687,1146,1.687,1147,1.687,1148,1.687,1149,2.779,1150,2.779,1151,1.687,1152,1.687,1153,1.687,1154,1.687,1155,5.17,1156,4.109,1157,3.544,1158,1.687,1159,1.687,1160,1.687,1161,1.687,1162,1.687,1163,1.687,1164,1.687,1165,1.687,1166,1.687,1167,1.687,1168,1.687,1169,1.687,1170,1.687,1171,1.687,1172,1.687,1173,1.687,1174,1.687]],["title/coverage.html",[1175,4.3]],["body/coverage.html",[0,1.76,1,1.498,5,0.13,6,2.332,8,0.02,13,0.231,16,0.01,17,0.01,18,1.734,19,2.077,30,0.318,85,2.592,86,1.886,87,2.332,102,0.947,109,1.734,113,1.319,119,1.607,126,1.886,152,2.332,165,1.734,174,2.332,178,1.243,206,1.319,209,2.077,213,1.498,282,1.607,283,2.332,284,3.088,303,1.607,304,2.332,305,3.348,320,3.088,321,3.408,327,1.734,366,1.734,367,2.332,368,2.332,374,1.734,375,2.332,378,1.734,379,2.332,381,1.498,382,2.804,393,0.947,401,1.734,403,2.592,404,1.734,406,2.332,407,1.734,408,2.332,409,2.332,417,2.332,418,2.332,426,2.077,427,1.886,429,2.332,440,1.886,446,1.607,447,2.804,459,1.734,461,2.077,462,2.332,463,2.804,465,1.848,472,1.734,474,1.734,489,1.886,491,1.886,499,1.886,504,2.077,505,3.408,506,3.408,521,3.088,523,2.077,529,1.886,530,2.332,575,1.734,582,1.403,635,2.332,713,1.498,714,2.804,731,1.886,733,1.886,734,2.332,749,1.734,794,1.607,838,2.332,920,5.759,978,2.332,982,2.332,984,1.886,985,2.332,987,2.578,991,1.886,1004,1.886,1007,2.077,1008,2.077,1025,1.734,1026,2.332,1027,2.332,1031,1.886,1032,2.332,1117,2.332,1175,2.332,1176,2.72,1177,2.72,1178,2.72,1179,5.714,1180,2.72,1181,2.72,1182,6.202,1183,2.332,1184,6.372,1185,6.942,1186,2.332,1187,2.332,1188,4.044,1189,5.714,1190,4.044,1191,2.72,1192,2.72,1193,2.72,1194,2.72,1195,2.72,1196,2.72,1197,2.72,1198,2.72,1199,2.72,1200,4.044,1201,2.72,1202,2.72,1203,2.72,1204,2.72,1205,2.72,1206,2.72]],["title/dependencies.html",[58,2.144,1207,2.634]],["body/dependencies.html",[8,0.02,9,1.273,11,3.003,13,0.189,16,0.015,17,0.015,41,4.504,42,3.598,43,2.784,58,2.285,71,1.641,124,2.784,129,1.729,160,2.034,169,3.598,217,4.04,344,3.267,399,2.034,438,4.04,512,3.267,872,4.04,980,3.598,1208,6.948,1209,4.712,1210,4.712,1211,4.712,1212,4.712,1213,4.712,1214,4.712,1215,4.712,1216,4.712,1217,4.712,1218,4.712,1219,4.712,1220,4.712,1221,4.712,1222,4.712,1223,4.712,1224,4.712,1225,4.712,1226,4.712,1227,4.712,1228,4.712,1229,4.712]],["title/miscellaneous/enumerations.html",[1230,1.585,1231,3.791]],["body/miscellaneous/enumerations.html",[8,0.02,16,0.015,17,0.015,20,0.438,218,3.452,347,4.052,465,2.67,505,2.959,506,3.725,511,3.219,515,5.01,516,5.01,517,5.01,518,5.01,519,4.052,715,4.052,987,2.959,1002,5.01,1003,4.462,1007,3.544,1008,4.462,1015,5.01,1016,5.01,1017,5.01,1018,5.01,1019,4.462,1230,2.395,1231,3.98,1232,3.98,1233,4.642,1234,3.544,1235,6.415]],["title/miscellaneous/functions.html",[1230,1.585,1236,3.791]],["body/miscellaneous/functions.html",[8,0.017,16,0.017,17,0.017,20,0.543,1186,4.932,1187,6.017,1230,2.968,1236,4.932,1237,5.752]],["title/index.html",[20,0.29,719,2.346,1238,3.072]],["body/index.html",[5,0.228,8,0.019,16,0.015,17,0.015,58,2.313,735,5.096,774,3.642,970,4.089,972,4.089,1239,4.769,1240,5.943,1241,4.769,1242,4.769,1243,4.769,1244,4.769,1245,4.769,1246,4.769,1247,4.769,1248,4.769,1249,5.943,1250,4.538,1251,6.973,1252,6.474,1253,4.769,1254,4.769,1255,4.769,1256,4.769,1257,4.769,1258,4.769,1259,4.769,1260,4.769,1261,5.943,1262,4.769,1263,4.769,1264,4.769,1265,4.769,1266,4.769,1267,6.777,1268,4.769,1269,4.769,1270,4.769,1271,4.769,1272,5.943,1273,4.769,1274,4.769,1275,4.769]],["title/modules.html",[57,2.587]],["body/modules.html",[8,0.017,16,0.017,17,0.017,56,3.741,57,2.783,61,3.439,62,2.972,63,3.439,64,2.783,1019,5.511,1276,7.218,1277,7.218,1278,7.218]],["title/overview.html",[1279,4.3]],["body/overview.html",[2,1.842,8,0.019,16,0.014,17,0.014,18,3.811,56,4.99,57,2.08,58,2.587,59,3.457,60,3.457,61,4.624,62,3.821,63,4.587,64,3.634,65,3.152,66,2.382,67,2.221,83,1.842,119,3.533,151,1.036,162,3.457,164,3.457,165,3.811,178,3.17,297,3.699,405,2.57,426,3.078,582,3.579,625,3.457,626,3.457,627,3.457,685,2.795,794,4.098,828,3.457,829,3.457,830,3.457,1111,3.457,1112,3.457,1113,3.457,1279,3.457,1280,4.031,1281,4.031,1282,4.031]],["title/properties.html",[153,0.975,1207,2.634]],["body/properties.html",[8,0.019,16,0.017,17,0.017,99,3.134,153,1.255,1283,5.689,1284,5.689,1285,5.689,1286,5.689,1287,5.689]],["title/miscellaneous/typealiases.html",[1230,1.585,1288,4.421]],["body/miscellaneous/typealiases.html",[8,0.016,16,0.016,17,0.016,19,4.063,20,0.502,30,0.744,34,5.448,382,3.69,400,5.448,447,3.69,455,5.448,463,3.69,492,4.852,714,3.69,730,4.852,987,3.392,1001,4.852,1230,2.745,1234,4.063,1289,5.321,1290,5.321,1291,4.563,1292,4.563,1293,4.563,1294,4.563,1295,5.321]],["title/miscellaneous/variables.html",[1230,1.585,1250,3.376]],["body/miscellaneous/variables.html",[8,0.019,16,0.015,17,0.015,20,0.433,45,0.774,382,3.181,401,3.697,402,3.933,440,4.634,447,3.181,459,3.697,460,3.933,463,3.181,465,2.65,489,4.022,491,4.022,497,5.016,499,4.022,500,3.933,505,3.697,506,4.26,520,3.933,528,3.933,714,3.181,731,4.022,732,3.933,987,2.924,1004,4.022,1005,3.933,1183,3.933,1230,2.367,1232,4.973,1234,3.503,1235,6.203,1250,3.503,1291,3.933,1292,3.933,1293,3.933,1294,3.933,1296,4.587,1297,4.587]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":920,"title":{},"body":{"injectables/TournamentsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1284,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1224,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1218,"title":{},"body":{"dependencies.html":{}}}],["0.30.1",{"_index":1216,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":911,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["0.5.1",{"_index":1217,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1220,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1185,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1195,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1190,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1193,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1198,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1194,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1182,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1189,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1179,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1188,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1200,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1199,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":685,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1.6.5",{"_index":1229,"title":{},"body":{"dependencies.html":{}}}],["1/12",{"_index":1192,"title":{},"body":{"coverage.html":{}}}],["1/14",{"_index":1204,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":880,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["16",{"_index":310,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["1].finished",{"_index":926,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["2",{"_index":923,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["2.2.0",{"_index":1209,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1282,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":1214,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1226,"title":{},"body":{"dependencies.html":{}}}],["30d",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["30min",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["32",{"_index":311,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["4",{"_index":297,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/Team.html":{},"overview.html":{}}}],["4.0.0",{"_index":1221,"title":{},"body":{"dependencies.html":{}}}],["42",{"_index":1196,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1280,"title":{},"body":{"overview.html":{}}}],["54",{"_index":1201,"title":{},"body":{"coverage.html":{}}}],["6.1.3",{"_index":1215,"title":{},"body":{"dependencies.html":{}}}],["6.6.5",{"_index":1219,"title":{},"body":{"dependencies.html":{}}}],["6/11",{"_index":1202,"title":{},"body":{"coverage.html":{}}}],["6/14",{"_index":1197,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":1181,"title":{},"body":{"coverage.html":{}}}],["64",{"_index":319,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["64'])@isnotempty",{"_index":312,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["7",{"_index":1203,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":1228,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":1180,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1191,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1281,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":1208,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":1210,"title":{},"body":{"dependencies.html":{}}}],["90",{"_index":879,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["_id",{"_index":456,"title":{},"body":{"classes/Stage.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{}}}],["_v",{"_index":1156,"title":{},"body":{"injectables/UsersService.html":{}}}],["access",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstoken",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":18,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["account",{"_index":477,"title":{},"body":{"classes/Team.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["activetournament",{"_index":464,"title":{},"body":{"classes/Team.html":{}}}],["add",{"_index":1254,"title":{},"body":{"index.html":{}}}],["adding",{"_index":956,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["admin",{"_index":1003,"title":{},"body":{"classes/User.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":1289,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allfinishedflag",{"_index":943,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["allows",{"_index":774,"title":{},"body":{"controllers/TournamentsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["already",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TournamentsService.html":{}}}],["apihideproperty",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["apihideproperty()@isempty",{"_index":334,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproduces",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["apiproperty",{"_index":161,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/MatchResultDto.html":{}}}],["apiproperty()@isboolean()@isnotempty",{"_index":371,"title":{},"body":{"classes/HandleInviteDto.html":{}}}],["apiproperty()@isemail()@isnotempty",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isempty",{"_index":325,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty()@isstring",{"_index":292,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty()@isstring()@length(4",{"_index":296,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["apiproperty()@isnumber()@isin(['8",{"_index":309,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["apiproperty()@isnumber()@isnotempty",{"_index":414,"title":{},"body":{"classes/MatchResultDto.html":{}}}],["apiproperty()@isstring",{"_index":290,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/CreateUserDto.html":{}}}],["apiproperty()@isstring()@isnotempty",{"_index":155,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/MatchResultDto.html":{}}}],["apiproperty({type",{"_index":328,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apitags",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('teams",{"_index":588,"title":{},"body":{"controllers/TeamsController.html":{}}}],["apitags('tournaments",{"_index":800,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["apitags('users",{"_index":1079,"title":{},"body":{"controllers/UsersController.html":{}}}],["appmodule",{"_index":56,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argon",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["argon2.hash(createuserdto.password",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.hash(refreshtoken",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["async",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":86,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":109,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authdto.password",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authguard('jwt",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authmodule",{"_index":61,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1287,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":119,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["avatar",{"_index":322,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["await",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":1241,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(\"team",{"_index":1164,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception('access",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('already",{"_index":707,"title":{},"body":{"injectables/TeamsService.html":{}}}],["badrequestexception('invalid",{"_index":937,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["badrequestexception('not",{"_index":689,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{}}}],["badrequestexception('previous",{"_index":927,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["badrequestexception('team",{"_index":699,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('tournament",{"_index":899,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["badrequestexception('user",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('username",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('usernames",{"_index":593,"title":{},"body":{"controllers/TeamsController.html":{}}}],["badrequestexception('you",{"_index":698,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["basic",{"_index":754,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["body",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/Match.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"controllers/TeamsController.html":{},"classes/Tournament.html":{},"classes/UserDetails.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["bootstrap",{"_index":1187,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["bot",{"_index":1018,"title":{},"body":{"classes/UserDetails.html":{},"miscellaneous/enumerations.html":{}}}],["both",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["bracket",{"_index":913,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["brackets",{"_index":793,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["browse",{"_index":1278,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1276,"title":{},"body":{"modules.html":{}}}],["canactivate",{"_index":430,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":434,"title":{},"body":{"guards/RolesGuard.html":{}}}],["cant",{"_index":1167,"title":{},"body":{"injectables/UsersService.html":{}}}],["cd",{"_index":1265,"title":{},"body":{"index.html":{}}}],["changedescription",{"_index":736,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["changedescription(organizer",{"_index":846,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["changedescription(req",{"_index":747,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["changes",{"_index":1149,"title":{},"body":{"injectables/UsersService.html":{}}}],["checkifteamexists",{"_index":532,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["checkifteamexists(@param('tag",{"_index":603,"title":{},"body":{"controllers/TeamsController.html":{}}}],["checkifteamexists(tag",{"_index":542,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["checking",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["checks",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{}}}],["class",{"_index":13,"title":{"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"classes/MatchResultDto.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/Tournament.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":151,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"classes/MatchResultDto.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/Tournament.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"overview.html":{}}}],["cleared",{"_index":1089,"title":{},"body":{"controllers/UsersController.html":{}}}],["cleared.password",{"_index":1092,"title":{},"body":{"controllers/UsersController.html":{}}}],["cleared.refreshtoken",{"_index":1091,"title":{},"body":{"controllers/UsersController.html":{}}}],["client",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["clone",{"_index":1261,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_teamsmodule",{"_index":625,"title":{},"body":{"modules/TeamsModule.html":{},"overview.html":{}}}],["cluster_teamsmodule_exports",{"_index":626,"title":{},"body":{"modules/TeamsModule.html":{},"overview.html":{}}}],["cluster_teamsmodule_providers",{"_index":627,"title":{},"body":{"modules/TeamsModule.html":{},"overview.html":{}}}],["cluster_tournamentsmodule",{"_index":828,"title":{},"body":{"modules/TournamentsModule.html":{},"overview.html":{}}}],["cluster_tournamentsmodule_exports",{"_index":830,"title":{},"body":{"modules/TournamentsModule.html":{},"overview.html":{}}}],["cluster_tournamentsmodule_imports",{"_index":831,"title":{},"body":{"modules/TournamentsModule.html":{}}}],["cluster_tournamentsmodule_providers",{"_index":829,"title":{},"body":{"modules/TournamentsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1111,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1112,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1113,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["color",{"_index":285,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/Team.html":{},"injectables/TeamsService.html":{}}}],["common/decorators/roles.decorator",{"_index":1076,"title":{},"body":{"controllers/UsersController.html":{}}}],["common/guards/accesstoken.guard",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["common/guards/refreshtoken.guard",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["common/guards/roles.guard",{"_index":1075,"title":{},"body":{"controllers/UsersController.html":{}}}],["community",{"_index":1245,"title":{},"body":{"index.html":{}}}],["config",{"_index":32,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["config.get('jwt_access_secret",{"_index":53,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["config.get('jwt_refresh_secret",{"_index":423,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["config.get('mongodb_uri",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice",{"_index":25,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["console.log(createuserdto",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Match.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":23,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"classes/UserDetails.html":{},"injectables/UsersService.html":{}}}],["constructor(config",{"_index":24,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["constructor(private",{"_index":48,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":431,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(teammodel",{"_index":640,"title":{},"body":{"injectables/TeamsService.html":{}}}],["constructor(tournamentmodel",{"_index":843,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["constructor(usermodel",{"_index":1122,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":437,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":442,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":443,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":85,"title":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('teams",{"_index":589,"title":{},"body":{"controllers/TeamsController.html":{}}}],["controller('tournaments",{"_index":801,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["controller('users",{"_index":1080,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["country",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/UserDetails.html":{}}}],["coverage",{"_index":1175,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":533,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":1081,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(@req",{"_index":590,"title":{},"body":{"controllers/TeamsController.html":{}}}],["create(createteamdto",{"_index":645,"title":{},"body":{"injectables/TeamsService.html":{}}}],["create(createuserdto",{"_index":1040,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(req",{"_index":547,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{}}}],["create(user",{"_index":849,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["created",{"_index":515,"title":{},"body":{"classes/TeamEventsHistory.html":{},"miscellaneous/enumerations.html":{}}}],["createduser",{"_index":1152,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser.save",{"_index":1154,"title":{},"body":{"injectables/UsersService.html":{}}}],["creates",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{}}}],["createteamdto",{"_index":282,"title":{"classes/CreateTeamDto.html":{}},"body":{"classes/CreateTeamDto.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/UpdateTeamDto.html":{},"coverage.html":{}}}],["createteamdto.owner",{"_index":592,"title":{},"body":{"controllers/TeamsController.html":{}}}],["createtournamentdto",{"_index":303,"title":{"classes/CreateTournamentDto.html":{}},"body":{"classes/CreateTournamentDto.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTournamentDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":113,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.username",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["current",{"_index":597,"title":{},"body":{"controllers/TeamsController.html":{}}}],["currentteam",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/TeamsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["data",{"_index":1048,"title":{},"body":{"controllers/UsersController.html":{}}}],["date",{"_index":507,"title":{},"body":{"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["date.now",{"_index":674,"title":{},"body":{"injectables/TeamsService.html":{}}}],["decision",{"_index":369,"title":{},"body":{"classes/HandleInviteDto.html":{}}}],["decorators",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"classes/MatchResultDto.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"controllers/TeamsController.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"classes/User.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":497,"title":{},"body":{"classes/Team.html":{},"classes/Tournament.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":26,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["defualt",{"_index":989,"title":{},"body":{"classes/User.html":{}}}],["delete",{"_index":579,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":622,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/UsersController.html":{}}}],["delete('msg/:index",{"_index":1105,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletemsgatindex",{"_index":1034,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletemsgatindex(@req",{"_index":1106,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletemsgatindex(index",{"_index":1127,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletemsgatindex(req",{"_index":1042,"title":{},"body":{"controllers/UsersController.html":{}}}],["denied",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":58,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTournamentDto.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"properties.html":{}}}],["details",{"_index":323,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/User.html":{},"injectables/UserUpdateSelfDto.html":{}}}],["details.preferredroles",{"_index":1160,"title":{},"body":{"injectables/UsersService.html":{}}}],["details.ts",{"_index":1008,"title":{},"body":{"classes/UserDetails.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["details.ts:10",{"_index":1013,"title":{},"body":{"classes/UserDetails.html":{}}}],["details.ts:11",{"_index":1012,"title":{},"body":{"classes/UserDetails.html":{}}}],["details.ts:12",{"_index":1011,"title":{},"body":{"classes/UserDetails.html":{}}}],["details.ts:13",{"_index":1014,"title":{},"body":{"classes/UserDetails.html":{}}}],["details.ts:14",{"_index":1010,"title":{},"body":{"classes/UserDetails.html":{}}}],["detailsdto",{"_index":327,"title":{"classes/DetailsDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/UserUpdateSelfDto.html":{},"coverage.html":{}}}],["detailsdto})@isoptional()@isdefined()@type(undefined)@validatenested",{"_index":329,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["development",{"_index":1270,"title":{},"body":{"index.html":{}}}],["didnt",{"_index":969,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["directory",{"_index":1264,"title":{},"body":{"index.html":{}}}],["document",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"classes/Match.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"classes/User.html":{}}}],["documentation",{"_index":1176,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":1165,"title":{},"body":{"injectables/UsersService.html":{}}}],["doesnt",{"_index":700,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{}}}],["dropped",{"_index":965,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["dto/auth.dto",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":584,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/handle",{"_index":1077,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/invite",{"_index":587,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["dto/kick",{"_index":799,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["dto/match",{"_index":797,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["dto/update",{"_index":586,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["dto/user",{"_index":1073,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["each",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["email",{"_index":46,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/User.html":{}}}],["empty",{"_index":914,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["enough",{"_index":905,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["enum",{"_index":514,"title":{},"body":{"classes/TeamEventsHistory.html":{},"classes/User.html":{},"classes/UserDetails.html":{}}}],["enumerations",{"_index":1231,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":1256,"title":{},"body":{"index.html":{}}}],["environment",{"_index":1249,"title":{},"body":{"index.html":{}}}],["esport",{"_index":1239,"title":{},"body":{"index.html":{}}}],["eventenum",{"_index":511,"title":{},"body":{"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["eventenum.created",{"_index":673,"title":{},"body":{"injectables/TeamsService.html":{}}}],["eventenum.left",{"_index":692,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["eventenum.tournament_dropped",{"_index":964,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["eventenum.tournament_win",{"_index":953,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["events",{"_index":465,"title":{},"body":{"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["exec",{"_index":675,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["executioncontext",{"_index":435,"title":{},"body":{"guards/RolesGuard.html":{}}}],["existing",{"_index":756,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["exists",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["expiresin",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":629,"title":{},"body":{"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["express.user",{"_index":847,"title":{},"body":{"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["extends",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{}}}],["extracting",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["extractjwt",{"_index":39,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":51,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["extractjwt.frombodyfield('refreshtoken",{"_index":422,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["false",{"_index":457,"title":{},"body":{"classes/Stage.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"injectables/TournamentsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["find",{"_index":682,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":534,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["findbyid",{"_index":737,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["findbyid(@param('id",{"_index":819,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["findbyid(id",{"_index":757,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/UsersService.html":{}}}],["findbyidandupdate(id",{"_index":688,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["findbyslug",{"_index":738,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["findbyslug(@param('slug",{"_index":817,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["findbyslug(slug",{"_index":760,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["findbytag",{"_index":535,"title":{},"body":{"controllers/TeamsController.html":{}}}],["findbytag(@param('tag",{"_index":601,"title":{},"body":{"controllers/TeamsController.html":{}}}],["findbytag(tag",{"_index":551,"title":{},"body":{"controllers/TeamsController.html":{}}}],["findbyusername",{"_index":1118,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername(username",{"_index":1131,"title":{},"body":{"injectables/UsersService.html":{}}}],["findlikeusername",{"_index":1119,"title":{},"body":{"injectables/UsersService.html":{}}}],["findlikeusername(query",{"_index":1135,"title":{},"body":{"injectables/UsersService.html":{}}}],["findlogged",{"_index":1035,"title":{},"body":{"controllers/UsersController.html":{}}}],["findlogged(@req",{"_index":1084,"title":{},"body":{"controllers/UsersController.html":{}}}],["findlogged(req",{"_index":1045,"title":{},"body":{"controllers/UsersController.html":{}}}],["findloggeduser",{"_index":1120,"title":{},"body":{"injectables/UsersService.html":{}}}],["findloggeduser(username",{"_index":1137,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":536,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":605,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":554,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findoneandupdate",{"_index":1161,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebytag",{"_index":636,"title":{},"body":{"injectables/TeamsService.html":{}}}],["findonebytag(tag",{"_index":649,"title":{},"body":{"injectables/TeamsService.html":{}}}],["findonebyusername",{"_index":1036,"title":{},"body":{"controllers/UsersController.html":{}}}],["findonebyusername(@param('username",{"_index":1087,"title":{},"body":{"controllers/UsersController.html":{}}}],["findonebyusername(username",{"_index":1050,"title":{},"body":{"controllers/UsersController.html":{}}}],["findtournamentbyid",{"_index":839,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["findtournamentbyid(id",{"_index":852,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["findtournamentbyslug",{"_index":840,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["findtournamentbyslug(slug",{"_index":854,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["finished",{"_index":383,"title":{},"body":{"classes/Match.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Tournament.html":{},"injectables/TournamentsService.html":{}}}],["first",{"_index":598,"title":{},"body":{"controllers/TeamsController.html":{}}}],["firstname",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/UserDetails.html":{}}}],["following",{"_index":1255,"title":{},"body":{"index.html":{}}}],["foreignfield",{"_index":503,"title":{},"body":{"classes/Team.html":{},"classes/User.html":{}}}],["forwardref",{"_index":630,"title":{},"body":{"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":690,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["function",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["functions",{"_index":1236,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["game",{"_index":1246,"title":{},"body":{"index.html":{}}}],["generates",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["generating",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/:id/team/:tag",{"_index":769,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["get('/id/:id",{"_index":758,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["get(':id",{"_index":555,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/UsersController.html":{}}}],["get('exists/:tag",{"_index":543,"title":{},"body":{"controllers/TeamsController.html":{}}}],["get('finished",{"_index":764,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["get('logout",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('me",{"_index":1083,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('name/:username",{"_index":1051,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('new",{"_index":766,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["get('removeinvite/:username",{"_index":619,"title":{},"body":{"controllers/TeamsController.html":{}}}],["get('removeuser/:username",{"_index":615,"title":{},"body":{"controllers/TeamsController.html":{}}}],["get('search/:query",{"_index":571,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{}}}],["get('search/user",{"_index":1064,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('slug/:slug",{"_index":761,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["get('tag/:tag",{"_index":552,"title":{},"body":{"controllers/TeamsController.html":{}}}],["getfinishedtournament",{"_index":739,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["getnewesttournament",{"_index":740,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["getteammatches",{"_index":741,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["getteammatches(@param('id",{"_index":821,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["getteammatches(id",{"_index":768,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["getters",{"_index":496,"title":{},"body":{"classes/Team.html":{},"classes/User.html":{}}}],["getting",{"_index":1238,"title":{"index.html":{}},"body":{}}],["gettokens",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["git",{"_index":1262,"title":{},"body":{"index.html":{}}}],["given",{"_index":545,"title":{},"body":{"controllers/TeamsController.html":{}}}],["group",{"_index":478,"title":{},"body":{"classes/Team.html":{}}}],["guard",{"_index":426,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":428,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handleinvite",{"_index":1037,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["handleinvite(@req",{"_index":1094,"title":{},"body":{"controllers/UsersController.html":{}}}],["handleinvite(req",{"_index":1053,"title":{},"body":{"controllers/UsersController.html":{}}}],["handleinvite(username",{"_index":1140,"title":{},"body":{"injectables/UsersService.html":{}}}],["handleinvitedto",{"_index":366,"title":{"classes/HandleInviteDto.html":{}},"body":{"classes/HandleInviteDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["hash",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedrefreshedtoken",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashing",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["history",{"_index":466,"title":{},"body":{"classes/Team.html":{},"injectables/TournamentsService.html":{}}}],["history.schema",{"_index":490,"title":{},"body":{"classes/Team.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["history.schema.ts",{"_index":506,"title":{},"body":{"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["history.schema.ts:10",{"_index":526,"title":{},"body":{"classes/TeamHistory.html":{}}}],["history.schema.ts:13",{"_index":527,"title":{},"body":{"classes/TeamHistory.html":{}}}],["history.schema.ts:16",{"_index":524,"title":{},"body":{"classes/TeamHistory.html":{}}}],["history.schema.ts:18",{"_index":513,"title":{},"body":{"classes/TeamEventsHistory.html":{}}}],["history.schema.ts:21",{"_index":509,"title":{},"body":{"classes/TeamEventsHistory.html":{}}}],["history.schema.ts:24",{"_index":510,"title":{},"body":{"classes/TeamEventsHistory.html":{}}}],["history.schema.ts:7",{"_index":525,"title":{},"body":{"classes/TeamHistory.html":{}}}],["httpcode",{"_index":869,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["httpexception",{"_index":580,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["https://github.com/opyd/praca_inzgo",{"_index":1263,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":581,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{}}}],["httpstatus.ok",{"_index":897,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["icon",{"_index":286,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/Team.html":{},"injectables/TeamsService.html":{}}}],["id",{"_index":557,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1177,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":439,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{}}}],["inbox",{"_index":693,"title":{},"body":{"injectables/TeamsService.html":{},"classes/User.html":{}}}],["incorrect",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":20,"title":{"index.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":668,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UserUpdateSelfDto.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UserUpdateSelfDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UserUpdateSelfDto.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":665,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(team.name",{"_index":667,"title":{},"body":{"injectables/TeamsService.html":{}}}],["injectmodel(tournament.name",{"_index":874,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["injectmodel(user.name",{"_index":1151,"title":{},"body":{"injectables/UsersService.html":{}}}],["installstart",{"_index":1268,"title":{},"body":{"index.html":{}}}],["interface",{"_index":403,"title":{"interfaces/MatchInterface.html":{},"interfaces/StageInterface.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{}},"body":{"interfaces/MatchInterface.html":{},"interfaces/StageInterface.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":405,"title":{},"body":{"interfaces/MatchInterface.html":{},"interfaces/StageInterface.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"overview.html":{}}}],["invite.dto",{"_index":1078,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["invite.dto.ts",{"_index":368,"title":{},"body":{"classes/HandleInviteDto.html":{},"coverage.html":{}}}],["invite.dto.ts:13",{"_index":372,"title":{},"body":{"classes/HandleInviteDto.html":{}}}],["invite.dto.ts:8",{"_index":373,"title":{},"body":{"classes/HandleInviteDto.html":{}}}],["invited",{"_index":708,"title":{},"body":{"injectables/TeamsService.html":{}}}],["invitedusernames",{"_index":467,"title":{},"body":{"classes/Team.html":{},"injectables/TeamsService.html":{}}}],["inviter",{"_index":653,"title":{},"body":{"injectables/TeamsService.html":{}}}],["invitestags",{"_index":709,"title":{},"body":{"injectables/TeamsService.html":{},"classes/User.html":{}}}],["inviteuser",{"_index":637,"title":{},"body":{"injectables/TeamsService.html":{}}}],["inviteuser(inviter",{"_index":651,"title":{},"body":{"injectables/TeamsService.html":{}}}],["inviteuserdto",{"_index":374,"title":{"classes/InviteUserDto.html":{}},"body":{"classes/InviteUserDto.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"coverage.html":{}}}],["inviteuserdto.teamtag",{"_index":696,"title":{},"body":{"injectables/TeamsService.html":{}}}],["inviteusertoteam",{"_index":537,"title":{},"body":{"controllers/TeamsController.html":{}}}],["inviteusertoteam(@req",{"_index":610,"title":{},"body":{"controllers/TeamsController.html":{}}}],["inviteusertoteam(req",{"_index":558,"title":{},"body":{"controllers/TeamsController.html":{}}}],["isarray",{"_index":299,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{}}}],["isboolean",{"_index":338,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{}}}],["isdefined",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/UserUpdateSelfDto.html":{}}}],["isemail",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["isempty",{"_index":315,"title":{},"body":{"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["isenum",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["isenum(playerroles",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["isin",{"_index":316,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["isin([8",{"_index":318,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["isnotempty",{"_index":158,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/MatchResultDto.html":{}}}],["isnumber",{"_index":317,"title":{},"body":{"classes/CreateTournamentDto.html":{},"classes/MatchResultDto.html":{}}}],["isoptional",{"_index":300,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/UserUpdateSelfDto.html":{}}}],["isoptional()@isboolean",{"_index":362,"title":{},"body":{"classes/DetailsDto.html":{}}}],["isoptional()@isdefined()@type(undefined)@validatenested",{"_index":1028,"title":{},"body":{"injectables/UserUpdateSelfDto.html":{}}}],["isoptional()@isenum(playerroles",{"_index":364,"title":{},"body":{"classes/DetailsDto.html":{}}}],["isoptional()@isstring",{"_index":357,"title":{},"body":{"classes/DetailsDto.html":{},"injectables/UserUpdateSelfDto.html":{}}}],["isstring",{"_index":159,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/MatchResultDto.html":{},"injectables/UserUpdateSelfDto.html":{}}}],["isstring()@isnotempty",{"_index":294,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/KickFromTournamentDto.html":{}}}],["isteamownedbyuser",{"_index":638,"title":{},"body":{"injectables/TeamsService.html":{}}}],["isteamownedbyuser(userid",{"_index":654,"title":{},"body":{"injectables/TeamsService.html":{}}}],["join",{"_index":775,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["joined",{"_index":516,"title":{},"body":{"classes/TeamEventsHistory.html":{},"miscellaneous/enumerations.html":{}}}],["jointournament",{"_index":841,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["jointournament(user",{"_index":859,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["jointournaments",{"_index":742,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["jointournaments(req",{"_index":771,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["json.parse",{"_index":711,"title":{},"body":{"injectables/TeamsService.html":{}}}],["json.parse(json.stringify(user.invitestags",{"_index":710,"title":{},"body":{"injectables/TeamsService.html":{}}}],["json.stringify(team.invitedusernames",{"_index":704,"title":{},"body":{"injectables/TeamsService.html":{}}}],["json.stringify(user.invitestags",{"_index":702,"title":{},"body":{"injectables/TeamsService.html":{}}}],["jungle",{"_index":1017,"title":{},"body":{"classes/UserDetails.html":{},"miscellaneous/enumerations.html":{}}}],["jwt",{"_index":42,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["jwt_access_secret",{"_index":1257,"title":{},"body":{"index.html":{}}}],["jwt_refresh_secret",{"_index":1258,"title":{},"body":{"index.html":{}}}],["jwtfromrequest",{"_index":50,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":34,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["jwtservice",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["kickfromtournament",{"_index":743,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["kickfromtournament(organizer",{"_index":861,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["kickfromtournament(req",{"_index":778,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["kickfromtournamentdto",{"_index":378,"title":{"classes/KickFromTournamentDto.html":{}},"body":{"classes/KickFromTournamentDto.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"coverage.html":{}}}],["kickfromtournamentdto.teamtag",{"_index":893,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["later",{"_index":915,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["league",{"_index":1247,"title":{},"body":{"index.html":{}}}],["leave",{"_index":596,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/UsersService.html":{}}}],["leaveteam",{"_index":1038,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["leaveteam(@req",{"_index":1103,"title":{},"body":{"controllers/UsersController.html":{}}}],["leaveteam(req",{"_index":1056,"title":{},"body":{"controllers/UsersController.html":{}}}],["leaveteam(requser",{"_index":1142,"title":{},"body":{"injectables/UsersService.html":{}}}],["left",{"_index":519,"title":{},"body":{"classes/TeamEventsHistory.html":{},"injectables/TeamsService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["legends",{"_index":1248,"title":{},"body":{"index.html":{}}}],["length",{"_index":301,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["length(4",{"_index":302,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["lets",{"_index":1062,"title":{},"body":{"controllers/UsersController.html":{}}}],["license",{"_index":1285,"title":{},"body":{"properties.html":{}}}],["limit(10",{"_index":686,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["literal",{"_index":1295,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["localfield",{"_index":502,"title":{},"body":{"classes/Team.html":{},"classes/User.html":{}}}],["locally",{"_index":1260,"title":{},"body":{"index.html":{}}}],["logged",{"_index":753,"title":{},"body":{"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["logout",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@req",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["lookingforteam",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/UserDetails.html":{}}}],["looks",{"_index":930,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["loserteam",{"_index":949,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["loserteam.events.push",{"_index":963,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["loserteam.history.push",{"_index":960,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["loserteam.save",{"_index":967,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["loserteam.tag",{"_index":958,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["loss",{"_index":962,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["made",{"_index":1150,"title":{},"body":{"injectables/UsersService.html":{}}}],["match",{"_index":381,"title":{"classes/Match.html":{}},"body":{"classes/Match.html":{},"classes/Stage.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"coverage.html":{}}}],["match.finished",{"_index":940,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["match.interface",{"_index":454,"title":{},"body":{"classes/Stage.html":{},"interfaces/StageInterface.html":{}}}],["match.result",{"_index":939,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["match.schema",{"_index":453,"title":{},"body":{"classes/Stage.html":{}}}],["match.teama",{"_index":935,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["match.teamb",{"_index":936,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["match.winner",{"_index":938,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["match['id",{"_index":934,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["matchdocument",{"_index":400,"title":{},"body":{"classes/Match.html":{},"miscellaneous/typealiases.html":{}}}],["matches",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"injectables/TournamentsService.html":{}}}],["matches.map((match",{"_index":933,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["matchesperround",{"_index":921,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["matchid",{"_index":410,"title":{},"body":{"classes/MatchResultDto.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"injectables/TournamentsService.html":{}}}],["matchindex",{"_index":928,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["matching",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchinterface",{"_index":404,"title":{"interfaces/MatchInterface.html":{}},"body":{"interfaces/MatchInterface.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"coverage.html":{}}}],["matchresultdto",{"_index":407,"title":{"classes/MatchResultDto.html":{}},"body":{"classes/MatchResultDto.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"coverage.html":{}}}],["matchschema",{"_index":401,"title":{},"body":{"classes/Match.html":{},"classes/Stage.html":{},"modules/TournamentsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":878,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["math.log(2",{"_index":908,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["math.log(tournament.participants.length",{"_index":907,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["math.random",{"_index":910,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["maxlength",{"_index":486,"title":{},"body":{"classes/Team.html":{}}}],["mdi",{"_index":476,"title":{},"body":{"classes/Team.html":{}}}],["member",{"_index":1170,"title":{},"body":{"injectables/UsersService.html":{}}}],["members",{"_index":468,"title":{},"body":{"classes/Team.html":{},"injectables/TeamsService.html":{}}}],["metadata",{"_index":1223,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["methods",{"_index":21,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mid",{"_index":1015,"title":{},"body":{"classes/UserDetails.html":{},"miscellaneous/enumerations.html":{}}}],["minlength",{"_index":485,"title":{},"body":{"classes/Team.html":{}}}],["miscellaneous",{"_index":1230,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":594,"title":{},"body":{"controllers/TeamsController.html":{}}}],["mode",{"_index":1272,"title":{},"body":{"index.html":{}}}],["model",{"_index":641,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["modify",{"_index":1070,"title":{},"body":{"controllers/UsersController.html":{}}}],["module",{"_index":55,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":57,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb_uri",{"_index":1259,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":399,"title":{},"body":{"classes/Match.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoose.schema.types.string",{"_index":498,"title":{},"body":{"classes/Team.html":{},"classes/User.html":{}}}],["mongoosemodule",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":633,"title":{},"body":{"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["moves",{"_index":941,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["msg",{"_index":508,"title":{},"body":{"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["name",{"_index":29,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":1253,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":43,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":438,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":980,"title":{},"body":{"classes/UpdateTeamDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"classes/Match.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1211,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":1212,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/MatchResultDto.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"classes/UpdateTournamentDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newstage",{"_index":924,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["newuser",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser._id",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.role",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.username",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":918,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["notfoundexception",{"_index":664,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{}}}],["npm",{"_index":1267,"title":{},"body":{"index.html":{}}}],["nrofteams",{"_index":306,"title":{},"body":{"classes/CreateTournamentDto.html":{},"classes/Tournament.html":{},"injectables/TournamentsService.html":{}}}],["null",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTournamentDto.html":{},"classes/MatchResultDto.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Tournament.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["one",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["online",{"_index":1242,"title":{},"body":{"index.html":{}}}],["opponent",{"_index":522,"title":{},"body":{"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"injectables/TournamentsService.html":{}}}],["opponents",{"_index":973,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["opponents.push",{"_index":976,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["opponentsobjects",{"_index":977,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["optional",{"_index":31,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["organize",{"_index":1244,"title":{},"body":{"index.html":{}}}],["organizer",{"_index":715,"title":{},"body":{"classes/Tournament.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["organizer.currentteam",{"_index":876,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["organizer.update",{"_index":881,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["organizer.username",{"_index":884,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["out",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1279,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":287,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/Team.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["package",{"_index":1207,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":546,"title":{},"body":{"controllers/TeamsController.html":{}}}],["param",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('index",{"_index":1107,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('tag",{"_index":822,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["param('tournamentid",{"_index":804,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["param('username",{"_index":617,"title":{},"body":{"controllers/TeamsController.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partialtype",{"_index":979,"title":{},"body":{"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createteamdto",{"_index":981,"title":{},"body":{"classes/UpdateTeamDto.html":{}}}],["partialtype(createtournamentdto",{"_index":983,"title":{},"body":{"classes/UpdateTournamentDto.html":{}}}],["partialtype(createuserdto",{"_index":986,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["participants",{"_index":716,"title":{},"body":{"classes/Tournament.html":{},"injectables/TournamentsService.html":{}}}],["participants.length",{"_index":922,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["participate",{"_index":972,"title":{},"body":{"injectables/TournamentsService.html":{},"index.html":{}}}],["participating",{"_index":1166,"title":{},"body":{"injectables/UsersService.html":{}}}],["passed",{"_index":1071,"title":{},"body":{"controllers/UsersController.html":{}}}],["passport",{"_index":41,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":38,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":47,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["passreqtocallback",{"_index":424,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["password",{"_index":154,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/User.html":{},"injectables/UserUpdateSelfDto.html":{},"injectables/UsersService.html":{}}}],["passwordmatches",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":578,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":612,"title":{},"body":{"controllers/TeamsController.html":{}}}],["patch('description/:tournamentid",{"_index":811,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["patch('kick/:tournamentid",{"_index":806,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["patch('leaveteam",{"_index":1102,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('match/:tournamentid",{"_index":814,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["patch('me",{"_index":1099,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('start/:tournamentid",{"_index":809,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["payload",{"_index":36,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["pick",{"_index":787,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["platform",{"_index":1240,"title":{},"body":{"index.html":{}}}],["player",{"_index":1002,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["playerroles",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/UserDetails.html":{},"miscellaneous/enumerations.html":{}}}],["players",{"_index":1243,"title":{},"body":{"index.html":{}}}],["populate",{"_index":1132,"title":{},"body":{"injectables/UsersService.html":{}}}],["populate('invites",{"_index":1159,"title":{},"body":{"injectables/UsersService.html":{}}}],["post",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["post('handleinvite",{"_index":1093,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('invite",{"_index":609,"title":{},"body":{"controllers/TeamsController.html":{}}}],["post('join/:tournamentid",{"_index":803,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["post('refresh",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["praca_inz/backendinstall",{"_index":1266,"title":{},"body":{"index.html":{}}}],["preferredroles",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/UserDetails.html":{}}}],["prefix",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":1274,"title":{},"body":{"index.html":{}}}],["project",{"_index":1252,"title":{},"body":{"index.html":{}}}],["promise",{"_index":1130,"title":{},"body":{"injectables/UsersService.html":{}}}],["promise.all",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["prop",{"_index":388,"title":{},"body":{"classes/Match.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["prop({default",{"_index":469,"title":{},"body":{"classes/Team.html":{},"classes/User.html":{}}}],["prop({required",{"_index":448,"title":{},"body":{"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["prop({type",{"_index":391,"title":{},"body":{"classes/Match.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["properties",{"_index":153,"title":{"properties.html":{}},"body":{"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"classes/Tournament.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"properties.html":{}}}],["property",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["providers",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":1009,"title":{},"body":{"classes/UserDetails.html":{}}}],["pull",{"_index":691,"title":{},"body":{"injectables/TeamsService.html":{}}}],["push",{"_index":672,"title":{},"body":{"injectables/TeamsService.html":{}}}],["query",{"_index":573,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query('team",{"_index":1097,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('username",{"_index":1096,"title":{},"body":{"controllers/UsersController.html":{}}}],["readonly",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["ref",{"_index":392,"title":{},"body":{"classes/Match.html":{},"classes/Team.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["reflect",{"_index":1222,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":432,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refresh",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refreshtoken",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["refreshtokenguard",{"_index":126,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["refreshtokenmatches",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtokens(@req",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(req",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(username",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenstrategy",{"_index":165,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["regexp",{"_index":683,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["remove",{"_index":538,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":623,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":561,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["removed",{"_index":694,"title":{},"body":{"injectables/TeamsService.html":{}}}],["removeinvite",{"_index":539,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["removeinvite(@req",{"_index":620,"title":{},"body":{"controllers/TeamsController.html":{}}}],["removeinvite(owner",{"_index":657,"title":{},"body":{"injectables/TeamsService.html":{}}}],["removeinvite(req",{"_index":564,"title":{},"body":{"controllers/TeamsController.html":{}}}],["removeuserfromteam",{"_index":540,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{}}}],["removeuserfromteam(@req",{"_index":616,"title":{},"body":{"controllers/TeamsController.html":{}}}],["removeuserfromteam(owner",{"_index":659,"title":{},"body":{"injectables/TeamsService.html":{}}}],["removeuserfromteam(req",{"_index":567,"title":{},"body":{"controllers/TeamsController.html":{}}}],["req",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["req.body.refreshtoken",{"_index":425,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["req.user['refreshtoken",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user['username",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["req['user",{"_index":813,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["req['user']['username",{"_index":808,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["request",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["request.user",{"_index":444,"title":{},"body":{"guards/RolesGuard.html":{}}}],["required",{"_index":458,"title":{},"body":{"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["requser",{"_index":1144,"title":{},"body":{"injectables/UsersService.html":{}}}],["requser['username",{"_index":1162,"title":{},"body":{"injectables/UsersService.html":{}}}],["reset",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["result",{"_index":384,"title":{},"body":{"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["result.dto",{"_index":798,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["result.dto.ts",{"_index":409,"title":{},"body":{"classes/MatchResultDto.html":{},"coverage.html":{}}}],["result.dto.ts:13",{"_index":415,"title":{},"body":{"classes/MatchResultDto.html":{}}}],["result.dto.ts:18",{"_index":416,"title":{},"body":{"classes/MatchResultDto.html":{}}}],["result.dto.ts:23",{"_index":413,"title":{},"body":{"classes/MatchResultDto.html":{}}}],["result.dto.ts:8",{"_index":412,"title":{},"body":{"classes/MatchResultDto.html":{}}}],["results",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":54,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":37,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["return{string",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["return{tokens",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["rimraf",{"_index":1225,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{}}}],["roles",{"_index":440,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":1109,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles('admin')@useguards(accesstokenguard",{"_index":1059,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles.includes(user.role",{"_index":445,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":427,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rolesguard)@delete(':id",{"_index":1060,"title":{},"body":{"controllers/UsersController.html":{}}}],["round",{"_index":942,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["run",{"_index":1251,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1227,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":885,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["schema",{"_index":397,"title":{},"body":{"classes/Match.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"modules/TeamsModule.html":{},"classes/Tournament.html":{},"modules/TournamentsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schema/team",{"_index":666,"title":{},"body":{"injectables/TeamsService.html":{}}}],["schema/team.schema",{"_index":632,"title":{},"body":{"modules/TeamsModule.html":{},"injectables/TeamsService.html":{}}}],["schemafactory",{"_index":398,"title":{},"body":{"classes/Match.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(match",{"_index":402,"title":{},"body":{"classes/Match.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(stage",{"_index":460,"title":{},"body":{"classes/Stage.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(team",{"_index":500,"title":{},"body":{"classes/Team.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(teameventshistory",{"_index":520,"title":{},"body":{"classes/TeamEventsHistory.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(teamhistory",{"_index":528,"title":{},"body":{"classes/TeamHistory.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(tournament",{"_index":732,"title":{},"body":{"classes/Tournament.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1005,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/match.schema",{"_index":835,"title":{},"body":{"modules/TournamentsModule.html":{}}}],["schemas/stage.schema",{"_index":836,"title":{},"body":{"modules/TournamentsModule.html":{}}}],["schemas/tournament.schema",{"_index":834,"title":{},"body":{"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{}}}],["schemas/user",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{}}}],["schemas/user.schema",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["search",{"_index":541,"title":{},"body":{"controllers/TeamsController.html":{}}}],["search(@param('query",{"_index":607,"title":{},"body":{"controllers/TeamsController.html":{}}}],["search(query",{"_index":570,"title":{},"body":{"controllers/TeamsController.html":{}}}],["searchbyquery",{"_index":744,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["searchbyquery(@param('query",{"_index":826,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["searchbyquery(query",{"_index":781,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["searchbyusername",{"_index":1039,"title":{},"body":{"controllers/UsersController.html":{}}}],["searchbyusername(username",{"_index":1063,"title":{},"body":{"controllers/UsersController.html":{}}}],["searchteam",{"_index":639,"title":{},"body":{"injectables/TeamsService.html":{}}}],["searchteam(query",{"_index":661,"title":{},"body":{"injectables/TeamsService.html":{}}}],["searchtournament",{"_index":842,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["searchtournament(query",{"_index":863,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["secret",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":52,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["seeding",{"_index":792,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["select",{"_index":684,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["self.dto",{"_index":1074,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["self.dto.ts",{"_index":1027,"title":{},"body":{"injectables/UserUpdateSelfDto.html":{},"coverage.html":{}}}],["self.dto.ts:15",{"_index":1030,"title":{},"body":{"injectables/UserUpdateSelfDto.html":{}}}],["self.dto.ts:21",{"_index":1029,"title":{},"body":{"injectables/UserUpdateSelfDto.html":{}}}],["server",{"_index":1269,"title":{},"body":{"index.html":{}}}],["set",{"_index":786,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["setmatchresult",{"_index":745,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["setmatchresult(req",{"_index":783,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["setmatchresult(tournamentid",{"_index":865,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["setmetadata('roles",{"_index":1297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["sign",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(authdto",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(createuserdto",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["slug",{"_index":717,"title":{},"body":{"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["slugify",{"_index":872,"title":{},"body":{"injectables/TournamentsService.html":{},"dependencies.html":{}}}],["slugify(title",{"_index":877,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateTournamentDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["specific",{"_index":763,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["specified",{"_index":776,"title":{},"body":{"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["src/.../accesstoken.strategy.ts",{"_index":1290,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":1237,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../match.schema.ts",{"_index":1291,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../stage.schema.ts",{"_index":1292,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../team",{"_index":1232,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../team.schema.ts",{"_index":1293,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../tournament.schema.ts",{"_index":1294,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1233,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.schema.ts",{"_index":1234,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:113",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:150",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:17",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:29",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:63",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:89",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:99",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":152,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:13",{"_index":156,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dto/auth.dto.ts:8",{"_index":157,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts",{"_index":19,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:12",{"_index":27,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:20",{"_index":35,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts",{"_index":418,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:11",{"_index":419,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:20",{"_index":421,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/common/decorators/roles.decorator.ts",{"_index":1183,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/guards/accesstoken.guard.ts",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/common/guards/refreshtoken.guard.ts",{"_index":417,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":429,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:5",{"_index":433,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:8",{"_index":436,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/main.ts",{"_index":1186,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/teams/dto/create",{"_index":283,"title":{},"body":{"classes/CreateTeamDto.html":{},"coverage.html":{}}}],["src/teams/dto/invite",{"_index":375,"title":{},"body":{"classes/InviteUserDto.html":{},"coverage.html":{}}}],["src/teams/dto/update",{"_index":978,"title":{},"body":{"classes/UpdateTeamDto.html":{},"coverage.html":{}}}],["src/teams/schema/team",{"_index":505,"title":{},"body":{"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/teams/schema/team.interface.ts",{"_index":521,"title":{},"body":{"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"coverage.html":{}}}],["src/teams/schema/team.schema.ts",{"_index":463,"title":{},"body":{"classes/Team.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/teams/schema/team.schema.ts:16",{"_index":482,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:19",{"_index":479,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:22",{"_index":487,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:25",{"_index":483,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:28",{"_index":481,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:31",{"_index":480,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:34",{"_index":470,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:37",{"_index":473,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:40",{"_index":475,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/schema/team.schema.ts:43",{"_index":471,"title":{},"body":{"classes/Team.html":{}}}],["src/teams/teams.controller.ts",{"_index":530,"title":{},"body":{"controllers/TeamsController.html":{},"coverage.html":{}}}],["src/teams/teams.controller.ts:104",{"_index":563,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:34",{"_index":549,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:49",{"_index":550,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:54",{"_index":553,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:64",{"_index":544,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:69",{"_index":556,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:74",{"_index":572,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:80",{"_index":560,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:86",{"_index":577,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:92",{"_index":569,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.controller.ts:98",{"_index":566,"title":{},"body":{"controllers/TeamsController.html":{}}}],["src/teams/teams.module.ts",{"_index":628,"title":{},"body":{"modules/TeamsModule.html":{}}}],["src/teams/teams.service.ts",{"_index":635,"title":{},"body":{"injectables/TeamsService.html":{},"coverage.html":{}}}],["src/teams/teams.service.ts:125",{"_index":652,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:161",{"_index":658,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:192",{"_index":656,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:20",{"_index":642,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:27",{"_index":646,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:44",{"_index":647,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:48",{"_index":650,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:56",{"_index":648,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:60",{"_index":662,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:72",{"_index":655,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:80",{"_index":644,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:88",{"_index":663,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/teams/teams.service.ts:94",{"_index":660,"title":{},"body":{"injectables/TeamsService.html":{}}}],["src/tournaments/dto/create",{"_index":304,"title":{},"body":{"classes/CreateTournamentDto.html":{},"coverage.html":{}}}],["src/tournaments/dto/kick",{"_index":379,"title":{},"body":{"classes/KickFromTournamentDto.html":{},"coverage.html":{}}}],["src/tournaments/dto/match",{"_index":408,"title":{},"body":{"classes/MatchResultDto.html":{},"coverage.html":{}}}],["src/tournaments/dto/update",{"_index":982,"title":{},"body":{"classes/UpdateTournamentDto.html":{},"coverage.html":{}}}],["src/tournaments/schemas/match.interface.ts",{"_index":406,"title":{},"body":{"interfaces/MatchInterface.html":{},"coverage.html":{}}}],["src/tournaments/schemas/match.schema.ts",{"_index":382,"title":{},"body":{"classes/Match.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/tournaments/schemas/match.schema.ts:12",{"_index":395,"title":{},"body":{"classes/Match.html":{}}}],["src/tournaments/schemas/match.schema.ts:15",{"_index":396,"title":{},"body":{"classes/Match.html":{}}}],["src/tournaments/schemas/match.schema.ts:18",{"_index":390,"title":{},"body":{"classes/Match.html":{}}}],["src/tournaments/schemas/match.schema.ts:21",{"_index":389,"title":{},"body":{"classes/Match.html":{}}}],["src/tournaments/schemas/match.schema.ts:9",{"_index":394,"title":{},"body":{"classes/Match.html":{}}}],["src/tournaments/schemas/stage.interface.ts",{"_index":462,"title":{},"body":{"interfaces/StageInterface.html":{},"coverage.html":{}}}],["src/tournaments/schemas/stage.schema.ts",{"_index":447,"title":{},"body":{"classes/Stage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/tournaments/schemas/stage.schema.ts:11",{"_index":449,"title":{},"body":{"classes/Stage.html":{}}}],["src/tournaments/schemas/stage.schema.ts:14",{"_index":452,"title":{},"body":{"classes/Stage.html":{}}}],["src/tournaments/schemas/stage.schema.ts:17",{"_index":451,"title":{},"body":{"classes/Stage.html":{}}}],["src/tournaments/schemas/tournament.schema.ts",{"_index":714,"title":{},"body":{"classes/Tournament.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:10",{"_index":728,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:13",{"_index":725,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:16",{"_index":722,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:19",{"_index":727,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:22",{"_index":721,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:25",{"_index":720,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:28",{"_index":723,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:31",{"_index":724,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/schemas/tournament.schema.ts:34",{"_index":726,"title":{},"body":{"classes/Tournament.html":{}}}],["src/tournaments/tournaments.controller.ts",{"_index":734,"title":{},"body":{"controllers/TournamentsController.html":{},"coverage.html":{}}}],["src/tournaments/tournaments.controller.ts:106",{"_index":785,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:122",{"_index":755,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:131",{"_index":762,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:135",{"_index":759,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:140",{"_index":770,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:145",{"_index":767,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:150",{"_index":765,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:155",{"_index":782,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:34",{"_index":752,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:49",{"_index":773,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:58",{"_index":780,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:77",{"_index":790,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.controller.ts:86",{"_index":751,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["src/tournaments/tournaments.module.ts",{"_index":832,"title":{},"body":{"modules/TournamentsModule.html":{}}}],["src/tournaments/tournaments.service.ts",{"_index":838,"title":{},"body":{"injectables/TournamentsService.html":{},"coverage.html":{}}}],["src/tournaments/tournaments.service.ts:112",{"_index":862,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:140",{"_index":868,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:207",{"_index":866,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:23",{"_index":844,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:31",{"_index":850,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:329",{"_index":858,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:369",{"_index":848,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:392",{"_index":857,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:395",{"_index":856,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:402",{"_index":864,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:53",{"_index":853,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:61",{"_index":855,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:69",{"_index":851,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/tournaments/tournaments.service.ts:73",{"_index":860,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["src/users/dto/create",{"_index":320,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"coverage.html":{}}}],["src/users/dto/handle",{"_index":367,"title":{},"body":{"classes/HandleInviteDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":985,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":1026,"title":{},"body":{"injectables/UserUpdateSelfDto.html":{},"coverage.html":{}}}],["src/users/schemas/user",{"_index":1007,"title":{},"body":{"classes/UserDetails.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/schemas/user.schema.ts",{"_index":987,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/schemas/user.schema.ts:20",{"_index":999,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:23",{"_index":993,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:26",{"_index":988,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:29",{"_index":996,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:32",{"_index":998,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:35",{"_index":997,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:38",{"_index":990,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:41",{"_index":995,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:44",{"_index":994,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:47",{"_index":992,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":1032,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:102",{"_index":1069,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:108",{"_index":1058,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:114",{"_index":1044,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:125",{"_index":1061,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:36",{"_index":1041,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:47",{"_index":1047,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:57",{"_index":1049,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:66",{"_index":1052,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:79",{"_index":1055,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:87",{"_index":1065,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1114,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1117,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:104",{"_index":1133,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:119",{"_index":1136,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:129",{"_index":1146,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:143",{"_index":1148,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:153",{"_index":1143,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:18",{"_index":1124,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:185",{"_index":1145,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:25",{"_index":1126,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:30",{"_index":1129,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":1138,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:44",{"_index":1139,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":1128,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:64",{"_index":1141,"title":{},"body":{"injectables/UsersService.html":{}}}],["stage",{"_index":446,"title":{"classes/Stage.html":{}},"body":{"classes/Stage.html":{},"classes/Tournament.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"coverage.html":{}}}],["stage.matches.foreach((match",{"_index":975,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["stage.schema",{"_index":729,"title":{},"body":{"classes/Tournament.html":{}}}],["stagecounter",{"_index":919,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["stagedocument",{"_index":455,"title":{},"body":{"classes/Stage.html":{},"miscellaneous/typealiases.html":{}}}],["stageinterface",{"_index":461,"title":{"interfaces/StageInterface.html":{}},"body":{"interfaces/StageInterface.html":{},"coverage.html":{}}}],["stagenr",{"_index":411,"title":{},"body":{"classes/MatchResultDto.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"injectables/TournamentsService.html":{}}}],["stages",{"_index":718,"title":{},"body":{"classes/Tournament.html":{},"injectables/TournamentsService.html":{}}}],["stageschema",{"_index":459,"title":{},"body":{"classes/Stage.html":{},"classes/Tournament.html":{},"modules/TournamentsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stagesnr",{"_index":906,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["start",{"_index":970,"title":{},"body":{"injectables/TournamentsService.html":{},"index.html":{}}}],["start:dev",{"_index":1273,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":1275,"title":{},"body":{"index.html":{}}}],["started",{"_index":719,"title":{"index.html":{}},"body":{"classes/Tournament.html":{},"injectables/TournamentsService.html":{}}}],["starts",{"_index":791,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["starttournament",{"_index":746,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["starttournament(organizer",{"_index":867,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["starttournament(req",{"_index":788,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["statements",{"_index":1178,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1213,"title":{},"body":{"dependencies.html":{}}}],["strategies/accesstoken.strategy",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/refreshtoken.strategy",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":40,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["string",{"_index":45,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":44,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{}}}],["successfully",{"_index":1173,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":49,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["support",{"_index":1019,"title":{},"body":{"classes/UserDetails.html":{},"miscellaneous/enumerations.html":{},"modules.html":{}}}],["svg",{"_index":1277,"title":{},"body":{"modules.html":{}}}],["table",{"_index":1206,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1205,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":288,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{}}}],["team",{"_index":393,"title":{"classes/Team.html":{}},"body":{"classes/Match.html":{},"classes/Team.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["team.activetournament",{"_index":894,"title":{},"body":{"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["team.dto",{"_index":585,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/UpdateTeamDto.html":{}}}],["team.dto.ts",{"_index":284,"title":{},"body":{"classes/CreateTeamDto.html":{},"classes/UpdateTeamDto.html":{},"coverage.html":{}}}],["team.dto.ts:14",{"_index":293,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["team.dto.ts:18",{"_index":291,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["team.dto.ts:24",{"_index":298,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["team.dto.ts:28",{"_index":295,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["team.dto.ts:31",{"_index":289,"title":{},"body":{"classes/CreateTeamDto.html":{}}}],["team.events.push",{"_index":1171,"title":{},"body":{"injectables/UsersService.html":{}}}],["team.interface",{"_index":488,"title":{},"body":{"classes/Team.html":{}}}],["team.members",{"_index":1168,"title":{},"body":{"injectables/UsersService.html":{}}}],["team.members.filter((member",{"_index":1169,"title":{},"body":{"injectables/UsersService.html":{}}}],["team.members.length",{"_index":892,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["team.name",{"_index":634,"title":{},"body":{"modules/TeamsModule.html":{}}}],["team.owner",{"_index":697,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["team.save",{"_index":895,"title":{},"body":{"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["team.tag",{"_index":677,"title":{},"body":{"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{}}}],["teama",{"_index":385,"title":{},"body":{"classes/Match.html":{},"interfaces/MatchInterface.html":{},"injectables/TournamentsService.html":{}}}],["teama.tag",{"_index":948,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["teamatag",{"_index":931,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["teamb",{"_index":386,"title":{},"body":{"classes/Match.html":{},"interfaces/MatchInterface.html":{},"injectables/TournamentsService.html":{}}}],["teambtag",{"_index":932,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["teamdocument",{"_index":492,"title":{},"body":{"classes/Team.html":{},"injectables/TeamsService.html":{},"miscellaneous/typealiases.html":{}}}],["teameventshistory",{"_index":504,"title":{"classes/TeamEventsHistory.html":{}},"body":{"classes/TeamEventsHistory.html":{},"coverage.html":{}}}],["teameventshistoryschema",{"_index":491,"title":{},"body":{"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["teameventsinterface",{"_index":472,"title":{"interfaces/TeamEventsInterface.html":{}},"body":{"classes/Team.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"coverage.html":{}}}],["teamhistory",{"_index":523,"title":{"classes/TeamHistory.html":{}},"body":{"classes/TeamHistory.html":{},"coverage.html":{}}}],["teamhistoryinterface",{"_index":474,"title":{"interfaces/TeamHistoryInterface.html":{}},"body":{"classes/Team.html":{},"interfaces/TeamEventsInterface.html":{},"interfaces/TeamHistoryInterface.html":{},"coverage.html":{}}}],["teamhistoryschema",{"_index":489,"title":{},"body":{"classes/Team.html":{},"classes/TeamHistory.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["teammodel",{"_index":643,"title":{},"body":{"injectables/TeamsService.html":{}}}],["teamowner",{"_index":889,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["teamowner.currentteam",{"_index":890,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["teams",{"_index":531,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TournamentsService.html":{}}}],["teams.controller",{"_index":631,"title":{},"body":{"modules/TeamsModule.html":{}}}],["teams.service",{"_index":583,"title":{},"body":{"controllers/TeamsController.html":{},"modules/TeamsModule.html":{}}}],["teams/schema/team",{"_index":873,"title":{},"body":{"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["teams/schema/team.schema",{"_index":1000,"title":{},"body":{"classes/User.html":{}}}],["teams/teams.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{}}}],["teams/teams.service",{"_index":871,"title":{},"body":{"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["teamschema",{"_index":499,"title":{},"body":{"classes/Team.html":{},"modules/TeamsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["teamschema.virtual('invitedusers",{"_index":501,"title":{},"body":{"classes/Team.html":{}}}],["teamscontroller",{"_index":529,"title":{"controllers/TeamsController.html":{}},"body":{"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"coverage.html":{}}}],["teamservice",{"_index":1123,"title":{},"body":{"injectables/UsersService.html":{}}}],["teamsmodule",{"_index":62,"title":{"modules/TeamsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["teamsservice",{"_index":582,"title":{"injectables/TeamsService.html":{}},"body":{"controllers/TeamsController.html":{},"modules/TeamsModule.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["teamtag",{"_index":370,"title":{},"body":{"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{}}}],["this.about",{"_index":1022,"title":{},"body":{"classes/UserDetails.html":{}}}],["this.authservice.logout(req.user['sub",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens(username",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(authdto",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.country",{"_index":1021,"title":{},"body":{"classes/UserDetails.html":{}}}],["this.findtournamentbyid(id",{"_index":968,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.findtournamentbyid(tournamentid",{"_index":898,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.firstname",{"_index":1020,"title":{},"body":{"classes/UserDetails.html":{}}}],["this.gettokens",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user._id",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.lookingforteam",{"_index":1024,"title":{},"body":{"classes/UserDetails.html":{}}}],["this.preferredroles",{"_index":1023,"title":{},"body":{"classes/UserDetails.html":{}}}],["this.reflector.get('roles",{"_index":441,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.teammodel",{"_index":681,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teammodel(createteamdto).save",{"_index":670,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teammodel.find",{"_index":687,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teammodel.find({}).exec",{"_index":678,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teammodel.findbyid(id).populate('owner').exec",{"_index":680,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teammodel.findbyidandremove(id).exec",{"_index":712,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teammodel.findone",{"_index":679,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.teamservice.findonebytag(user.currentteam",{"_index":1163,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.teamsservice.checkifteamexists(tag",{"_index":604,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.create(createteamdto",{"_index":599,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.findall",{"_index":600,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.findone(id",{"_index":606,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.findonebytag(tag",{"_index":602,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TournamentsService.html":{}}}],["this.teamsservice.findonebytag(teamatag",{"_index":945,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.teamsservice.findonebytag(teambtag",{"_index":946,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.teamsservice.findonebytag(teamowner.currentteam",{"_index":891,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.teamsservice.inviteuser(req.user['username",{"_index":611,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.remove(id",{"_index":624,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.removeinvite(req.user['username",{"_index":621,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.removeuserfromteam(req.user['username",{"_index":618,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.searchteam(query",{"_index":608,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.teamsservice.update(id",{"_index":614,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.tournamentmodel",{"_index":883,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.tournamentmodel.find({}).exec",{"_index":888,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.tournamentmodel.findbyid(id).exec",{"_index":886,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.tournamentmodel.findone",{"_index":887,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.tournamentsservice.changedescription",{"_index":812,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.create(req['user",{"_index":802,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.findall",{"_index":816,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.findtournamentbyid(id",{"_index":820,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.findtournamentbyslug(slug",{"_index":818,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.getfinishedtournament",{"_index":825,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.getnewesttournament",{"_index":824,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.getteammatches(id",{"_index":823,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.jointournament(req['user",{"_index":805,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.kickfromtournament",{"_index":807,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.searchtournament(query",{"_index":827,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.setmatchresult",{"_index":815,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.tournamentsservice.starttournament(req['user",{"_index":810,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["this.updaterefreshtoken(newuser._id",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterefreshtoken(user._id",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel",{"_index":1155,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel(createuserdto",{"_index":1153,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidanddelete(id).exec",{"_index":1174,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":1157,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.create",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyusername",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyusername(authdto.username",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyusername(createteamdto.owner",{"_index":669,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.userservice.findbyusername(inviteuserdto.username",{"_index":695,"title":{},"body":{"injectables/TeamsService.html":{}}}],["this.userservice.findbyusername(organizer['username",{"_index":901,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.userservice.findbyusername(req.user['username",{"_index":591,"title":{},"body":{"controllers/TeamsController.html":{}}}],["this.userservice.findbyusername(user['username",{"_index":875,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["this.userservice.findbyusername(username",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TeamsService.html":{}}}],["this.userservice.update(userid",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":1082,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deletemsgatindex(index",{"_index":1108,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyusername(username",{"_index":1088,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findlikeusername(username",{"_index":1098,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findloggeduser(req.user['username",{"_index":1085,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(id",{"_index":1086,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.handleinvite",{"_index":1095,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.leaveteam(req['user",{"_index":1104,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":1110,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateself(req.user['username",{"_index":1101,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["timestamps",{"_index":493,"title":{},"body":{"classes/Team.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["title",{"_index":307,"title":{},"body":{"classes/CreateTournamentDto.html":{},"classes/Tournament.html":{},"injectables/TournamentsService.html":{}}}],["token",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["tokens",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens.refreshtoken",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["toobject",{"_index":494,"title":{},"body":{"classes/Team.html":{},"classes/User.html":{}}}],["top",{"_index":1016,"title":{},"body":{"classes/UserDetails.html":{},"miscellaneous/enumerations.html":{}}}],["tournament",{"_index":713,"title":{"classes/Tournament.html":{}},"body":{"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tournament._id.tostring",{"_index":971,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.dto",{"_index":796,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTournamentDto.html":{}}}],["tournament.dto.ts",{"_index":305,"title":{},"body":{"classes/CreateTournamentDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/UpdateTournamentDto.html":{},"coverage.html":{}}}],["tournament.dto.ts:15",{"_index":314,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["tournament.dto.ts:20",{"_index":308,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["tournament.dto.ts:26",{"_index":313,"title":{},"body":{"classes/CreateTournamentDto.html":{}}}],["tournament.dto.ts:6",{"_index":380,"title":{},"body":{"classes/KickFromTournamentDto.html":{}}}],["tournament.finished",{"_index":951,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.name",{"_index":837,"title":{},"body":{"modules/TournamentsModule.html":{}}}],["tournament.nrofteams",{"_index":904,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.organizer",{"_index":902,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.participants.length",{"_index":903,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.participants.sort",{"_index":909,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.save",{"_index":896,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.stages.foreach((stage",{"_index":974,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.stages.length",{"_index":950,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.stages[stagenr",{"_index":925,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.stages[stagenr].finished",{"_index":944,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.stages[stagenr].matches",{"_index":929,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.started",{"_index":900,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament.title",{"_index":955,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournament_dropped",{"_index":518,"title":{},"body":{"classes/TeamEventsHistory.html":{},"miscellaneous/enumerations.html":{}}}],["tournament_win",{"_index":517,"title":{},"body":{"classes/TeamEventsHistory.html":{},"miscellaneous/enumerations.html":{}}}],["tournamentdocument",{"_index":730,"title":{},"body":{"classes/Tournament.html":{},"injectables/TournamentsService.html":{},"miscellaneous/typealiases.html":{}}}],["tournamentid",{"_index":748,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["tournamentmodel",{"_index":845,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["tournaments",{"_index":735,"title":{},"body":{"controllers/TournamentsController.html":{},"index.html":{}}}],["tournaments.controller",{"_index":833,"title":{},"body":{"modules/TournamentsModule.html":{}}}],["tournaments.service",{"_index":795,"title":{},"body":{"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{}}}],["tournaments/tournaments.module",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["tournamentschema",{"_index":731,"title":{},"body":{"classes/Tournament.html":{},"modules/TournamentsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tournamentscontroller",{"_index":733,"title":{"controllers/TournamentsController.html":{}},"body":{"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"coverage.html":{}}}],["tournamentsmodule",{"_index":63,"title":{"modules/TournamentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TournamentsModule.html":{},"modules.html":{},"overview.html":{}}}],["tournamentsservice",{"_index":794,"title":{"injectables/TournamentsService.html":{}},"body":{"controllers/TournamentsController.html":{},"modules/TournamentsModule.html":{},"injectables/TournamentsService.html":{},"coverage.html":{},"overview.html":{}}}],["transferring",{"_index":916,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["transformer",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/UserUpdateSelfDto.html":{},"dependencies.html":{}}}],["true",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"classes/TeamHistory.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UsersService.html":{}}}],["type",{"_index":30,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/Stage.html":{},"interfaces/StageInterface.html":{},"classes/Team.html":{},"classes/TeamEventsHistory.html":{},"interfaces/TeamEventsInterface.html":{},"classes/TeamHistory.html":{},"interfaces/TeamHistoryInterface.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"classes/UserDetails.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1288,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedef",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["types",{"_index":512,"title":{},"body":{"classes/TeamEventsHistory.html":{},"classes/UpdateTeamDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["unauthorizedexception",{"_index":870,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["undefined",{"_index":450,"title":{},"body":{"classes/Stage.html":{},"classes/Team.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["unique",{"_index":484,"title":{},"body":{"classes/Team.html":{},"classes/Tournament.html":{},"classes/User.html":{}}}],["unknown",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1286,"title":{},"body":{"properties.html":{}}}],["update",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["update(@param('id",{"_index":613,"title":{},"body":{"controllers/TeamsController.html":{}}}],["update(@req",{"_index":1100,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":574,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["update(req",{"_index":1066,"title":{},"body":{"controllers/UsersController.html":{}}}],["updated",{"_index":777,"title":{},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["updateone",{"_index":671,"title":{},"body":{"injectables/TeamsService.html":{}}}],["updaterefreshtoken",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterefreshtoken(userid",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["updates",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateself",{"_index":1121,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateself(username",{"_index":1147,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateselfdto",{"_index":1067,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateteamdto",{"_index":575,"title":{"classes/UpdateTeamDto.html":{}},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/UpdateTeamDto.html":{},"coverage.html":{}}}],["updatetournamentdto",{"_index":749,"title":{"classes/UpdateTournamentDto.html":{}},"body":{"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/UpdateTournamentDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":984,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updating",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["uri",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TournamentsService.html":{}}}],["usefactory",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@delete(':id",{"_index":562,"title":{},"body":{"controllers/TeamsController.html":{}}}],["useguards(accesstokenguard)@delete('msg/:index",{"_index":1043,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@get('logout",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(accesstokenguard)@get('me",{"_index":1046,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@get('removeinvite/:username",{"_index":565,"title":{},"body":{"controllers/TeamsController.html":{}}}],["useguards(accesstokenguard)@get('removeuser/:username",{"_index":568,"title":{},"body":{"controllers/TeamsController.html":{}}}],["useguards(accesstokenguard)@patch(':id",{"_index":576,"title":{},"body":{"controllers/TeamsController.html":{}}}],["useguards(accesstokenguard)@patch('description/:tournamentid",{"_index":750,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["useguards(accesstokenguard)@patch('kick/:tournamentid",{"_index":779,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["useguards(accesstokenguard)@patch('leaveteam",{"_index":1057,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@patch('match/:tournamentid",{"_index":784,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["useguards(accesstokenguard)@patch('me",{"_index":1068,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@patch('start/:tournamentid",{"_index":789,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["useguards(accesstokenguard)@post",{"_index":548,"title":{},"body":{"controllers/TeamsController.html":{},"controllers/TournamentsController.html":{}}}],["useguards(accesstokenguard)@post('handleinvite",{"_index":1054,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@post('invite",{"_index":559,"title":{},"body":{"controllers/TeamsController.html":{}}}],["useguards(accesstokenguard)@post('join/:tournamentid",{"_index":772,"title":{},"body":{"controllers/TournamentsController.html":{}}}],["useguards(refreshtokenguard",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshtokenguard)@post('refresh",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":102,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/Tournament.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["user.currentteam",{"_index":595,"title":{},"body":{"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":321,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/InviteUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:13",{"_index":376,"title":{},"body":{"classes/InviteUserDto.html":{}}}],["user.dto.ts:20",{"_index":361,"title":{},"body":{"classes/DetailsDto.html":{}}}],["user.dto.ts:24",{"_index":360,"title":{},"body":{"classes/DetailsDto.html":{}}}],["user.dto.ts:28",{"_index":359,"title":{},"body":{"classes/DetailsDto.html":{}}}],["user.dto.ts:32",{"_index":358,"title":{},"body":{"classes/DetailsDto.html":{}}}],["user.dto.ts:36",{"_index":365,"title":{},"body":{"classes/DetailsDto.html":{}}}],["user.dto.ts:40",{"_index":363,"title":{},"body":{"classes/DetailsDto.html":{}}}],["user.dto.ts:47",{"_index":337,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:52",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:57",{"_index":333,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:61",{"_index":324,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:65",{"_index":335,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:69",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:73",{"_index":336,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":377,"title":{},"body":{"classes/InviteUserDto.html":{}}}],["user.dto.ts:80",{"_index":330,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.inbox.length",{"_index":1158,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.name",{"_index":1116,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.refreshtoken",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.save",{"_index":1172,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.toobject",{"_index":1090,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.updateone",{"_index":676,"title":{},"body":{"injectables/TeamsService.html":{}}}],["user.username",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"injectables/UsersService.html":{}}}],["userdetails",{"_index":991,"title":{"classes/UserDetails.html":{}},"body":{"classes/User.html":{},"classes/UserDetails.html":{},"coverage.html":{}}}],["userdocument",{"_index":1001,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["userexists",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TeamsService.html":{}}}],["userinvites",{"_index":701,"title":{},"body":{"injectables/TeamsService.html":{}}}],["userinvites.includes(team.tag",{"_index":705,"title":{},"body":{"injectables/TeamsService.html":{}}}],["usermodel",{"_index":1125,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/InviteUserDto.html":{},"classes/Team.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userroles",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/TournamentsService.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["userroles.organizer",{"_index":882,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["userroles.player",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":1033,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1115,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1072,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/create",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/schemas/user.schema",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"classes/Team.html":{},"injectables/TournamentsService.html":{}}}],["users/users.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{}}}],["users/users.service",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{}}}],["userschema",{"_index":1004,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.virtual('invites",{"_index":1006,"title":{},"body":{"classes/User.html":{}}}],["userscontroller",{"_index":1031,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{}}}],["usersinvitedbyteam",{"_index":703,"title":{},"body":{"injectables/TeamsService.html":{}}}],["usersinvitedbyteam.includes(user.username",{"_index":706,"title":{},"body":{"injectables/TeamsService.html":{}}}],["usersmodule",{"_index":64,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":178,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/TeamsController.html":{},"injectables/TeamsService.html":{},"injectables/TournamentsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdateselfdto",{"_index":1025,"title":{"injectables/UserUpdateSelfDto.html":{}},"body":{"injectables/UserUpdateSelfDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["validate",{"_index":22,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["validate(payload",{"_index":33,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validate(req",{"_index":420,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validatenested",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"injectables/UserUpdateSelfDto.html":{}}}],["validator",{"_index":160,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateTeamDto.html":{},"classes/CreateTournamentDto.html":{},"classes/CreateUserDto.html":{},"classes/DetailsDto.html":{},"classes/HandleInviteDto.html":{},"classes/InviteUserDto.html":{},"classes/KickFromTournamentDto.html":{},"classes/MatchResultDto.html":{},"injectables/UserUpdateSelfDto.html":{},"dependencies.html":{}}}],["value",{"_index":1235,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1184,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1250,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":1283,"title":{},"body":{"properties.html":{}}}],["virtuals",{"_index":495,"title":{},"body":{"classes/Team.html":{},"classes/User.html":{}}}],["void",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["watch",{"_index":1271,"title":{},"body":{"index.html":{}}}],["whole",{"_index":912,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["win",{"_index":959,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["winner",{"_index":387,"title":{},"body":{"classes/Match.html":{},"interfaces/MatchInterface.html":{},"classes/MatchResultDto.html":{},"controllers/TournamentsController.html":{},"injectables/TournamentsService.html":{}}}],["winners",{"_index":917,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["winnerteam",{"_index":947,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["winnerteam.events.push",{"_index":952,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["winnerteam.history.push",{"_index":957,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["winnerteam.save",{"_index":966,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["winnerteam.tag",{"_index":961,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["won",{"_index":954,"title":{},"body":{"injectables/TournamentsService.html":{}}}],["yes",{"_index":1134,"title":{},"body":{"injectables/UsersService.html":{}}}],["zoom",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TeamsModule.html":{},"modules/TournamentsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/accessToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AccessTokenGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/accessToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/accessToken.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/accessToken.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ntype JwtPayload = {\n  sub: string;\n  email: string;\n};\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(private config: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('JWT_ACCESS_SECRET'),\n    });\n  }\n\n  validate(payload: JwtPayload) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTeamsModule\n\nTeamsModule\n\nAppModule -->\n\nTeamsModule->AppModule\n\n\n\n\n\nTournamentsModule\n\nTournamentsModule\n\nAppModule -->\n\nTournamentsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TeamsModule\n                        \n                        \n                            TournamentsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TeamsModule } from './teams/teams.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TournamentsModule } from './tournaments/tournaments.module';\n\n@Module({\n  imports: [\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (config: ConfigService) => ({\n        uri: config.get('MONGODB_URI'),\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    TeamsModule,\n    TournamentsModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logout\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                signin\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Extracting user object from request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \nrefreshTokens(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshTokenGuard)@Post('refresh')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signin\n                        \n                    \n                \n            \n            \n                \nsignin(authDto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Req, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport { AuthDto } from './dto/auth.dto';\nimport { Request } from 'express';\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard';\nimport { RefreshTokenGuard } from '../common/guards/refreshToken.guard';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('signup')\n  signup(@Body() createUserDto: CreateUserDto) {\n    return this.authService.signUp(createUserDto);\n  }\n\n  @Post('signin')\n  signin(@Body() authDto: AuthDto) {\n    return this.authService.signIn(authDto);\n  }\n\n  /**\n   *\n   * @param req Extracting user object from request\n   */\n  @UseGuards(AccessTokenGuard)\n  @Get('logout')\n  logout(@Req() req: Request) {\n    this.authService.logout(req.user['sub']);\n  }\n\n  @UseGuards(RefreshTokenGuard)\n  @Post('refresh')\n  refreshTokens(@Req() req: Request) {\n    const username = req.user['username'];\n    const refreshToken = req.user['refreshToken'];\n    return this.authService.refreshTokens(username, refreshToken);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RefreshTokenStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AccessTokenStrategy } from './strategies/accessToken.strategy';\nimport { RefreshTokenStrategy } from './strategies/refreshToken.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService, AccessTokenStrategy, RefreshTokenStrategy],\n  imports: [JwtModule.register({}), ConfigModule.forRoot(), UsersModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                updateRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, username: string, role: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:113\n                \n            \n\n\n            \n                \n                    Generates both tokens for user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        accessToken\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:89\n                \n            \n\n\n            \n                \n                    Logout method\nSets user refreshToken to NULL\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(username: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:150\n                \n            \n\n\n            \n                \n                    Updates user's access Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        tokens\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:63\n                \n            \n\n\n            \n                \n                    Sign in method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        tokens\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:29\n                \n            \n\n\n            \n                \n                    Creates new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        refreshToken\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:99\n                \n            \n\n\n            \n                \n                    Function used to hash a refresh token and update it in user's document\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport * as argon2 from 'argon2';\nimport { AuthDto } from './dto/auth.dto';\nimport { UserRoles } from '../users/schemas/user.schema';\n\n/**\n * @typedef {Object} Tokens\n * @property {number} accessToken - Access Token\n * @property {number} refreshToken - Refresh Token\n */\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private userService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService,\n  ) {}\n\n  /**\n   * Creates new user\n   * @param {CreateUserDto} createUserDto\n   * @returns {Tokens} refreshToken\n   */\n  async signUp(createUserDto: CreateUserDto) {\n    //Checking if user exists\n    const userExists = await this.userService.findByUsername(\n      createUserDto.username,\n    );\n    if (userExists) {\n      throw new BadRequestException('User already exists');\n    }\n\n    //hashing password with argon\n    const hash = await argon2.hash(createUserDto.password);\n    console.log(createUserDto);\n    const newUser = await this.userService.create({\n      ...createUserDto,\n      password: hash,\n      role: UserRoles.PLAYER,\n      currentTeam: null,\n    });\n\n    //generating tokens for client\n    const tokens = await this.getTokens(\n      newUser._id,\n      newUser.username,\n      newUser.role,\n    );\n    await this.updateRefreshToken(newUser._id, tokens.refreshToken);\n    return tokens;\n  }\n\n  /**\n   * Sign in method\n   * @param {AuthDto} authDto\n   * @return{Tokens} tokens\n   */\n  async signIn(authDto: AuthDto) {\n    //Checking if user exists\n    const user = await this.userService.findByUsername(authDto.username);\n    if (!user) throw new BadRequestException('User does not exists');\n\n    //Checking if the password matches\n    const passwordMatches = await argon2.verify(\n      user.password,\n      authDto.password,\n    );\n    if (!passwordMatches)\n      throw new BadRequestException('Username or password is incorrect');\n\n    //generating tokens for client\n    const tokens = await this.getTokens(user._id, user.username, user.role);\n\n    //updating the user's refresh token\n    await this.updateRefreshToken(user._id, tokens.refreshToken);\n    return tokens;\n  }\n\n  /**\n   * Logout method\n   * Sets user refreshToken to NULL\n   * @param {string} userId\n   */\n  async logout(userId: string) {\n    //Sets refresh token to NULL\n    return await this.userService.update(userId, { refreshToken: null });\n  }\n\n  /**\n   * Function used to hash a refresh token and update it in user's document\n   * @param {string} userId\n   * @param {string} refreshToken\n   */\n  async updateRefreshToken(userId: string, refreshToken: string) {\n    const hashedRefreshedToken = await argon2.hash(refreshToken);\n    await this.userService.update(userId, {\n      refreshToken: hashedRefreshedToken,\n    });\n  }\n\n  /**\n   * Generates both tokens for user\n   * @param userId\n   * @param username\n   * @return{string} accessToken\n   * @return{string} refreshToken\n   */\n  async getTokens(userId: string, username: string, role: string) {\n    const [accessToken, refreshToken] = await Promise.all([\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username,\n          role,\n        },\n        {\n          secret: this.configService.get('JWT_ACCESS_SECRET'),\n          expiresIn: '30min',\n        },\n      ),\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username,\n          role,\n        },\n        {\n          secret: this.configService.get('JWT_REFRESH_SECRET'),\n          expiresIn: '30d',\n        },\n      ),\n    ]);\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  /**\n   * Updates user's access Token\n   * @param username\n   * @param refreshToken\n   * @return{Tokens} tokens\n   */\n  async refreshTokens(username: string, refreshToken: string) {\n    const user = await this.userService.findByUsername(username);\n    if (!user || !user.refreshToken)\n      throw new BadRequestException('Access Denied');\n\n    //Checks if refreshToken from request matches one from document\n    const refreshTokenMatches = await argon2.verify(\n      user.refreshToken,\n      refreshToken,\n    );\n    if (!refreshTokenMatches) throw new BadRequestException('Access Denied');\n\n    const tokens = await this.getTokens(user._id, user.username, user.role);\n    await this.updateRefreshToken(user._id, tokens.refreshToken);\n    return tokens;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTeamDto.html":{"url":"classes/CreateTeamDto.html","title":"class - CreateTeamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTeamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/dto/create-team.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                icon\n                            \n                            \n                                name\n                            \n                            \n                                owner\n                            \n                            \n                                tag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/dto/create-team.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/dto/create-team.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/dto/create-team.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/dto/create-team.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()@Length(4, 4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/dto/create-team.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Length,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateTeamDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty()\n  @IsString()\n  icon: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @Length(4, 4)\n  tag: string;\n\n  @IsString()\n  @IsNotEmpty()\n  owner: string;\n\n  @IsString()\n  color: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTournamentDto.html":{"url":"classes/CreateTournamentDto.html","title":"class - CreateTournamentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTournamentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/dto/create-tournament.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                nrOfTeams\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/create-tournament.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nrOfTeams\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsIn(['8', '16', '32', '4', '64'])@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/create-tournament.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/create-tournament.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsEmpty,\n  IsIn,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n} from 'class-validator';\n\nexport class CreateTournamentDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsIn([8, 16, 32, 4, 64])\n  @IsNotEmpty()\n  nrOfTeams: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                currentTeam\n                            \n                            \n                                    Optional\n                                details\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                role\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentTeam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DetailsDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: DetailsDto})@IsOptional()@IsDefined()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@IsEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@IsEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsDefined,\n  IsEmail,\n  IsEmpty,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { UserRoles } from '../schemas/user.schema';\nimport { Type } from 'class-transformer';\nimport { ApiHideProperty, ApiProduces, ApiProperty } from '@nestjs/swagger';\nimport { PlayerRoles } from '../schemas/user-details';\n\nexport class DetailsDto {\n  @IsOptional()\n  @IsString()\n  firstname: string;\n\n  @IsOptional()\n  @IsString()\n  country: string;\n\n  @IsOptional()\n  @IsString()\n  avatar: string;\n\n  @IsOptional()\n  @IsString()\n  about: string;\n\n  @IsOptional()\n  @IsEnum(PlayerRoles, { each: true })\n  preferredRoles: PlayerRoles[];\n\n  @IsOptional()\n  @IsBoolean()\n  lookingForTeam: boolean;\n}\n\nexport class CreateUserDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty()\n  @IsString()\n  avatar: string;\n\n  @ApiHideProperty()\n  @IsEmpty()\n  refreshToken: string;\n\n  @ApiProperty()\n  @IsEmpty()\n  currentTeam: string;\n\n  @ApiHideProperty()\n  @IsEmpty()\n  role: UserRoles;\n\n  @ApiProperty({ type: DetailsDto })\n  @IsOptional()\n  @IsDefined()\n  @Type(() => DetailsDto)\n  @ValidateNested()\n  details?: DetailsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DetailsDto.html":{"url":"classes/DetailsDto.html","title":"class - DetailsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DetailsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                about\n                            \n                            \n                                avatar\n                            \n                            \n                                country\n                            \n                            \n                                firstname\n                            \n                            \n                                lookingForTeam\n                            \n                            \n                                preferredRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        about\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lookingForTeam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        preferredRoles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlayerRoles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(PlayerRoles, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsDefined,\n  IsEmail,\n  IsEmpty,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { UserRoles } from '../schemas/user.schema';\nimport { Type } from 'class-transformer';\nimport { ApiHideProperty, ApiProduces, ApiProperty } from '@nestjs/swagger';\nimport { PlayerRoles } from '../schemas/user-details';\n\nexport class DetailsDto {\n  @IsOptional()\n  @IsString()\n  firstname: string;\n\n  @IsOptional()\n  @IsString()\n  country: string;\n\n  @IsOptional()\n  @IsString()\n  avatar: string;\n\n  @IsOptional()\n  @IsString()\n  about: string;\n\n  @IsOptional()\n  @IsEnum(PlayerRoles, { each: true })\n  preferredRoles: PlayerRoles[];\n\n  @IsOptional()\n  @IsBoolean()\n  lookingForTeam: boolean;\n}\n\nexport class CreateUserDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty()\n  @IsString()\n  avatar: string;\n\n  @ApiHideProperty()\n  @IsEmpty()\n  refreshToken: string;\n\n  @ApiProperty()\n  @IsEmpty()\n  currentTeam: string;\n\n  @ApiHideProperty()\n  @IsEmpty()\n  role: UserRoles;\n\n  @ApiProperty({ type: DetailsDto })\n  @IsOptional()\n  @IsDefined()\n  @Type(() => DetailsDto)\n  @ValidateNested()\n  details?: DetailsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HandleInviteDto.html":{"url":"classes/HandleInviteDto.html","title":"class - HandleInviteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HandleInviteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/handle-invite.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                decision\n                            \n                            \n                                teamtag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        decision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/handle-invite.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        teamtag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/handle-invite.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class HandleInviteDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  teamtag: string;\n\n  @ApiProperty()\n  @IsBoolean()\n  @IsNotEmpty()\n  decision: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InviteUserDto.html":{"url":"classes/InviteUserDto.html","title":"class - InviteUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InviteUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/dto/invite-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                teamtag\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        teamtag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/dto/invite-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/dto/invite-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class InviteUserDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  teamtag: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KickFromTournamentDto.html":{"url":"classes/KickFromTournamentDto.html","title":"class - KickFromTournamentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KickFromTournamentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/dto/kick-from-tournament.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                teamtag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        teamtag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/kick-from-tournament.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class KickFromTournamentDto {\n  @IsString()\n  @IsNotEmpty()\n  teamtag: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Match.html":{"url":"classes/Match.html","title":"class - Match","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Match\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/schemas/match.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                finished\n                            \n                            \n                                result\n                            \n                            \n                                teamA\n                            \n                            \n                                teamB\n                            \n                            \n                                winner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        finished\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/match.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/match.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        teamA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, ref: 'Team'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/match.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        teamB\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, ref: 'Team'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/match.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        winner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, ref: 'Team'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/match.schema.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type MatchDocument = Match & Document;\n\n@Schema()\nexport class Match {\n  @Prop({ type: String, ref: 'Team' })\n  teamA: string;\n\n  @Prop({ type: String, ref: 'Team' })\n  teamB: string;\n\n  @Prop({ type: String, ref: 'Team' })\n  winner: string;\n\n  @Prop()\n  result: string;\n\n  @Prop()\n  finished: boolean;\n}\n\nconst MatchSchema = SchemaFactory.createForClass(Match);\n\nexport { MatchSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MatchInterface.html":{"url":"interfaces/MatchInterface.html","title":"interface - MatchInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MatchInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/schemas/match.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            result\n                                        \n                                \n                                \n                                        \n                                            teamA\n                                        \n                                \n                                \n                                        \n                                            teamB\n                                        \n                                \n                                \n                                        \n                                            winner\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        result:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        teamA\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        teamA:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        teamB\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        teamB:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        winner\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        winner:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MatchInterface {\n  teamA: string;\n\n  teamB: string;\n\n  winner: string;\n\n  result: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatchResultDto.html":{"url":"classes/MatchResultDto.html","title":"class - MatchResultDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatchResultDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/dto/match-result.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                matchId\n                            \n                            \n                                result\n                            \n                            \n                                stageNr\n                            \n                            \n                                winner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        matchId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/match-result.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/match-result.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stageNr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/match-result.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        winner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/dto/match-result.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class MatchResultDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  matchId: string;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsNotEmpty()\n  stageNr: number;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  winner: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  result: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/refreshToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshTokenGuard extends AuthGuard('jwt-refresh') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/refreshToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/refreshToken.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/refreshToken.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private config: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromBodyField('refreshToken'),\n      secretOrKey: config.get('JWT_REFRESH_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  validate(req: Request, payload: any) {\n    const refreshToken = req.body.refreshToken;\n    return { ...payload, refreshToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/roles.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const roles = this.reflector.get('roles', context.getHandler());\n    if (!roles) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    return roles.includes(user.role);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stage.html":{"url":"classes/Stage.html","title":"class - Stage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/schemas/stage.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                finished\n                            \n                            \n                                matches\n                            \n                            \n                                stageNr\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        finished\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/stage.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matches\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Match[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/stage.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stageNr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/stage.schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { Match, MatchSchema } from './match.schema';\nimport { MatchInterface } from './match.interface';\n\nexport type StageDocument = Stage & Document;\n\n@Schema({ _id: false })\nexport class Stage {\n  @Prop({ required: true })\n  finished: boolean;\n\n  @Prop({ required: true })\n  stageNr: number;\n\n  @Prop({ type: [{ type: MatchSchema }] })\n  matches: Match[];\n}\n\nconst StageSchema = SchemaFactory.createForClass(Stage);\n\nexport { StageSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StageInterface.html":{"url":"interfaces/StageInterface.html","title":"interface - StageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/schemas/stage.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            finished\n                                        \n                                \n                                \n                                        \n                                            matches\n                                        \n                                \n                                \n                                        \n                                            stageNr\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        finished\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        finished:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        matches\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        matches:         MatchInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MatchInterface[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stageNr\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stageNr:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MatchInterface } from './match.interface';\n\nexport interface StageInterface {\n  finished: boolean;\n\n  stageNr: number;\n\n  matches: MatchInterface[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Team.html":{"url":"classes/Team.html","title":"class - Team","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Team\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/schema/team.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeTournament\n                            \n                            \n                                color\n                            \n                            \n                                events\n                            \n                            \n                                history\n                            \n                            \n                                icon\n                            \n                            \n                                invitedUsernames\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                owner\n                            \n                            \n                                tag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        activeTournament\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        events\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TeamEventsInterface[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TeamHistoryInterface[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: 'mdi-account-group'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        invitedUsernames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true, minlength: 4, maxlength: 4})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team.schema.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\nimport { User } from '../../users/schemas/user.schema';\nimport { TeamEventsInterface, TeamHistoryInterface } from './team.interface';\nimport { TeamHistorySchema } from './team-history.schema';\nimport { TeamEventsHistorySchema } from './team-events-history.schema';\n\nexport type TeamDocument = Team & Document;\n\n/**\n * @class Team\n */\n@Schema({ timestamps: true, toObject: { virtuals: true, getters: true } })\nexport class Team {\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({ default: 'mdi-account-group' })\n  icon: string;\n\n  @Prop({ required: true, unique: true, minlength: 4, maxlength: 4 })\n  tag: string;\n\n  @Prop({ type: String, ref: 'User' })\n  owner: string;\n\n  @Prop({ type: [{ type: String, ref: 'User' }] })\n  members: string[];\n\n  @Prop({ type: [{ type: mongoose.Schema.Types.String, ref: 'User' }] })\n  invitedUsernames: string[];\n\n  @Prop({ default: null })\n  activeTournament: string;\n\n  @Prop({ type: [{ type: TeamEventsHistorySchema }] })\n  events: TeamEventsInterface[];\n\n  @Prop({ type: [{ type: TeamHistorySchema }] })\n  history: TeamHistoryInterface[];\n\n  @Prop({ type: String })\n  color: string;\n}\n\nconst TeamSchema = SchemaFactory.createForClass(Team);\n\nTeamSchema.virtual('invitedUsers', {\n  type: 'String',\n  ref: 'User',\n  localField: 'invitedUsernames',\n  foreignField: 'username',\n});\n\nexport { TeamSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TeamEventsHistory.html":{"url":"classes/TeamEventsHistory.html","title":"class - TeamEventsHistory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TeamEventsHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/schema/team-events-history.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                msg\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team-events-history.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        msg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team-events-history.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, types: EventEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team-events-history.schema.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport enum EventEnum {\n  CREATED = 'CREATED',\n  JOINED = 'JOINED',\n\n  TOURNAMENT_WIN = 'TOURNAMENT_WIN',\n\n  TOURNAMENT_DROPPED = 'TOURNAMENT_DROPPED',\n\n  LEFT = 'LEFT',\n}\n\n@Schema({ _id: false })\nexport class TeamEventsHistory extends Document {\n  @Prop({ required: true, types: EventEnum })\n  type: EventEnum;\n\n  @Prop()\n  date: Date;\n\n  @Prop()\n  msg: string;\n}\n\nexport const TeamEventsHistorySchema =\n  SchemaFactory.createForClass(TeamEventsHistory);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TeamEventsInterface.html":{"url":"interfaces/TeamEventsInterface.html","title":"interface - TeamEventsInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TeamEventsInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/schema/team.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            msg\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        msg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        msg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         EventEnum\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventEnum\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EventEnum } from './team-events-history.schema';\n\nexport interface TeamHistoryInterface {\n  matchId: string;\n  opponent: string;\n  result: string;\n  date: Date;\n}\n\nexport interface TeamEventsInterface {\n  type: EventEnum;\n\n  date: Date;\n\n  msg: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TeamHistory.html":{"url":"classes/TeamHistory.html","title":"class - TeamHistory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TeamHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/schema/team-history.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                matchId\n                            \n                            \n                                opponent\n                            \n                            \n                                result\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team-history.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matchId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team-history.schema.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        opponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team-history.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teams/schema/team-history.schema.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\n@Schema({ _id: false })\nexport class TeamHistory extends Document {\n  @Prop()\n  matchId: string;\n\n  @Prop({ required: true })\n  opponent: string;\n\n  @Prop({ required: true })\n  result: string;\n\n  @Prop({ required: true })\n  date: Date;\n}\n\nexport const TeamHistorySchema = SchemaFactory.createForClass(TeamHistory);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TeamHistoryInterface.html":{"url":"interfaces/TeamHistoryInterface.html","title":"interface - TeamHistoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TeamHistoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/schema/team.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            matchId\n                                        \n                                \n                                \n                                        \n                                            opponent\n                                        \n                                \n                                \n                                        \n                                            result\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        matchId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        matchId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        opponent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        opponent:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        result:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EventEnum } from './team-events-history.schema';\n\nexport interface TeamHistoryInterface {\n  matchId: string;\n  opponent: string;\n  result: string;\n  date: Date;\n}\n\nexport interface TeamEventsInterface {\n  type: EventEnum;\n\n  date: Date;\n\n  msg: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TeamsController.html":{"url":"controllers/TeamsController.html","title":"controller - TeamsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TeamsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/teams.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                teams\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkIfTeamExists\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findByTag\n                            \n                            \n                                findOne\n                            \n                            \n                                inviteUserToTeam\n                            \n                            \n                                remove\n                            \n                            \n                                removeInvite\n                            \n                            \n                                removeUserFromTeam\n                            \n                            \n                                search\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkIfTeamExists\n                        \n                    \n                \n            \n            \n                \ncheckIfTeamExists(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('exists/:tag')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:64\n                \n            \n\n\n            \n                \n                    Checks if given team exists (used in create team page)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        exists\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req: Request, createTeamDto: CreateTeamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createTeamDto\n                                    \n                                                CreateTeamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByTag\n                        \n                    \n                \n            \n            \n                \nfindByTag(tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('tag/:tag')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inviteUserToTeam\n                        \n                    \n                \n            \n            \n                \ninviteUserToTeam(req: Request, inviteUserDto: InviteUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Post('invite')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    inviteUserDto\n                                    \n                                                InviteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeInvite\n                        \n                    \n                \n            \n            \n                \nremoveInvite(req: Request, username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('removeinvite/:username')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeUserFromTeam\n                        \n                    \n                \n            \n            \n                \nremoveUserFromTeam(req: Request, username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('removeuser/:username')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        search\n                        \n                    \n                \n            \n            \n                \nsearch(query: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search/:query')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateTeamDto: UpdateTeamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/teams/teams.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTeamDto\n                                    \n                                                UpdateTeamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Req,\n  UseGuards,\n  HttpException,\n  HttpStatus,\n  BadRequestException,\n} from '@nestjs/common';\nimport { TeamsService } from './teams.service';\nimport { CreateTeamDto } from './dto/create-team.dto';\nimport { UpdateTeamDto } from './dto/update-team.dto';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard';\nimport { InviteUserDto } from './dto/invite-user.dto';\nimport { UsersService } from '../users/users.service';\n\n@ApiTags('teams')\n@Controller('teams')\nexport class TeamsController {\n  constructor(\n    private readonly teamsService: TeamsService,\n    private userService: UsersService,\n  ) {}\n\n  @UseGuards(AccessTokenGuard)\n  @Post()\n  async create(@Req() req: Request, @Body() createTeamDto: CreateTeamDto) {\n    const user = await this.userService.findByUsername(req.user['username']);\n    if (user.username !== createTeamDto.owner) {\n      throw new BadRequestException('Usernames mismatch');\n    }\n    if (user.currentTeam !== null) {\n      throw new BadRequestException(\n        'User already in team. Leave current team first',\n      );\n    }\n\n    return this.teamsService.create(createTeamDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.teamsService.findAll();\n  }\n\n  @Get('tag/:tag')\n  findByTag(@Param('tag') tag: string) {\n    return this.teamsService.findOneByTag(tag);\n  }\n\n  /**\n   * Checks if given team exists (used in create team page)\n   * @param tag\n   * @return {boolean} exists\n   */\n  @Get('exists/:tag')\n  checkIfTeamExists(@Param('tag') tag: string) {\n    return this.teamsService.checkIfTeamExists(tag);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.teamsService.findOne(id);\n  }\n\n  @Get('search/:query')\n  search(@Param('query') query: string) {\n    return this.teamsService.searchTeam(query);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Post('invite')\n  inviteUserToTeam(@Req() req: Request, @Body() inviteUserDto: InviteUserDto) {\n    return this.teamsService.inviteUser(req.user['username'], inviteUserDto);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateTeamDto: UpdateTeamDto) {\n    return this.teamsService.update(id, updateTeamDto);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get('removeuser/:username')\n  removeUserFromTeam(@Req() req: Request, @Param('username') username: string) {\n    return this.teamsService.removeUserFromTeam(req.user['username'], username);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get('removeinvite/:username')\n  removeInvite(@Req() req: Request, @Param('username') username: string) {\n    return this.teamsService.removeInvite(req.user['username'], username);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.teamsService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TeamsModule.html":{"url":"modules/TeamsModule.html","title":"module - TeamsModule","body":"\n                   \n\n\n\n\n    Modules\n    TeamsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TeamsModule\n\n\n\ncluster_TeamsModule_exports\n\n\n\ncluster_TeamsModule_providers\n\n\n\n\nTeamsService \n\nTeamsService \n\n\n\nTeamsModule\n\nTeamsModule\n\nTeamsService  -->\n\nTeamsModule->TeamsService \n\n\n\n\n\nTeamsService\n\nTeamsService\n\nTeamsModule -->\n\nTeamsService->TeamsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/teams/teams.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TeamsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TeamsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TeamsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TeamsService } from './teams.service';\nimport { TeamsController } from './teams.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Team, TeamSchema } from './schema/team.schema';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  controllers: [TeamsController],\n  providers: [TeamsService],\n  exports: [TeamsService],\n  imports: [\n    MongooseModule.forFeature([{ name: Team.name, schema: TeamSchema }]),\n    forwardRef(() => UsersModule),\n  ],\n})\nexport class TeamsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TeamsService.html":{"url":"injectables/TeamsService.html","title":"injectable - TeamsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TeamsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/teams.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkIfTeamExists\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                findOneByTag\n                            \n                            \n                                    Async\n                                inviteUser\n                            \n                            \n                                    Async\n                                isTeamOwnedByUser\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                removeInvite\n                            \n                            \n                                    Async\n                                removeUserFromTeam\n                            \n                            \n                                    Async\n                                searchTeam\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(teamModel: Model, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/teams/teams.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkIfTeamExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkIfTeamExists(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createTeamDto: CreateTeamDto)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTeamDto\n                                    \n                                                CreateTeamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByTag(tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        inviteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    inviteUser(inviter: string, inviteUserDto: InviteUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inviter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    inviteUserDto\n                                    \n                                                InviteUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        isTeamOwnedByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    isTeamOwnedByUser(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInvite\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInvite(owner: string, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserFromTeam\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserFromTeam(owner: string, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchTeam\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchTeam(query: string)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateTeamDto: UpdateTeamDto)\n                \n            \n\n\n            \n                \n                    Defined in src/teams/teams.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTeamDto\n                                    \n                                                UpdateTeamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateTeamDto } from './dto/create-team.dto';\nimport { UpdateTeamDto } from './dto/update-team.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Team, TeamDocument } from './schema/team.schema';\nimport { Model } from 'mongoose';\nimport { UsersService } from '../users/users.service';\nimport { InviteUserDto } from './dto/invite-user.dto';\nimport { EventEnum } from './schema/team-events-history.schema';\n\n@Injectable()\nexport class TeamsService {\n  constructor(\n    @InjectModel(Team.name) private teamModel: Model,\n    @Inject(forwardRef(() => UsersService))\n    private userService: UsersService,\n  ) {}\n\n  async create(createTeamDto: CreateTeamDto) {\n    const user = await this.userService.findByUsername(createTeamDto.owner);\n    const team = await new this.teamModel(createTeamDto).save();\n    await team\n      .updateOne({\n        $push: {\n          events: {\n            type: EventEnum.CREATED,\n            date: Date.now(),\n          },\n        },\n      })\n      .exec();\n    await user.updateOne({ currentTeam: team.tag }).exec();\n    return team;\n  }\n\n  findAll() {\n    return this.teamModel.find({}).exec();\n  }\n\n  async findOneByTag(tag: string) {\n    const team = await this.teamModel.findOne({ tag }).exec();\n    if (!team) {\n      throw new NotFoundException();\n    }\n    return team;\n  }\n\n  findOne(id: string) {\n    return this.teamModel.findById(id).populate('owner').exec();\n  }\n\n  async searchTeam(query: string) {\n    return this.teamModel\n      .find({\n        $or: [\n          { name: new RegExp('.*' + query + '.*', 'i') },\n          { tag: new RegExp('.*' + query + '.*', 'i') },\n        ],\n      })\n      .select({ tag: 1, name: 1, icon: 1, color: 1, members: 1, owner: 1 })\n      .limit(10);\n  }\n\n  async isTeamOwnedByUser(userId: string) {\n    const team = await this.teamModel.find({ owner: userId });\n    if (!team) {\n      return false;\n    }\n    return true;\n  }\n\n  async checkIfTeamExists(tag: string) {\n    const team = await this.teamModel.findOne({ tag }).exec();\n\n    return {\n      exists: !!team,\n    };\n  }\n\n  update(id: string, updateTeamDto: UpdateTeamDto) {\n    return this.teamModel\n      .findByIdAndUpdate(id, updateTeamDto, { new: true })\n      .exec();\n  }\n\n  async removeUserFromTeam(owner: string, username: string) {\n    const team = await this.teamModel.findOne({ owner: owner });\n    const user = await this.userService.findByUsername(username);\n    if (!team || !user) {\n      throw new BadRequestException('Not Found');\n    }\n\n    if (user.currentTeam !== team.tag) {\n      throw new BadRequestException('User is not in team');\n    }\n    await team\n      .updateOne({\n        $pull: { members: user.username },\n        $push: {\n          events: {\n            type: EventEnum.LEFT,\n            date: Date.now(),\n            msg: `${user.username} left the team`,\n          },\n        },\n      })\n      .exec();\n    await user.updateOne({\n      currentTeam: null,\n      $push: {\n        inbox: `You have been removed from ${team.tag}`,\n      },\n    });\n    return team;\n  }\n\n  async inviteUser(inviter: string, inviteUserDto: InviteUserDto) {\n    const user = await this.userService.findByUsername(inviteUserDto.username);\n\n    const team = await this.teamModel.findOne({\n      tag: inviteUserDto.teamtag,\n    });\n\n    if (team.owner !== inviter) {\n      throw new BadRequestException('You are not the owner');\n    }\n\n    if (!user || !team) {\n      throw new BadRequestException('Team or User doesnt exists');\n    }\n    const userInvites = JSON.stringify(user.invitesTags);\n    const usersInvitedByTeam = JSON.stringify(team.invitedUsernames);\n\n    if (\n      userInvites.includes(team.tag) ||\n      usersInvitedByTeam.includes(user.username)\n    ) {\n      throw new BadRequestException('Already invited');\n    }\n\n    await user\n      .updateOne({\n        $push: {\n          invitesTags: team.tag,\n        },\n      })\n      .exec();\n    return await team\n      .updateOne({ $push: { invitedUsernames: user.username } }, { new: true })\n      .exec();\n  }\n\n  async removeInvite(owner: string, username: string) {\n    const team = await this.teamModel.findOne({ owner: owner });\n    const user = await this.userService.findByUsername(username);\n    if (!team || !user) {\n      throw new BadRequestException('Not Found');\n    }\n\n    const userInvites = JSON.parse(JSON.stringify(user.invitesTags));\n    const usersInvitedByTeam = JSON.parse(\n      JSON.stringify(team.invitedUsernames),\n    );\n\n    if (\n      !userInvites.includes(team.tag) ||\n      !usersInvitedByTeam.includes(user.username)\n    ) {\n      throw new BadRequestException('Not invited');\n    }\n\n    await user\n      .updateOne({\n        $pull: {\n          invitesTags: team.tag,\n        },\n      })\n      .exec();\n    return await team\n      .updateOne({ $pull: { invitedUsernames: user.username } }, { new: true })\n      .exec();\n  }\n\n  remove(id: string) {\n    return this.teamModel.findByIdAndRemove(id).exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tournament.html":{"url":"classes/Tournament.html","title":"class - Tournament","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tournament\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/schemas/tournament.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                finished\n                            \n                            \n                                nrOfTeams\n                            \n                            \n                                organizer\n                            \n                            \n                                participants\n                            \n                            \n                                slug\n                            \n                            \n                                stages\n                            \n                            \n                                started\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        finished\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nrOfTeams\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        organizer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: String, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        participants\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Stage[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        started\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tournaments/schemas/tournament.schema.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { Stage, StageSchema } from './stage.schema';\n\nexport type TournamentDocument = Tournament & Document;\n\n@Schema({ timestamps: true })\nexport class Tournament {\n  @Prop({ required: true })\n  title: string;\n\n  @Prop({ required: true, unique: true })\n  slug: string;\n\n  @Prop({ required: true })\n  nrOfTeams: number;\n\n  @Prop({ required: true, default: false })\n  started: boolean;\n\n  @Prop({ required: true, default: false })\n  finished: boolean;\n\n  @Prop()\n  description: string;\n\n  @Prop({ required: true, type: String, ref: 'User' })\n  organizer: string;\n\n  @Prop({ type: [{ type: String, ref: 'Team' }] })\n  participants: string[];\n\n  @Prop({ type: [{ type: StageSchema }] })\n  stages: Stage[];\n}\n\nconst TournamentSchema = SchemaFactory.createForClass(Tournament);\n\nexport { TournamentSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TournamentsController.html":{"url":"controllers/TournamentsController.html","title":"controller - TournamentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TournamentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/tournaments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tournaments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changeDescription\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findBySlug\n                            \n                            \n                                    Async\n                                getFinishedTournament\n                            \n                            \n                                    Async\n                                getNewestTournament\n                            \n                            \n                                    Async\n                                getTeamMatches\n                            \n                            \n                                    Async\n                                joinTournaments\n                            \n                            \n                                    Async\n                                kickFromTournament\n                            \n                            \n                                    Async\n                                searchByQuery\n                            \n                            \n                                    Async\n                                setMatchResult\n                            \n                            \n                                    Async\n                                startTournament\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changeDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeDescription(req: Request, tournamentid: string, updateTournamentDto: UpdateTournamentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('description/:tournamentid')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTournamentDto\n                                    \n                                                UpdateTournamentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req: Request, createTournamentDto: CreateTournamentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:34\n                \n            \n\n\n            \n                \n                    Creates new tournament\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nlogged user\n\n\n                                    \n                                \n                                \n                                    createTournamentDto\n                                    \n                                                CreateTournamentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nbasic info about tournaments\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        new Tournament document\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:122\n                \n            \n\n\n            \n                \n                    Returns all existing tournaments\n\n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySlug(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('slug/:slug')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:131\n                \n            \n\n\n            \n                \n                    Returns specific tournament\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFinishedTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFinishedTournament()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('finished')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNewestTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNewestTournament()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('new')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTeamMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTeamMatches(id: string, tag: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/team/:tag')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        joinTournaments\n                        \n                    \n                \n            \n            \n                \n                    \n                    joinTournaments(req: Request, tournamentid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Post('join/:tournamentid')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:49\n                \n            \n\n\n            \n                \n                    Allows team owner join a specified tournament\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nlogged user\n\n\n                                    \n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ntournament id\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        updated tournament document\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        kickFromTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    kickFromTournament(req: Request, tournamentid: string, kickFromTournamentDto: KickFromTournamentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('kick/:tournamentid')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    kickFromTournamentDto\n                                    \n                                                KickFromTournamentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchByQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchByQuery(query: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search/:query')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setMatchResult\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMatchResult(req: Request, matchResultDto: MatchResultDto, tournamentid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('match/:tournamentid')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:106\n                \n            \n\n\n            \n                \n                    Allows to set match result and pick a winner\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    matchResultDto\n                                    \n                                                MatchResultDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        startTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    startTournament(req: Request, tournamentid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('start/:tournamentid')\n                \n            \n\n            \n                \n                    Defined in src/tournaments/tournaments.controller.ts:77\n                \n            \n\n\n            \n                \n                    Starts tournament (seeding brackets)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Req,\n} from '@nestjs/common';\nimport { TournamentsService } from './tournaments.service';\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard';\nimport { Request } from 'express';\nimport { CreateTournamentDto } from './dto/create-tournament.dto';\nimport { ApiTags } from '@nestjs/swagger';\nimport { MatchResultDto } from './dto/match-result.dto';\nimport { UpdateTournamentDto } from './dto/update-tournament.dto';\nimport { KickFromTournamentDto } from './dto/kick-from-tournament.dto';\n\n@ApiTags('tournaments')\n@Controller('tournaments')\nexport class TournamentsController {\n  constructor(private readonly tournamentsService: TournamentsService) {}\n\n  /**\n   * Creates new tournament\n   * @param req - logged user\n   * @param createTournamentDto - basic info about tournaments\n   * @returns {Tournament} new Tournament document\n   */\n  @UseGuards(AccessTokenGuard)\n  @Post()\n  async create(\n    @Req() req: Request,\n    @Body() createTournamentDto: CreateTournamentDto,\n  ) {\n    return this.tournamentsService.create(req['user'], createTournamentDto);\n  }\n\n  /**\n   * Allows team owner join a specified tournament\n   * @param req - logged user\n   * @param tournamentid - tournament id\n   * @returns {Tournament} updated tournament document\n   */\n  @UseGuards(AccessTokenGuard)\n  @Post('join/:tournamentid')\n  async joinTournaments(\n    @Req() req: Request,\n    @Param('tournamentid') tournamentid: string,\n  ) {\n    return this.tournamentsService.joinTournament(req['user'], tournamentid);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch('kick/:tournamentid')\n  async kickFromTournament(\n    @Req() req: Request,\n    @Param('tournamentid') tournamentid: string,\n    @Body() kickFromTournamentDto: KickFromTournamentDto,\n  ) {\n    return await this.tournamentsService.kickFromTournament(\n      req['user']['username'],\n      tournamentid,\n      kickFromTournamentDto,\n    );\n  }\n\n  /**\n   * Starts tournament (seeding brackets)\n   * @param req\n   * @param tournamentid {string}\n   */\n  @UseGuards(AccessTokenGuard)\n  @Patch('start/:tournamentid')\n  async startTournament(\n    @Req() req: Request,\n    @Param('tournamentid') tournamentid: string,\n  ) {\n    return this.tournamentsService.startTournament(req['user'], tournamentid);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch('description/:tournamentid')\n  async changeDescription(\n    @Req() req: Request,\n    @Param('tournamentid') tournamentid: string,\n    @Body() updateTournamentDto: UpdateTournamentDto,\n  ) {\n    return this.tournamentsService.changeDescription(\n      req['user'],\n      tournamentid,\n      updateTournamentDto,\n    );\n  }\n\n  /**\n   * Allows to set match result and pick a winner\n   * @param req {Request}\n   * @param matchResultDto {MatchResultDto}\n   * @param tournamentid {string}\n   */\n  @UseGuards(AccessTokenGuard)\n  @Patch('match/:tournamentid')\n  async setMatchResult(\n    @Req() req: Request,\n    @Body() matchResultDto: MatchResultDto,\n    @Param('tournamentid') tournamentid: string,\n  ) {\n    return this.tournamentsService.setMatchResult(\n      tournamentid,\n      req['user'],\n      matchResultDto,\n    );\n  }\n\n  /**\n   * Returns all existing tournaments\n   */\n  @Get()\n  async findAll() {\n    return await this.tournamentsService.findAll();\n  }\n\n  /**\n   * Returns specific tournament\n   * @param id\n   */\n  @Get('slug/:slug')\n  async findBySlug(@Param('slug') slug: string) {\n    return await this.tournamentsService.findTournamentBySlug(slug);\n  }\n  @Get('/id/:id')\n  async findById(@Param('id') id: string) {\n    return await this.tournamentsService.findTournamentById(id);\n  }\n\n  @Get('/:id/team/:tag')\n  async getTeamMatches(@Param('id') id: string, @Param('tag') tag: string) {\n    return await this.tournamentsService.getTeamMatches(id, tag);\n  }\n\n  @Get('new')\n  async getNewestTournament() {\n    return await this.tournamentsService.getNewestTournament();\n  }\n\n  @Get('finished')\n  async getFinishedTournament() {\n    return await this.tournamentsService.getFinishedTournament();\n  }\n\n  @Get('search/:query')\n  async searchByQuery(@Param('query') query: string) {\n    return await this.tournamentsService.searchTournament(query);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TournamentsModule.html":{"url":"modules/TournamentsModule.html","title":"module - TournamentsModule","body":"\n                   \n\n\n\n\n    Modules\n    TournamentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TournamentsModule\n\n\n\ncluster_TournamentsModule_providers\n\n\n\ncluster_TournamentsModule_exports\n\n\n\ncluster_TournamentsModule_imports\n\n\n\n\nTeamsModule\n\nTeamsModule\n\n\n\nTournamentsModule\n\nTournamentsModule\n\nTournamentsModule -->\n\nTeamsModule->TournamentsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nTournamentsModule -->\n\nUsersModule->TournamentsModule\n\n\n\n\n\nTournamentsService \n\nTournamentsService \n\nTournamentsService  -->\n\nTournamentsModule->TournamentsService \n\n\n\n\n\nTournamentsService\n\nTournamentsService\n\nTournamentsModule -->\n\nTournamentsService->TournamentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tournaments/tournaments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TournamentsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TournamentsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TeamsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TournamentsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TournamentsService } from './tournaments.service';\nimport { TournamentsController } from './tournaments.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Tournament, TournamentSchema } from './schemas/tournament.schema';\nimport { UsersModule } from '../users/users.module';\nimport { TeamsModule } from '../teams/teams.module';\nimport { Match, MatchSchema } from './schemas/match.schema';\nimport { Stage, StageSchema } from './schemas/stage.schema';\n\n@Module({\n  controllers: [TournamentsController],\n  providers: [TournamentsService],\n  imports: [\n    MongooseModule.forFeature([\n      { name: Tournament.name, schema: TournamentSchema },\n    ]),\n\n    UsersModule,\n    TeamsModule,\n  ],\n  exports: [TournamentsService],\n})\nexport class TournamentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TournamentsService.html":{"url":"injectables/TournamentsService.html","title":"injectable - TournamentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TournamentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/tournaments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changeDescription\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findTournamentById\n                            \n                            \n                                    Async\n                                findTournamentBySlug\n                            \n                            \n                                    Async\n                                getFinishedTournament\n                            \n                            \n                                    Async\n                                getNewestTournament\n                            \n                            \n                                    Async\n                                getTeamMatches\n                            \n                            \n                                    Async\n                                joinTournament\n                            \n                            \n                                    Async\n                                kickFromTournament\n                            \n                            \n                                    Async\n                                searchTournament\n                            \n                            \n                                    Async\n                                setMatchResult\n                            \n                            \n                                    Async\n                                startTournament\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tournamentModel: Model, userService: UsersService, teamsService: TeamsService)\n                    \n                \n                        \n                            \n                                Defined in src/tournaments/tournaments.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tournamentModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamsService\n                                                  \n                                                        \n                                                                        TeamsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changeDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeDescription(organizer: Express.User, tournamentid: string, updateTournamentDto: UpdateTournamentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:369\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    organizer\n                                    \n                                                Express.User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTournamentDto\n                                    \n                                                UpdateTournamentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: Express.User, createTournamentDto: CreateTournamentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Express.User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createTournamentDto\n                                    \n                                                CreateTournamentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTournamentById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTournamentById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTournamentBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTournamentBySlug(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFinishedTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFinishedTournament()\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:395\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNewestTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNewestTournament()\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:392\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTeamMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTeamMatches(id: string, tag: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:329\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tag\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        joinTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    joinTournament(user: Express.User, tournamentid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Express.User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        kickFromTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    kickFromTournament(organizer: string, tournamentId: string, kickFromTournamentDto: KickFromTournamentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    organizer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    kickFromTournamentDto\n                                    \n                                                KickFromTournamentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchTournament(query: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:402\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setMatchResult\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMatchResult(tournamentid: string, organizer: Express.User, matchResultDto: MatchResultDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    organizer\n                                    \n                                                Express.User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    matchResultDto\n                                    \n                                                MatchResultDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        startTournament\n                        \n                    \n                \n            \n            \n                \n                    \n                    startTournament(organizer: Express.User, tournamentid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tournaments/tournaments.service.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    organizer\n                                    \n                                                Express.User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tournamentid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpCode,\n  HttpStatus,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { CreateTournamentDto } from './dto/create-tournament.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Tournament, TournamentDocument } from './schemas/tournament.schema';\nimport { UsersService } from '../users/users.service';\nimport { TeamsService } from '../teams/teams.service';\nimport { UserRoles } from '../users/schemas/user.schema';\nimport { MatchResultDto } from './dto/match-result.dto';\nimport slugify from 'slugify';\nimport { UpdateTournamentDto } from './dto/update-tournament.dto';\nimport { EventEnum } from '../teams/schema/team-events-history.schema';\nimport { KickFromTournamentDto } from './dto/kick-from-tournament.dto';\n\n@Injectable()\nexport class TournamentsService {\n  constructor(\n    @InjectModel(Tournament.name)\n    private tournamentModel: Model,\n\n    private userService: UsersService,\n    private teamsService: TeamsService,\n  ) {}\n  async create(user: Express.User, createTournamentDto: CreateTournamentDto) {\n    const organizer = await this.userService.findByUsername(user['username']);\n\n    if (organizer.currentTeam !== null) {\n      throw new BadRequestException('User is in team');\n    }\n\n    const { title, description, nrOfTeams } = createTournamentDto;\n\n    const slug: string = slugify(title) + Math.floor(Math.random() * 90 + 10);\n\n    await organizer.update({ role: UserRoles.ORGANIZER }).exec();\n\n    return await new this.tournamentModel({\n      title,\n      slug,\n      description,\n      nrOfTeams,\n      organizer: organizer.username,\n    }).save();\n  }\n\n  async findTournamentById(id: string) {\n    const tournament = await this.tournamentModel.findById(id).exec();\n    if (!tournament) {\n      throw new NotFoundException();\n    }\n    return tournament;\n  }\n\n  async findTournamentBySlug(slug: string) {\n    const tournament = await this.tournamentModel.findOne({ slug }).exec();\n    if (!tournament) {\n      throw new NotFoundException();\n    }\n    return tournament;\n  }\n\n  async findAll() {\n    return await this.tournamentModel.find({}).exec();\n  }\n\n  async joinTournament(user: Express.User, tournamentid: string) {\n    const teamOwner = await this.userService.findByUsername(user['username']);\n\n    if (teamOwner.currentTeam === null) {\n      throw new BadRequestException('User not in team');\n    }\n    const team = await this.teamsService.findOneByTag(teamOwner.currentTeam);\n\n    if (!team) {\n      throw new BadRequestException('Team doesnt exists');\n    }\n\n    // if (team.members.length + 1  team !== kickFromTournamentDto.teamtag,\n    );\n    team.activeTournament = null;\n\n    await team.save();\n    await tournament.save();\n    return HttpStatus.OK;\n  }\n\n  async startTournament(organizer: Express.User, tournamentid: string) {\n    const tournament = await this.findTournamentById(tournamentid);\n    if (!tournament) {\n      throw new BadRequestException('Tournament doesnt exists');\n    }\n    if (tournament.started) {\n      throw new BadRequestException('Tournament already started');\n    }\n    const user = await this.userService.findByUsername(organizer['username']);\n\n    if (user.username !== tournament.organizer) {\n      throw new BadRequestException('User is not a tournament organizer');\n    }\n\n    if (!(tournament.participants.length === tournament.nrOfTeams)) {\n      throw new BadRequestException('Not enough teams');\n    }\n\n    let stagesNr = Math.log(tournament.participants.length) / Math.log(2);\n\n    const stages = [];\n\n    const participants = tournament.participants.sort(\n      () => Math.random() - 0.5,\n    );\n\n    /**\n     * Creates whole bracket with empty matches, used later for transferring winners to next stage\n     */\n\n    let stageCounter = 0;\n    let matchesPerRound = participants.length / 2;\n    while (stagesNr > 0) {\n      const newStage = { finished: false, stageNr: stageCounter, matches: [] };\n      for (let i = 0; i  0 && !tournament.stages[stageNr - 1].finished) {\n      throw new BadRequestException('Previous stage is not yet finished');\n    }\n\n    let matchIndex = 0;\n    const matches = tournament.stages[stageNr].matches;\n\n    /**\n     * Looks for a match that will be updated\n     */\n    let teamAtag = '';\n    let teamBtag = '';\n    matches.map((match, index) => {\n      if (match['id'] === matchId) {\n        matchIndex = index;\n        if (match.teamA !== winner && match.teamB !== winner) {\n          throw new BadRequestException('Invalid winner');\n        }\n        teamAtag = match.teamA;\n        teamBtag = match.teamB;\n        match.winner = winner;\n        match.result = result;\n        match.finished = true;\n      }\n    });\n\n    tournament.stages[stageNr].matches = matches;\n\n    /**\n     * Moves winner to next round\n     */\n\n    if (stageNr  {\n      if (!match.finished) allFinishedFlag = false;\n    });\n\n    tournament.stages[stageNr].finished = allFinishedFlag;\n\n    const teamA = await this.teamsService.findOneByTag(teamAtag);\n    const teamB = await this.teamsService.findOneByTag(teamBtag);\n    const winnerTeam = teamA.tag === winner ? teamA : teamB;\n    const loserTeam = teamA.tag !== winner ? teamA : teamB;\n\n    if (stageNr === tournament.stages.length - 1) {\n      tournament.finished = tournament.stages[stageNr].finished;\n      winnerTeam.events.push({\n        type: EventEnum.TOURNAMENT_WIN,\n        date: new Date(),\n        msg: `Team won \"${tournament.title}\" tournament!`,\n      });\n    }\n\n    /**\n     * Adding matches to teams' history\n     */\n\n    winnerTeam.history.push({\n      opponent: loserTeam.tag,\n      result: 'win',\n      date: new Date(),\n      matchId: matchId,\n    });\n\n    loserTeam.history.push({\n      opponent: winnerTeam.tag,\n      result: 'loss',\n      date: new Date(),\n      matchId: matchId,\n    });\n\n    loserTeam.events.push({\n      type: EventEnum.TOURNAMENT_DROPPED,\n      date: new Date(),\n      msg: `Team dropped out from \"${tournament.title}\" in stage ${\n        stageNr + 1\n      } `,\n    });\n\n    await winnerTeam.save();\n    await loserTeam.save();\n\n    await tournament.save();\n\n    return tournament;\n  }\n\n  async getTeamMatches(id: string, tag: string) {\n    const tournament = await this.findTournamentById(id);\n    if (!tournament) {\n      throw new BadRequestException('Tournament doesnt exists');\n    }\n    if (!tournament.started) {\n      throw new BadRequestException('Tournament didnt start');\n    }\n    const team = await this.teamsService.findOneByTag(tag);\n    if (!team) {\n      throw new BadRequestException('Team doesnt exists');\n    }\n    if (team.activeTournament !== tournament._id.toString()) {\n      throw new BadRequestException(\n        'Team doesnt participate in this tournament',\n      );\n    }\n    const opponents = [];\n    tournament.stages.forEach((stage) => {\n      stage.matches.forEach((match) => {\n        if (match.teamA === team.tag || match.teamB === team.tag) {\n          if (match.finished !== true) {\n            opponents.push(\n              team.tag === match.teamA ? match.teamB : match.teamA,\n            );\n          }\n        }\n      });\n    });\n    const opponentsObjects = [];\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTeamDto.html":{"url":"classes/UpdateTeamDto.html","title":"class - UpdateTeamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTeamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teams/dto/update-team.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateTeamDto } from './create-team.dto';\n\nexport class UpdateTeamDto extends PartialType(CreateTeamDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTournamentDto.html":{"url":"classes/UpdateTournamentDto.html","title":"class - UpdateTournamentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTournamentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tournaments/dto/update-tournament.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateTournamentDto } from './create-tournament.dto';\n\nexport class UpdateTournamentDto extends PartialType(CreateTournamentDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                currentTeam\n                            \n                            \n                                details\n                            \n                            \n                                email\n                            \n                            \n                                inbox\n                            \n                            \n                                invitesTags\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                role\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentTeam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Team', defualt: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDetails\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: UserDetails, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inbox\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        invitesTags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Team[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\nimport { Team } from '../../teams/schema/team.schema';\nimport { UserDetails } from './user-details';\n\nexport type UserDocument = User & Document;\n\nexport enum UserRoles {\n  PLAYER = 'PLAYER',\n  ORGANIZER = 'ORGANIZER',\n  ADMIN = 'ADMIN',\n}\n\n/**\n * @class User\n */\n@Schema({ timestamps: true, toObject: { virtuals: true, getters: true } })\nexport class User {\n  @Prop({ required: true, unique: true })\n  username: string;\n\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  @Prop({ default: null })\n  avatar: string;\n\n  @Prop({ required: true })\n  password: string;\n\n  @Prop({ required: true })\n  role: UserRoles;\n\n  @Prop()\n  refreshToken: string;\n\n  @Prop({ type: mongoose.Schema.Types.String, ref: 'Team', defualt: null })\n  currentTeam: string;\n\n  @Prop({ type: [{ type: mongoose.Schema.Types.String, ref: 'Team' }] })\n  invitesTags: Team[];\n\n  @Prop()\n  inbox: string[];\n\n  @Prop({ type: UserDetails, default: new UserDetails() })\n  details: UserDetails;\n}\nconst UserSchema = SchemaFactory.createForClass(User);\n\nUserSchema.virtual('invites', {\n  type: 'String',\n  ref: 'Team',\n  localField: 'invitesTags',\n  foreignField: 'tag',\n});\n\nexport { UserSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDetails.html":{"url":"classes/UserDetails.html","title":"class - UserDetails","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/schemas/user-details.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                about\n                            \n                            \n                                country\n                            \n                            \n                                firstname\n                            \n                            \n                                lookingForTeam\n                            \n                            \n                                preferredRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/users/schemas/user-details.ts:14\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        about\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user-details.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user-details.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user-details.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lookingForTeam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user-details.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        preferredRoles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlayerRoles[]\n\n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user-details.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export enum PlayerRoles {\n  MID = 'MID',\n  TOP = 'TOP',\n  JUNGLE = 'JUNGLE',\n  BOT = 'BOT',\n  SUPPORT = 'SUPPORT',\n}\n\nexport class UserDetails {\n  firstname: string;\n  country: string;\n  about: string;\n  preferredRoles: PlayerRoles[];\n  lookingForTeam: boolean;\n\n  public constructor() {\n    this.firstname = '';\n    this.country = '';\n    this.about = '';\n    this.preferredRoles = [];\n    this.lookingForTeam = true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserUpdateSelfDto.html":{"url":"injectables/UserUpdateSelfDto.html","title":"injectable - UserUpdateSelfDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserUpdateSelfDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-update-self.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                details\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DetailsDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDefined()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-update-self.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-update-self.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  IsDefined,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { DetailsDto } from './create-user.dto';\n\n@Injectable()\nexport class UserUpdateSelfDto {\n  @IsOptional()\n  @IsString()\n  password: string;\n\n  @IsOptional()\n  @IsDefined()\n  @Type(() => DetailsDto)\n  @ValidateNested()\n  details: DetailsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                deleteMsgAtIndex\n                            \n                            \n                                    Async\n                                findLogged\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                            \n                                handleInvite\n                            \n                            \n                                leaveTeam\n                            \n                            \n                                remove\n                            \n                            \n                                searchByUsername\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:36\n                \n            \n\n\n            \n                \n                    Creates user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteMsgAtIndex\n                        \n                    \n                \n            \n            \n                \ndeleteMsgAtIndex(req: Request, index: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Delete('msg/:index')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findLogged\n                        \n                    \n                \n            \n            \n                \n                    \n                    findLogged(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('me')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:47\n                \n            \n\n\n            \n                \n                    Returns logged user's data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nfrom AccessTokenGuard\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        user data of the token owner\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:57\n                \n            \n\n\n            \n                \n                    Returns specified user's data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nID of user\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nuser data\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('name/:username')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:66\n                \n            \n\n\n            \n                \n                    Return specified user's data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nuser's username\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleInvite\n                        \n                    \n                \n            \n            \n                \nhandleInvite(req: Request, handleInviteDto: HandleInviteDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Post('handleinvite')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    handleInviteDto\n                                    \n                                                HandleInviteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        leaveTeam\n                        \n                    \n                \n            \n            \n                \nleaveTeam(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('leaveTeam')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles('ADMIN')@UseGuards(AccessTokenGuard, RolesGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:125\n                \n            \n\n\n            \n                \n                    Lets Admin remove user account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchByUsername\n                        \n                    \n                \n            \n            \n                \nsearchByUsername(username: string, team: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search/user')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    team\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(req: Request, updateSelfDto: UserUpdateSelfDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('me')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:102\n                \n            \n\n\n            \n                \n                    Allows user to modify his data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \npassed from request by AccessTokenGuard\n\n\n                                    \n                                \n                                \n                                    updateSelfDto\n                                    \n                                                UserUpdateSelfDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Req,\n  NotFoundException,\n  Query,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UserUpdateSelfDto } from './dto/user-update-self.dto';\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard';\nimport { Request } from 'express';\nimport { ApiTags } from '@nestjs/swagger';\nimport { RolesGuard } from '../common/guards/roles.guard';\nimport { Roles } from '../common/decorators/roles.decorator';\nimport { HandleInviteDto } from './dto/handle-invite.dto';\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Creates user\n   * @param {CreateUserDto} createUserDto\n   * @returns {User} user\n   *\n   */\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  /**\n   * Returns logged user's data\n   * @returns {User} user data of the token owner\n   * @param req - from AccessTokenGuard\n   */\n  @UseGuards(AccessTokenGuard)\n  @Get('me')\n  async findLogged(@Req() req: Request) {\n    return await this.usersService.findLoggedUser(req.user['username']);\n  }\n\n  /**\n   * Returns specified user's data\n   * @returns {User} - user data\n   * @param id {string} - ID of user\n   */\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(id);\n  }\n\n  /**\n   * Return specified user's data\n   * @param username {string} - user's username\n   */\n  @Get('name/:username')\n  async findOneByUsername(@Param('username') username: string) {\n    const user = await this.usersService.findByUsername(username);\n    if (!user) {\n      throw new NotFoundException();\n    }\n    const cleared = user.toObject();\n    delete cleared.refreshToken;\n    delete cleared.password;\n    return cleared;\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Post('handleinvite')\n  handleInvite(@Req() req: Request, @Body() handleInviteDto: HandleInviteDto) {\n    return this.usersService.handleInvite(\n      req.user['username'],\n      handleInviteDto,\n    );\n  }\n\n  @Get('search/user')\n  searchByUsername(\n    @Query('username') username: string,\n    @Query('team') team: boolean,\n  ) {\n    // return { username, team };\n    return this.usersService.findLikeUsername(username, team);\n  }\n\n  /**\n   * Allows user to modify his data\n   * @param req - passed from request by AccessTokenGuard\n   * @param updateSelfDto\n   */\n  @UseGuards(AccessTokenGuard)\n  @Patch('me')\n  update(@Req() req: Request, @Body() updateSelfDto: UserUpdateSelfDto) {\n    return this.usersService.updateSelf(req.user['username'], updateSelfDto);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch('leaveTeam')\n  leaveTeam(@Req() req: Request) {\n    return this.usersService.leaveTeam(req['user']);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Delete('msg/:index')\n  deleteMsgAtIndex(@Req() req: Request, @Param('index') index: number) {\n    return this.usersService.deleteMsgAtIndex(index, req.user['username']);\n  }\n\n  /**\n   * Lets Admin remove user account\n   * @param id\n   */\n  @Roles('ADMIN')\n  @UseGuards(AccessTokenGuard, RolesGuard)\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './schemas/user.schema';\nimport { TeamsModule } from '../teams/teams.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    forwardRef(() => TeamsModule),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteMsgAtIndex\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findLikeUsername\n                            \n                            \n                                    Async\n                                findLoggedUser\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                handleInvite\n                            \n                            \n                                    Async\n                                leaveTeam\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, teamService: TeamsService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMsgAtIndex\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMsgAtIndex(index: number, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUsername(username: string, populate?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    populate\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findLikeUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findLikeUsername(query: string, team?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    team\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findLoggedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findLoggedUser(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleInvite\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleInvite(username: string, handleInviteDto: HandleInviteDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    handleInviteDto\n                                    \n                                                HandleInviteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        leaveTeam\n                        \n                    \n                \n            \n            \n                \n                    \n                    leaveTeam(reqUser: Express.User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reqUser\n                                    \n                                                Express.User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:185\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateSelf\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSelf(username: string, userUpdateSelfDto: UserUpdateSelfDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:143\n                \n            \n\n\n            \n                \n                    Update function for changes to account made by user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userUpdateSelfDto\n                                    \n                                                UserUpdateSelfDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User, UserDocument } from './schemas/user.schema';\nimport { Model } from 'mongoose';\nimport { UserUpdateSelfDto } from './dto/user-update-self.dto';\nimport { TeamsService } from '../teams/teams.service';\nimport { HandleInviteDto } from './dto/handle-invite.dto';\nimport { EventEnum } from '../teams/schema/team-events-history.schema';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n    @Inject(forwardRef(() => TeamsService))\n    private teamService: TeamsService,\n  ) {}\n\n  async create(createUserDto: CreateUserDto) {\n    const createdUser = await new this.userModel(createUserDto);\n    return createdUser.save();\n  }\n\n  async findAll(): Promise {\n    return this.userModel\n      .find()\n      .select({ refreshToken: 0, password: 0, _v: 0 })\n      .exec();\n  }\n\n  async findLoggedUser(username: string): Promise {\n    return this.userModel\n      .findOne({ username })\n      .select({ refreshToken: 0, password: 0, _v: 0 })\n      .exec();\n  }\n\n  async findOne(id: string): Promise {\n    return this.userModel\n      .findById(id)\n      .select({ refreshToken: 0, password: 0, _v: 0 });\n  }\n\n  async deleteMsgAtIndex(index: number, username: string) {\n    const user = await this.userModel.findOne({ username });\n    if (!user) {\n      throw new BadRequestException();\n    }\n    if (user.inbox.length - 1  {\n    if (populate) {\n      const user = await this.userModel\n        .findOne({ username })\n        .populate('invites')\n        .exec();\n      return user;\n    }\n    const user = await this.userModel.findOne({ username }).exec();\n    return user;\n  }\n\n  async findLikeUsername(query: string, team?: boolean) {\n    return this.userModel\n      .find({\n        username: new RegExp('.*' + query + '.*', 'i'),\n        currentTeam: team ? { $in: [null, new RegExp('.*')] } : null,\n      })\n      .select({ username: 1, 'details.preferredRoles': 1, avatar: 1 })\n      .limit(10);\n  }\n\n  async update(\n    id: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.userModel\n      .findByIdAndUpdate(id, updateUserDto, { new: true })\n      .exec();\n  }\n\n  /**\n   * Update function for changes to account made by user\n   * @param {string} username\n   * @param {UserUpdateSelfDto} userUpdateSelfDto\n   */\n  async updateSelf(\n    username: string,\n    userUpdateSelfDto: UserUpdateSelfDto,\n  ): Promise {\n    return this.userModel\n      .findOneAndUpdate({ username }, userUpdateSelfDto, { new: true })\n      .select({ refreshToken: 0, password: 0, _v: 0 })\n      .exec();\n  }\n\n  async leaveTeam(reqUser: Express.User) {\n    const user = await this.userModel.findOne({\n      username: reqUser['username'],\n    });\n    if (!user) {\n      throw new BadRequestException('User not found');\n    }\n    if (user.currentTeam === null) {\n      throw new BadRequestException('User not in team');\n    }\n    const team = await this.teamService.findOneByTag(user.currentTeam);\n    if (!team) {\n      throw new BadRequestException(\"Team doesn't exists\");\n    }\n    if (team.activeTournament !== null) {\n      throw new BadRequestException('Team is participating in tournament');\n    }\n    if (user.username === team.owner) {\n      throw new BadRequestException('You cant leave your own team');\n    }\n    team.members = team.members.filter((member) => member !== user.username);\n    team.events.push({\n      type: EventEnum.LEFT,\n      date: new Date(),\n      msg: `${user.username} left the team`,\n    });\n    user.currentTeam = null;\n    await team.save();\n    await user.save();\n    return { msg: 'Successfully left the team' };\n  }\n\n  async remove(id: string) {\n    return this.userModel.findByIdAndDelete(id).exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/accessToken.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/refreshToken.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/accessToken.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/refreshToken.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/teams/dto/create-team.dto.ts\n            \n            class\n            CreateTeamDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/teams/dto/invite-user.dto.ts\n            \n            class\n            InviteUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/teams/dto/update-team.dto.ts\n            \n            class\n            UpdateTeamDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/teams/schema/team-events-history.schema.ts\n            \n            class\n            TeamEventsHistory\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/teams/schema/team-events-history.schema.ts\n            \n            variable\n            TeamEventsHistorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/teams/schema/team-history.schema.ts\n            \n            class\n            TeamHistory\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/teams/schema/team-history.schema.ts\n            \n            variable\n            TeamHistorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/teams/schema/team.interface.ts\n            \n            interface\n            TeamEventsInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/teams/schema/team.interface.ts\n            \n            interface\n            TeamHistoryInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/teams/schema/team.schema.ts\n            \n            class\n            Team\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/teams/schema/team.schema.ts\n            \n            variable\n            TeamSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/teams/teams.controller.ts\n            \n            controller\n            TeamsController\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/teams/teams.service.ts\n            \n            injectable\n            TeamsService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/tournaments/dto/create-tournament.dto.ts\n            \n            class\n            CreateTournamentDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tournaments/dto/kick-from-tournament.dto.ts\n            \n            class\n            KickFromTournamentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tournaments/dto/match-result.dto.ts\n            \n            class\n            MatchResultDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/tournaments/dto/update-tournament.dto.ts\n            \n            class\n            UpdateTournamentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/match.interface.ts\n            \n            interface\n            MatchInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/match.schema.ts\n            \n            class\n            Match\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/match.schema.ts\n            \n            variable\n            MatchSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/stage.interface.ts\n            \n            interface\n            StageInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/stage.schema.ts\n            \n            class\n            Stage\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/stage.schema.ts\n            \n            variable\n            StageSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/tournament.schema.ts\n            \n            class\n            Tournament\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/tournaments/schemas/tournament.schema.ts\n            \n            variable\n            TournamentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tournaments/tournaments.controller.ts\n            \n            controller\n            TournamentsController\n            \n                42 %\n                (6/14)\n            \n        \n        \n            \n                \n                src/tournaments/tournaments.service.ts\n            \n            injectable\n            TournamentsService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            DetailsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/handle-invite.dto.ts\n            \n            class\n            HandleInviteDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/user-update-self.dto.ts\n            \n            injectable\n            UserUpdateSelfDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/schemas/user-details.ts\n            \n            class\n            UserDetails\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                54 %\n                (6/11)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                7 %\n                (1/14)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.1.3\n        \n            argon2 : ^0.30.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            mongoose : ^6.6.5\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            slugify : ^1.6.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EventEnum   (src/.../team-events-history.schema.ts)\n                        \n                        \n                            PlayerRoles   (src/.../user-details.ts)\n                        \n                        \n                            UserRoles   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/teams/schema/team-events-history.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        EventEnum\n                    \n                \n                        \n                            \n                                 CREATED\n                            \n                        \n                        \n                            \n                                Value : CREATED\n                            \n                        \n                        \n                            \n                                 JOINED\n                            \n                        \n                        \n                            \n                                Value : JOINED\n                            \n                        \n                        \n                            \n                                 TOURNAMENT_WIN\n                            \n                        \n                        \n                            \n                                Value : TOURNAMENT_WIN\n                            \n                        \n                        \n                            \n                                 TOURNAMENT_DROPPED\n                            \n                        \n                        \n                            \n                                Value : TOURNAMENT_DROPPED\n                            \n                        \n                        \n                            \n                                 LEFT\n                            \n                        \n                        \n                            \n                                Value : LEFT\n                            \n                        \n            \n        \n\n    src/users/schemas/user-details.ts\n    \n        \n            \n                \n                    \n                        \n                        PlayerRoles\n                    \n                \n                        \n                            \n                                 MID\n                            \n                        \n                        \n                            \n                                Value : MID\n                            \n                        \n                        \n                            \n                                 TOP\n                            \n                        \n                        \n                            \n                                Value : TOP\n                            \n                        \n                        \n                            \n                                 JUNGLE\n                            \n                        \n                        \n                            \n                                Value : JUNGLE\n                            \n                        \n                        \n                            \n                                 BOT\n                            \n                        \n                        \n                            \n                                Value : BOT\n                            \n                        \n                        \n                            \n                                 SUPPORT\n                            \n                        \n                        \n                            \n                                Value : SUPPORT\n                            \n                        \n            \n        \n\n    src/users/schemas/user.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRoles\n                    \n                \n                        \n                            \n                                 PLAYER\n                            \n                        \n                        \n                            \n                                Value : PLAYER\n                            \n                        \n                        \n                            \n                                 ORGANIZER\n                            \n                        \n                        \n                            \n                                Value : ORGANIZER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nEsport Tournaments Platform - Backend\nAn online platform that allows players to organize and participate in community tournaments in the game League of Legends.\nEnvironment Variables\nTo run this project, you will need to add the following environment variables to your .env file\nJWT_ACCESS_SECRET\nJWT_REFRESH_SECRET\nMONGODB_URI\nRun Locally\nClone the project\n  git clone https://github.com/Opyd/praca_inzGo to the project directory\n  cd praca_inz/backendInstall dependencies\n  npm installStart the server\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prod\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TeamsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TournamentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TeamsModule\n\n\n\ncluster_TeamsModule_exports\n\n\n\ncluster_TeamsModule_providers\n\n\n\ncluster_TournamentsModule\n\n\n\ncluster_TournamentsModule_exports\n\n\n\ncluster_TournamentsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTeamsModule\n\nTeamsModule\n\n\n\nTournamentsModule\n\nTournamentsModule\n\nTournamentsModule -->\n\nTeamsModule->TournamentsModule\n\n\n\nAppModule -->\n\nTeamsModule->AppModule\n\n\n\n\n\nTeamsService \n\nTeamsService \n\nTeamsService  -->\n\nTeamsModule->TeamsService \n\n\n\nAppModule -->\n\nTournamentsModule->AppModule\n\n\n\n\n\nTournamentsService \n\nTournamentsService \n\nTournamentsService  -->\n\nTournamentsModule->TournamentsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nTournamentsModule -->\n\nUsersModule->TournamentsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\nTeamsService\n\nTeamsService\n\nTeamsModule -->\n\nTeamsService->TeamsModule\n\n\n\n\n\nTournamentsService\n\nTournamentsService\n\nTournamentsModule -->\n\nTournamentsService->TournamentsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JwtPayload   (src/.../accessToken.strategy.ts)\n                        \n                        \n                            MatchDocument   (src/.../match.schema.ts)\n                        \n                        \n                            StageDocument   (src/.../stage.schema.ts)\n                        \n                        \n                            TeamDocument   (src/.../team.schema.ts)\n                        \n                        \n                            TournamentDocument   (src/.../tournament.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/strategies/accessToken.strategy.ts\n    \n    \n        \n            \n                \n                    \n                    JwtPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/tournaments/schemas/match.schema.ts\n    \n    \n        \n            \n                \n                    \n                    MatchDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/tournaments/schemas/stage.schema.ts\n    \n    \n        \n            \n                \n                    \n                    StageDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/teams/schema/team.schema.ts\n    \n    \n        \n            \n                \n                    \n                    TeamDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/tournaments/schemas/tournament.schema.ts\n    \n    \n        \n            \n                \n                    \n                    TournamentDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MatchSchema   (src/.../match.schema.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            StageSchema   (src/.../stage.schema.ts)\n                        \n                        \n                            TeamEventsHistorySchema   (src/.../team-events-history.schema.ts)\n                        \n                        \n                            TeamHistorySchema   (src/.../team-history.schema.ts)\n                        \n                        \n                            TeamSchema   (src/.../team.schema.ts)\n                        \n                        \n                            TournamentSchema   (src/.../tournament.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/tournaments/schemas/match.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MatchSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Match)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n    src/tournaments/schemas/stage.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StageSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Stage)\n                    \n                \n\n\n        \n    \n\n    src/teams/schema/team-events-history.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TeamEventsHistorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(TeamEventsHistory)\n                    \n                \n\n\n        \n    \n\n    src/teams/schema/team-history.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TeamHistorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(TeamHistory)\n                    \n                \n\n\n        \n    \n\n    src/teams/schema/team.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TeamSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Team)\n                    \n                \n\n\n        \n    \n\n    src/tournaments/schemas/tournament.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TournamentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Tournament)\n                    \n                \n\n\n        \n    \n\n    src/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
